// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.VRGraphicRaycaster/VRUIControls.VRGraphicRaycastResult
#include "VRUIControls/VRGraphicRaycaster.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.UI.Graphic graphic
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Graphic*& VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::dyn_graphic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::dyn_graphic");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "graphic"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Graphic**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single distance
[[deprecated("Use field access instead!")]] float& VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::dyn_distance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::dyn_distance");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Vector3 position
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::dyn_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::dyn_position");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "position"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Vector2 insideRootCanvasPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::dyn_insideRootCanvasPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::dyn_insideRootCanvasPosition");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "insideRootCanvasPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VRUIControls.VRGraphicRaycaster/VRUIControls.VRGraphicRaycastResult..ctor
// ABORTED elsewhere.  VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult::VRGraphicRaycastResult(::UnityEngine::UI::Graphic* graphic, float distance, ::UnityEngine::Vector3 position, ::UnityEngine::Vector2 insideRootCanvasPosition)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.VRGraphicRaycaster/VRUIControls.<>c
#include "VRUIControls/VRGraphicRaycaster_--c.hpp"
// Including type: System.Comparison`1
#include "System/Comparison_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly VRUIControls.VRGraphicRaycaster/VRUIControls.<>c <>9
::VRUIControls::VRGraphicRaycaster::$$c* VRUIControls::VRGraphicRaycaster::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRGraphicRaycaster::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::VRUIControls::VRGraphicRaycaster::$$c*>("VRUIControls", "VRGraphicRaycaster/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly VRUIControls.VRGraphicRaycaster/VRUIControls.<>c <>9
void VRUIControls::VRGraphicRaycaster::$$c::_set_$$9(::VRUIControls::VRGraphicRaycaster::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRGraphicRaycaster::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("VRUIControls", "VRGraphicRaycaster/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Comparison`1<VRUIControls.VRGraphicRaycaster/VRUIControls.VRGraphicRaycastResult> <>9__12_0
::System::Comparison_1<::VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>* VRUIControls::VRGraphicRaycaster::$$c::_get_$$9__12_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRGraphicRaycaster::$$c::_get_$$9__12_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Comparison_1<::VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>*>("VRUIControls", "VRGraphicRaycaster/<>c", "<>9__12_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Comparison`1<VRUIControls.VRGraphicRaycaster/VRUIControls.VRGraphicRaycastResult> <>9__12_0
void VRUIControls::VRGraphicRaycaster::$$c::_set_$$9__12_0(::System::Comparison_1<::VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRGraphicRaycaster::$$c::_set_$$9__12_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("VRUIControls", "VRGraphicRaycaster/<>c", "<>9__12_0", value)));
}
// Autogenerated method: VRUIControls.VRGraphicRaycaster/VRUIControls.<>c..cctor
void VRUIControls::VRGraphicRaycaster::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRGraphicRaycaster::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRGraphicRaycaster/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VRUIControls.VRGraphicRaycaster/VRUIControls.<>c.<RaycastCanvas>b__12_0
int VRUIControls::VRGraphicRaycaster::$$c::$RaycastCanvas$b__12_0(::VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult g1, ::VRUIControls::VRGraphicRaycaster::VRGraphicRaycastResult g2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRGraphicRaycaster::$$c::<RaycastCanvas>b__12_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RaycastCanvas>b__12_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(g1), ::il2cpp_utils::ExtractType(g2)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, g1, g2);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.VRInputModule
#include "VRUIControls/VRInputModule.hpp"
// Including type: VRUIControls.VRPointer
#include "VRUIControls/VRPointer.hpp"
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
// Including type: HapticFeedbackController
#include "GlobalNamespace/HapticFeedbackController.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: VRUIControls.MouseState
#include "VRUIControls/MouseState.hpp"
// Including type: System.Comparison`1
#include "System/Comparison_1.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.EventSystems.BaseEventData
#include "UnityEngine/EventSystems/BaseEventData.hpp"
// Including type: VRUIControls.MouseButtonEventData
#include "VRUIControls/MouseButtonEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMouseLeftId
int VRUIControls::VRInputModule::_get_kMouseLeftId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::_get_kMouseLeftId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("VRUIControls", "VRInputModule", "kMouseLeftId"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMouseLeftId
void VRUIControls::VRInputModule::_set_kMouseLeftId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::_set_kMouseLeftId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRInputModule", "kMouseLeftId", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMinPressValue
float VRUIControls::VRInputModule::_get_kMinPressValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::_get_kMinPressValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("VRUIControls", "VRInputModule", "kMinPressValue"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinPressValue
void VRUIControls::VRInputModule::_set_kMinPressValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::_set_kMinPressValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRInputModule", "kMinPressValue", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10CA7A0
// Autogenerated static field getter
// Get static field: static private readonly System.Comparison`1<UnityEngine.EventSystems.RaycastResult> _raycastComparer
::System::Comparison_1<::UnityEngine::EventSystems::RaycastResult>* VRUIControls::VRInputModule::_get__raycastComparer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::_get__raycastComparer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Comparison_1<::UnityEngine::EventSystems::RaycastResult>*>("VRUIControls", "VRInputModule", "_raycastComparer"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Comparison`1<UnityEngine.EventSystems.RaycastResult> _raycastComparer
void VRUIControls::VRInputModule::_set__raycastComparer(::System::Comparison_1<::UnityEngine::EventSystems::RaycastResult>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::_set__raycastComparer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRInputModule", "_raycastComparer", value));
}
// Autogenerated instance field getter
// Get instance field: private VRUIControls.VRPointer _vrPointer
[[deprecated("Use field access instead!")]] ::VRUIControls::VRPointer*& VRUIControls::VRInputModule::dyn__vrPointer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::dyn__vrPointer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrPointer"))->offset;
  return *reinterpret_cast<::VRUIControls::VRPointer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Libraries.HM.HMLib.VR.HapticPresetSO _rumblePreset
[[deprecated("Use field access instead!")]] ::Libraries::HM::HMLib::VR::HapticPresetSO*& VRUIControls::VRInputModule::dyn__rumblePreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::dyn__rumblePreset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rumblePreset"))->offset;
  return *reinterpret_cast<::Libraries::HM::HMLib::VR::HapticPresetSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly HapticFeedbackController _hapticFeedbackController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HapticFeedbackController*& VRUIControls::VRInputModule::dyn__hapticFeedbackController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::dyn__hapticFeedbackController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hapticFeedbackController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HapticFeedbackController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <useMouseForPressInput>k__BackingField
[[deprecated("Use field access instead!")]] bool& VRUIControls::VRInputModule::dyn_$useMouseForPressInput$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::dyn_$useMouseForPressInput$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<useMouseForPressInput>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.GameObject> onProcessMousePressEvent
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::GameObject*>*& VRUIControls::VRInputModule::dyn_onProcessMousePressEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::dyn_onProcessMousePressEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onProcessMousePressEvent"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.EventSystems.PointerEventData> _pointerData
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::EventSystems::PointerEventData*>*& VRUIControls::VRInputModule::dyn__pointerData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::dyn__pointerData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pointerData"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::EventSystems::PointerEventData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<UnityEngine.Component> _componentList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Component*>*& VRUIControls::VRInputModule::dyn__componentList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::dyn__componentList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_componentList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Component*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly VRUIControls.MouseState _mouseState
[[deprecated("Use field access instead!")]] ::VRUIControls::MouseState*& VRUIControls::VRInputModule::dyn__mouseState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::dyn__mouseState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mouseState"))->offset;
  return *reinterpret_cast<::VRUIControls::MouseState**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VRUIControls.VRInputModule.get_useMouseForPressInput
bool VRUIControls::VRInputModule::get_useMouseForPressInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::get_useMouseForPressInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useMouseForPressInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.set_useMouseForPressInput
void VRUIControls::VRInputModule::set_useMouseForPressInput(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::set_useMouseForPressInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_useMouseForPressInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRUIControls.VRInputModule.add_onProcessMousePressEvent
void VRUIControls::VRInputModule::add_onProcessMousePressEvent(::System::Action_1<::UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::add_onProcessMousePressEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onProcessMousePressEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRUIControls.VRInputModule.remove_onProcessMousePressEvent
void VRUIControls::VRInputModule::remove_onProcessMousePressEvent(::System::Action_1<::UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::remove_onProcessMousePressEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onProcessMousePressEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRUIControls.VRInputModule..cctor
void VRUIControls::VRInputModule::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRInputModule", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.GetPointerData
bool VRUIControls::VRInputModule::GetPointerData(int id, ByRef<::UnityEngine::EventSystems::PointerEventData*> data, bool create) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::GetPointerData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPointerData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::EventSystems::PointerEventData*&>(), ::il2cpp_utils::ExtractType(create)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, id, byref(data), create);
}
// Autogenerated method: VRUIControls.VRInputModule.GetMousePointerEventData
::VRUIControls::MouseState* VRUIControls::VRInputModule::GetMousePointerEventData(int id) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::GetMousePointerEventData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMousePointerEventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodRethrow<::VRUIControls::MouseState*, false>(this, ___internal__method, id);
}
// Autogenerated method: VRUIControls.VRInputModule.GetLastPointerEventData
::UnityEngine::EventSystems::PointerEventData* VRUIControls::VRInputModule::GetLastPointerEventData(int id) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::GetLastPointerEventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastPointerEventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::EventSystems::PointerEventData*, false>(this, ___internal__method, id);
}
// Autogenerated method: VRUIControls.VRInputModule.ShouldStartDrag
bool VRUIControls::VRInputModule::ShouldStartDrag(::UnityEngine::Vector2 pressPos, ::UnityEngine::Vector2 currentPos, float threshold, bool useDragThreshold) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::ShouldStartDrag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldStartDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pressPos), ::il2cpp_utils::ExtractType(currentPos), ::il2cpp_utils::ExtractType(threshold), ::il2cpp_utils::ExtractType(useDragThreshold)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pressPos, currentPos, threshold, useDragThreshold);
}
// Autogenerated method: VRUIControls.VRInputModule.ProcessMove
void VRUIControls::VRInputModule::ProcessMove(::UnityEngine::EventSystems::PointerEventData* pointerEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::ProcessMove");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointerEvent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointerEvent);
}
// Autogenerated method: VRUIControls.VRInputModule.ProcessDrag
void VRUIControls::VRInputModule::ProcessDrag(::UnityEngine::EventSystems::PointerEventData* pointerEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::ProcessDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointerEvent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointerEvent);
}
// Autogenerated method: VRUIControls.VRInputModule.ClearSelection
void VRUIControls::VRInputModule::ClearSelection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::ClearSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.DeselectIfSelectionChanged
void VRUIControls::VRInputModule::DeselectIfSelectionChanged(::UnityEngine::GameObject* currentOverGo, ::UnityEngine::EventSystems::BaseEventData* pointerEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::DeselectIfSelectionChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeselectIfSelectionChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentOverGo), ::il2cpp_utils::ExtractType(pointerEvent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentOverGo, pointerEvent);
}
// Autogenerated method: VRUIControls.VRInputModule.SendUpdateEventToSelectedObject
bool VRUIControls::VRInputModule::SendUpdateEventToSelectedObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::SendUpdateEventToSelectedObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUpdateEventToSelectedObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.ProcessMousePress
void VRUIControls::VRInputModule::ProcessMousePress(::VRUIControls::MouseButtonEventData* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::ProcessMousePress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessMousePress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: VRUIControls.VRInputModule.HandlePointerExitAndEnter
void VRUIControls::VRInputModule::HandlePointerExitAndEnter(::UnityEngine::EventSystems::PointerEventData* currentPointerData, ::UnityEngine::GameObject* newEnterTarget) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::HandlePointerExitAndEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePointerExitAndEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentPointerData), ::il2cpp_utils::ExtractType(newEnterTarget)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentPointerData, newEnterTarget);
}
// Autogenerated method: VRUIControls.VRInputModule.RaycastComparer
int VRUIControls::VRInputModule::RaycastComparer(::UnityEngine::EventSystems::RaycastResult lhs, ::UnityEngine::EventSystems::RaycastResult rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::RaycastComparer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRInputModule", "RaycastComparer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: VRUIControls.VRInputModule.OnDisable
void VRUIControls::VRInputModule::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.IsPointerOverGameObject
bool VRUIControls::VRInputModule::IsPointerOverGameObject(int pointerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::IsPointerOverGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPointerOverGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointerId)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pointerId);
}
// Autogenerated method: VRUIControls.VRInputModule.ToString
::StringW VRUIControls::VRInputModule::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRInputModule.Process
void VRUIControls::VRInputModule::Process() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRInputModule::Process");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.VRLaserPointer
#include "VRUIControls/VRLaserPointer.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10CA7C0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _fadeStartNormalizedDistanceId
int VRUIControls::VRLaserPointer::_get__fadeStartNormalizedDistanceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRLaserPointer::_get__fadeStartNormalizedDistanceId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("VRUIControls", "VRLaserPointer", "_fadeStartNormalizedDistanceId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _fadeStartNormalizedDistanceId
void VRUIControls::VRLaserPointer::_set__fadeStartNormalizedDistanceId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRLaserPointer::_set__fadeStartNormalizedDistanceId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRLaserPointer", "_fadeStartNormalizedDistanceId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10CA7D0
// Autogenerated static field getter
// Get static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
::UnityEngine::MaterialPropertyBlock* VRUIControls::VRLaserPointer::_get__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRLaserPointer::_get__materialPropertyBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::MaterialPropertyBlock*>("VRUIControls", "VRLaserPointer", "_materialPropertyBlock"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
void VRUIControls::VRLaserPointer::_set__materialPropertyBlock(::UnityEngine::MaterialPropertyBlock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRLaserPointer::_set__materialPropertyBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRLaserPointer", "_materialPropertyBlock", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& VRUIControls::VRLaserPointer::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRLaserPointer::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VRUIControls.VRLaserPointer..cctor
void VRUIControls::VRLaserPointer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRLaserPointer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRLaserPointer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VRUIControls.VRLaserPointer.SetLocalPosition
void VRUIControls::VRLaserPointer::SetLocalPosition(::UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRLaserPointer::SetLocalPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: VRUIControls.VRLaserPointer.SetLocalScale
void VRUIControls::VRLaserPointer::SetLocalScale(::UnityEngine::Vector3 scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRLaserPointer::SetLocalScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scale);
}
// Autogenerated method: VRUIControls.VRLaserPointer.SetFadeDistance
void VRUIControls::VRLaserPointer::SetFadeDistance(float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRLaserPointer::SetFadeDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFadeDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, distance);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRUIControls.VRPointer
#include "VRUIControls/VRPointer.hpp"
// Including type: VRController
#include "GlobalNamespace/VRController.hpp"
// Including type: VRUIControls.VRLaserPointer
#include "VRUIControls/VRLaserPointer.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kScrollMultiplier
float VRUIControls::VRPointer::_get_kScrollMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::_get_kScrollMultiplier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("VRUIControls", "VRPointer", "kScrollMultiplier"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kScrollMultiplier
void VRUIControls::VRPointer::_set_kScrollMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::_set_kScrollMultiplier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRPointer", "kScrollMultiplier", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _lastControllerUsedWasRight
bool VRUIControls::VRPointer::_get__lastControllerUsedWasRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::_get__lastControllerUsedWasRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("VRUIControls", "VRPointer", "_lastControllerUsedWasRight"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _lastControllerUsedWasRight
void VRUIControls::VRPointer::_set__lastControllerUsedWasRight(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::_set__lastControllerUsedWasRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRPointer", "_lastControllerUsedWasRight", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _rightControllerWasReleased
bool VRUIControls::VRPointer::_get__rightControllerWasReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::_get__rightControllerWasReleased");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("VRUIControls", "VRPointer", "_rightControllerWasReleased"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _rightControllerWasReleased
void VRUIControls::VRPointer::_set__rightControllerWasReleased(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::_set__rightControllerWasReleased");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRPointer", "_rightControllerWasReleased", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _leftControllerWasReleased
bool VRUIControls::VRPointer::_get__leftControllerWasReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::_get__leftControllerWasReleased");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("VRUIControls", "VRPointer", "_leftControllerWasReleased"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _leftControllerWasReleased
void VRUIControls::VRPointer::_set__leftControllerWasReleased(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::_set__leftControllerWasReleased");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRPointer", "_leftControllerWasReleased", value));
}
// Autogenerated instance field getter
// Get instance field: private VRController _leftVRController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRController*& VRUIControls::VRPointer::dyn__leftVRController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::dyn__leftVRController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftVRController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRController _rightVRController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRController*& VRUIControls::VRPointer::dyn__rightVRController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::dyn__rightVRController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightVRController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRUIControls.VRLaserPointer _laserPointerPrefab
[[deprecated("Use field access instead!")]] ::VRUIControls::VRLaserPointer*& VRUIControls::VRPointer::dyn__laserPointerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::dyn__laserPointerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_laserPointerPrefab"))->offset;
  return *reinterpret_cast<::VRUIControls::VRLaserPointer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _cursorPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& VRUIControls::VRPointer::dyn__cursorPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::dyn__cursorPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cursorPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _defaultLaserPointerLength
[[deprecated("Use field access instead!")]] float& VRUIControls::VRPointer::dyn__defaultLaserPointerLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::dyn__defaultLaserPointerLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultLaserPointerLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _laserPointerWidth
[[deprecated("Use field access instead!")]] float& VRUIControls::VRPointer::dyn__laserPointerWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::dyn__laserPointerWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_laserPointerWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRUIControls.VRLaserPointer _laserPointer
[[deprecated("Use field access instead!")]] ::VRUIControls::VRLaserPointer*& VRUIControls::VRPointer::dyn__laserPointer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::dyn__laserPointer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_laserPointer"))->offset;
  return *reinterpret_cast<::VRUIControls::VRLaserPointer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _cursorTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& VRUIControls::VRPointer::dyn__cursorTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::dyn__cursorTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cursorTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.EventSystems.EventSystem _eventSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::EventSystem*& VRUIControls::VRPointer::dyn__eventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::dyn__eventSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eventSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::EventSystems::EventSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRController _vrController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRController*& VRUIControls::VRPointer::dyn__vrController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::dyn__vrController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_vrController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.EventSystems.PointerEventData _pointerData
[[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::PointerEventData*& VRUIControls::VRPointer::dyn__pointerData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::dyn__pointerData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pointerData"))->offset;
  return *reinterpret_cast<::UnityEngine::EventSystems::PointerEventData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VRUIControls.VRPointer.get_vrController
::GlobalNamespace::VRController* VRUIControls::VRPointer::get_vrController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::get_vrController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRController*, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.get_cursorPosition
::UnityEngine::Vector3 VRUIControls::VRPointer::get_cursorPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::get_cursorPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cursorPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.get_eventSystem
::UnityEngine::EventSystems::EventSystem* VRUIControls::VRPointer::get_eventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::get_eventSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eventSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::EventSystems::EventSystem*, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.get_state
::StringW VRUIControls::VRPointer::get_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::get_state");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer..cctor
void VRUIControls::VRPointer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VRUIControls", "VRPointer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.Awake
void VRUIControls::VRPointer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.OnEnable
void VRUIControls::VRPointer::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.OnDisable
void VRUIControls::VRPointer::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.LateUpdate
void VRUIControls::VRPointer::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.CreateLaserPointerAndLaserHit
void VRUIControls::VRPointer::CreateLaserPointerAndLaserHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::CreateLaserPointerAndLaserHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateLaserPointerAndLaserHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.RefreshLaserPointerAndLaserHit
void VRUIControls::VRPointer::RefreshLaserPointerAndLaserHit(::UnityEngine::EventSystems::PointerEventData* pointerData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::RefreshLaserPointerAndLaserHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshLaserPointerAndLaserHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointerData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointerData);
}
// Autogenerated method: VRUIControls.VRPointer.OnApplicationFocus
void VRUIControls::VRPointer::OnApplicationFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::OnApplicationFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hasFocus)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated method: VRUIControls.VRPointer.DestroyLaserAndHit
void VRUIControls::VRPointer::DestroyLaserAndHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::DestroyLaserAndHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyLaserAndHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRUIControls.VRPointer.Process
void VRUIControls::VRPointer::Process(::UnityEngine::EventSystems::PointerEventData* pointerEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VRUIControls::VRPointer::Process");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointerEventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointerEventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IGuiRenderable
#include "Zenject/IGuiRenderable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IGuiRenderable.GuiRender
void Zenject::IGuiRenderable::GuiRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::IGuiRenderable::GuiRender");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GuiRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IInitializable
#include "Zenject/IInitializable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IInitializable.Initialize
void Zenject::IInitializable::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::IInitializable::Initialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean Optional
[[deprecated("Use field access instead!")]] bool& Zenject::InjectableInfo::dyn_Optional() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectableInfo::dyn_Optional");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Optional"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Object Identifier
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Zenject::InjectableInfo::dyn_Identifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectableInfo::dyn_Identifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Identifier"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.InjectSources SourceType
[[deprecated("Use field access instead!")]] ::Zenject::InjectSources& Zenject::InjectableInfo::dyn_SourceType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectableInfo::dyn_SourceType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SourceType"))->offset;
  return *reinterpret_cast<::Zenject::InjectSources*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.String MemberName
[[deprecated("Use field access instead!")]] ::StringW& Zenject::InjectableInfo::dyn_MemberName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectableInfo::dyn_MemberName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MemberName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Type MemberType
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::InjectableInfo::dyn_MemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectableInfo::dyn_MemberType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MemberType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Object DefaultValue
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Zenject::InjectableInfo::dyn_DefaultValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectableInfo::dyn_DefaultValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DefaultValue"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.Internal.PreserveAttribute
#include "Zenject/Internal/PreserveAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectAttributeBase
#include "Zenject/InjectAttributeBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <Optional>k__BackingField
[[deprecated("Use field access instead!")]] bool& Zenject::InjectAttributeBase::dyn_$Optional$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectAttributeBase::dyn_$Optional$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Optional>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <Id>k__BackingField
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Zenject::InjectAttributeBase::dyn_$Id$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectAttributeBase::dyn_$Id$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Id>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.InjectSources <Source>k__BackingField
[[deprecated("Use field access instead!")]] ::Zenject::InjectSources& Zenject::InjectAttributeBase::dyn_$Source$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectAttributeBase::dyn_$Source$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Source>k__BackingField"))->offset;
  return *reinterpret_cast<::Zenject::InjectSources*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.InjectAttributeBase.get_Optional
bool Zenject::InjectAttributeBase::get_Optional() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectAttributeBase::get_Optional");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Optional", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectAttributeBase.set_Optional
void Zenject::InjectAttributeBase::set_Optional(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectAttributeBase::set_Optional");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Optional", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectAttributeBase.get_Id
::Il2CppObject* Zenject::InjectAttributeBase::get_Id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectAttributeBase::get_Id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectAttributeBase.set_Id
void Zenject::InjectAttributeBase::set_Id(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectAttributeBase::set_Id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectAttributeBase.get_Source
::Zenject::InjectSources Zenject::InjectAttributeBase::get_Source() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectAttributeBase::get_Source");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Source", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectSources, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectAttributeBase.set_Source
void Zenject::InjectAttributeBase::set_Source(::Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectAttributeBase::set_Source");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Source", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectAttribute
#include "Zenject/InjectAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectLocalAttribute
#include "Zenject/InjectLocalAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectOptionalAttribute
#include "Zenject/InjectOptionalAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectSources
#include "Zenject/InjectSources.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.InjectSources Any
::Zenject::InjectSources Zenject::InjectSources::_get_Any() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectSources::_get_Any");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::InjectSources>("Zenject", "InjectSources", "Any"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.InjectSources Any
void Zenject::InjectSources::_set_Any(::Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectSources::_set_Any");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectSources", "Any", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.InjectSources Local
::Zenject::InjectSources Zenject::InjectSources::_get_Local() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectSources::_get_Local");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::InjectSources>("Zenject", "InjectSources", "Local"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.InjectSources Local
void Zenject::InjectSources::_set_Local(::Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectSources::_set_Local");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectSources", "Local", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.InjectSources Parent
::Zenject::InjectSources Zenject::InjectSources::_get_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectSources::_get_Parent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::InjectSources>("Zenject", "InjectSources", "Parent"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.InjectSources Parent
void Zenject::InjectSources::_set_Parent(::Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectSources::_set_Parent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectSources", "Parent", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.InjectSources AnyParent
::Zenject::InjectSources Zenject::InjectSources::_get_AnyParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectSources::_get_AnyParent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::InjectSources>("Zenject", "InjectSources", "AnyParent"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.InjectSources AnyParent
void Zenject::InjectSources::_set_AnyParent(::Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectSources::_set_AnyParent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectSources", "AnyParent", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Zenject::InjectSources::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectSources::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ZenInjectMethod
#include "Zenject/ZenInjectMethod.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ZenInjectMethod.Invoke
void Zenject::ZenInjectMethod::Invoke(::Il2CppObject* obj, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ZenInjectMethod::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, args);
}
// Autogenerated method: Zenject.ZenInjectMethod.BeginInvoke
::System::IAsyncResult* Zenject::ZenInjectMethod::BeginInvoke(::Il2CppObject* obj, ::ArrayW<::Il2CppObject*> args, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ZenInjectMethod::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, obj, args, callback, object);
}
// Autogenerated method: Zenject.ZenInjectMethod.EndInvoke
void Zenject::ZenInjectMethod::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ZenInjectMethod::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ZenFactoryMethod
#include "Zenject/ZenFactoryMethod.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ZenFactoryMethod.Invoke
::Il2CppObject* Zenject::ZenFactoryMethod::Invoke(::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ZenFactoryMethod::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, args);
}
// Autogenerated method: Zenject.ZenFactoryMethod.BeginInvoke
::System::IAsyncResult* Zenject::ZenFactoryMethod::BeginInvoke(::ArrayW<::Il2CppObject*> args, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ZenFactoryMethod::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, args, callback, object);
}
// Autogenerated method: Zenject.ZenFactoryMethod.EndInvoke
::Il2CppObject* Zenject::ZenFactoryMethod::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ZenFactoryMethod::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ZenMemberSetterMethod
#include "Zenject/ZenMemberSetterMethod.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ZenMemberSetterMethod.Invoke
void Zenject::ZenMemberSetterMethod::Invoke(::Il2CppObject* obj, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ZenMemberSetterMethod::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, value);
}
// Autogenerated method: Zenject.ZenMemberSetterMethod.BeginInvoke
::System::IAsyncResult* Zenject::ZenMemberSetterMethod::BeginInvoke(::Il2CppObject* obj, ::Il2CppObject* value, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ZenMemberSetterMethod::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, obj, value, callback, object);
}
// Autogenerated method: Zenject.ZenMemberSetterMethod.EndInvoke
void Zenject::ZenMemberSetterMethod::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ZenMemberSetterMethod::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
// Including type: Zenject.InjectTypeInfo/Zenject.InjectMemberInfo
#include "Zenject/InjectTypeInfo_InjectMemberInfo.hpp"
// Including type: Zenject.InjectTypeInfo/Zenject.InjectConstructorInfo
#include "Zenject/InjectTypeInfo_InjectConstructorInfo.hpp"
// Including type: Zenject.InjectTypeInfo/Zenject.InjectMethodInfo
#include "Zenject/InjectTypeInfo_InjectMethodInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Func`2<Zenject.InjectTypeInfo/Zenject.InjectMemberInfo,Zenject.InjectableInfo> CS$<>9__CachedAnonymousMethodDelegate2
::System::Func_2<::Zenject::InjectTypeInfo::InjectMemberInfo*, ::Zenject::InjectableInfo*>* Zenject::InjectTypeInfo::_get_CS$$$9__CachedAnonymousMethodDelegate2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::_get_CS$$$9__CachedAnonymousMethodDelegate2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::Zenject::InjectTypeInfo::InjectMemberInfo*, ::Zenject::InjectableInfo*>*>("Zenject", "InjectTypeInfo", "CS$<>9__CachedAnonymousMethodDelegate2")));
}
// Autogenerated static field setter
// Set static field: static private System.Func`2<Zenject.InjectTypeInfo/Zenject.InjectMemberInfo,Zenject.InjectableInfo> CS$<>9__CachedAnonymousMethodDelegate2
void Zenject::InjectTypeInfo::_set_CS$$$9__CachedAnonymousMethodDelegate2(::System::Func_2<::Zenject::InjectTypeInfo::InjectMemberInfo*, ::Zenject::InjectableInfo*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::_set_CS$$$9__CachedAnonymousMethodDelegate2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectTypeInfo", "CS$<>9__CachedAnonymousMethodDelegate2", value));
}
// Autogenerated static field getter
// Get static field: static private System.Func`2<Zenject.InjectTypeInfo/Zenject.InjectMethodInfo,System.Collections.Generic.IEnumerable`1<Zenject.InjectableInfo>> CS$<>9__CachedAnonymousMethodDelegate3
::System::Func_2<::Zenject::InjectTypeInfo::InjectMethodInfo*, ::System::Collections::Generic::IEnumerable_1<::Zenject::InjectableInfo*>*>* Zenject::InjectTypeInfo::_get_CS$$$9__CachedAnonymousMethodDelegate3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::_get_CS$$$9__CachedAnonymousMethodDelegate3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::Zenject::InjectTypeInfo::InjectMethodInfo*, ::System::Collections::Generic::IEnumerable_1<::Zenject::InjectableInfo*>*>*>("Zenject", "InjectTypeInfo", "CS$<>9__CachedAnonymousMethodDelegate3")));
}
// Autogenerated static field setter
// Set static field: static private System.Func`2<Zenject.InjectTypeInfo/Zenject.InjectMethodInfo,System.Collections.Generic.IEnumerable`1<Zenject.InjectableInfo>> CS$<>9__CachedAnonymousMethodDelegate3
void Zenject::InjectTypeInfo::_set_CS$$$9__CachedAnonymousMethodDelegate3(::System::Func_2<::Zenject::InjectTypeInfo::InjectMethodInfo*, ::System::Collections::Generic::IEnumerable_1<::Zenject::InjectableInfo*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::_set_CS$$$9__CachedAnonymousMethodDelegate3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InjectTypeInfo", "CS$<>9__CachedAnonymousMethodDelegate3", value));
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Type Type
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::InjectTypeInfo::dyn_Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::dyn_Type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Type"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.InjectTypeInfo/Zenject.InjectMethodInfo[] InjectMethods
[[deprecated("Use field access instead!")]] ::ArrayW<::Zenject::InjectTypeInfo::InjectMethodInfo*>& Zenject::InjectTypeInfo::dyn_InjectMethods() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::dyn_InjectMethods");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InjectMethods"))->offset;
  return *reinterpret_cast<::ArrayW<::Zenject::InjectTypeInfo::InjectMethodInfo*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.InjectTypeInfo/Zenject.InjectMemberInfo[] InjectMembers
[[deprecated("Use field access instead!")]] ::ArrayW<::Zenject::InjectTypeInfo::InjectMemberInfo*>& Zenject::InjectTypeInfo::dyn_InjectMembers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::dyn_InjectMembers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InjectMembers"))->offset;
  return *reinterpret_cast<::ArrayW<::Zenject::InjectTypeInfo::InjectMemberInfo*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.InjectTypeInfo/Zenject.InjectConstructorInfo InjectConstructor
[[deprecated("Use field access instead!")]] ::Zenject::InjectTypeInfo::InjectConstructorInfo*& Zenject::InjectTypeInfo::dyn_InjectConstructor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::dyn_InjectConstructor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InjectConstructor"))->offset;
  return *reinterpret_cast<::Zenject::InjectTypeInfo::InjectConstructorInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.InjectTypeInfo <BaseTypeInfo>k__BackingField
[[deprecated("Use field access instead!")]] ::Zenject::InjectTypeInfo*& Zenject::InjectTypeInfo::dyn_$BaseTypeInfo$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::dyn_$BaseTypeInfo$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BaseTypeInfo>k__BackingField"))->offset;
  return *reinterpret_cast<::Zenject::InjectTypeInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.InjectTypeInfo.get_BaseTypeInfo
::Zenject::InjectTypeInfo* Zenject::InjectTypeInfo::get_BaseTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::get_BaseTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectTypeInfo.set_BaseTypeInfo
void Zenject::InjectTypeInfo::set_BaseTypeInfo(::Zenject::InjectTypeInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::set_BaseTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BaseTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectTypeInfo.get_AllInjectables
::System::Collections::Generic::IEnumerable_1<::Zenject::InjectableInfo*>* Zenject::InjectTypeInfo::get_AllInjectables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::get_AllInjectables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AllInjectables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::Zenject::InjectableInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectTypeInfo.<get_AllInjectables>b__0
::Zenject::InjectableInfo* Zenject::InjectTypeInfo::$get_AllInjectables$b__0(::Zenject::InjectTypeInfo::InjectMemberInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::<get_AllInjectables>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InjectTypeInfo", "<get_AllInjectables>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectableInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x);
}
// Autogenerated method: Zenject.InjectTypeInfo.<get_AllInjectables>b__1
::System::Collections::Generic::IEnumerable_1<::Zenject::InjectableInfo*>* Zenject::InjectTypeInfo::$get_AllInjectables$b__1(::Zenject::InjectTypeInfo::InjectMethodInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::<get_AllInjectables>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InjectTypeInfo", "<get_AllInjectables>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::Zenject::InjectableInfo*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectTypeInfo/Zenject.InjectMemberInfo
#include "Zenject/InjectTypeInfo_InjectMemberInfo.hpp"
// Including type: Zenject.ZenMemberSetterMethod
#include "Zenject/ZenMemberSetterMethod.hpp"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.ZenMemberSetterMethod Setter
[[deprecated("Use field access instead!")]] ::Zenject::ZenMemberSetterMethod*& Zenject::InjectTypeInfo::InjectMemberInfo::dyn_Setter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::InjectMemberInfo::dyn_Setter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Setter"))->offset;
  return *reinterpret_cast<::Zenject::ZenMemberSetterMethod**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.InjectableInfo Info
[[deprecated("Use field access instead!")]] ::Zenject::InjectableInfo*& Zenject::InjectTypeInfo::InjectMemberInfo::dyn_Info() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::InjectMemberInfo::dyn_Info");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Info"))->offset;
  return *reinterpret_cast<::Zenject::InjectableInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectTypeInfo/Zenject.InjectConstructorInfo
#include "Zenject/InjectTypeInfo_InjectConstructorInfo.hpp"
// Including type: Zenject.ZenFactoryMethod
#include "Zenject/ZenFactoryMethod.hpp"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.ZenFactoryMethod Factory
[[deprecated("Use field access instead!")]] ::Zenject::ZenFactoryMethod*& Zenject::InjectTypeInfo::InjectConstructorInfo::dyn_Factory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::InjectConstructorInfo::dyn_Factory");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Factory"))->offset;
  return *reinterpret_cast<::Zenject::ZenFactoryMethod**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.InjectableInfo[] Parameters
[[deprecated("Use field access instead!")]] ::ArrayW<::Zenject::InjectableInfo*>& Zenject::InjectTypeInfo::InjectConstructorInfo::dyn_Parameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::InjectConstructorInfo::dyn_Parameters");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Parameters"))->offset;
  return *reinterpret_cast<::ArrayW<::Zenject::InjectableInfo*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InjectTypeInfo/Zenject.InjectMethodInfo
#include "Zenject/InjectTypeInfo_InjectMethodInfo.hpp"
// Including type: Zenject.ZenInjectMethod
#include "Zenject/ZenInjectMethod.hpp"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.String Name
[[deprecated("Use field access instead!")]] ::StringW& Zenject::InjectTypeInfo::InjectMethodInfo::dyn_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::InjectMethodInfo::dyn_Name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.ZenInjectMethod Action
[[deprecated("Use field access instead!")]] ::Zenject::ZenInjectMethod*& Zenject::InjectTypeInfo::InjectMethodInfo::dyn_Action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::InjectMethodInfo::dyn_Action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Action"))->offset;
  return *reinterpret_cast<::Zenject::ZenInjectMethod**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly Zenject.InjectableInfo[] Parameters
[[deprecated("Use field access instead!")]] ::ArrayW<::Zenject::InjectableInfo*>& Zenject::InjectTypeInfo::InjectMethodInfo::dyn_Parameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InjectTypeInfo::InjectMethodInfo::dyn_Parameters");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Parameters"))->offset;
  return *reinterpret_cast<::ArrayW<::Zenject::InjectableInfo*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IPoolable
#include "Zenject/IPoolable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IPoolable.OnDespawned
void Zenject::IPoolable::OnDespawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::IPoolable::OnDespawned");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDespawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.IPoolable.OnSpawned
void Zenject::IPoolable::OnSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::IPoolable::OnSpawned");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ITickable
#include "Zenject/ITickable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ITickable.Tick
void Zenject::ITickable::Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ITickable::Tick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Tick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IFixedTickable
#include "Zenject/IFixedTickable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IFixedTickable.FixedTick
void Zenject::IFixedTickable::FixedTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::IFixedTickable::FixedTick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ILateTickable
#include "Zenject/ILateTickable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ILateTickable.LateTick
void Zenject::ILateTickable::LateTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ILateTickable::LateTick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ILateDisposable
#include "Zenject/ILateDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ILateDisposable.LateDispose
void Zenject::ILateDisposable::LateDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ILateDisposable::LateDispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.CanBeNullAttribute
#include "JetBrains/Annotations/CanBeNullAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.NotNullAttribute
#include "JetBrains/Annotations/NotNullAttribute_.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ItemNotNullAttribute
#include "JetBrains/Annotations/ItemNotNullAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ItemCanBeNullAttribute
#include "JetBrains/Annotations/ItemCanBeNullAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.StringFormatMethodAttribute
#include "JetBrains/Annotations/StringFormatMethodAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <FormatParameterName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::StringFormatMethodAttribute::dyn_$FormatParameterName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::StringFormatMethodAttribute::dyn_$FormatParameterName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<FormatParameterName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.StringFormatMethodAttribute.get_FormatParameterName
::StringW JetBrains::Annotations::StringFormatMethodAttribute::get_FormatParameterName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::StringFormatMethodAttribute::get_FormatParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FormatParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.StringFormatMethodAttribute.set_FormatParameterName
void JetBrains::Annotations::StringFormatMethodAttribute::set_FormatParameterName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::StringFormatMethodAttribute::set_FormatParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FormatParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ValueProviderAttribute
#include "JetBrains/Annotations/ValueProviderAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Name>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::ValueProviderAttribute::dyn_$Name$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ValueProviderAttribute::dyn_$Name$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.ValueProviderAttribute.get_Name
::StringW JetBrains::Annotations::ValueProviderAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ValueProviderAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.ValueProviderAttribute.set_Name
void JetBrains::Annotations::ValueProviderAttribute::set_Name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ValueProviderAttribute::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.InvokerParameterNameAttribute
#include "JetBrains/Annotations/InvokerParameterNameAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute
#include "JetBrains/Annotations/NotifyPropertyChangedInvocatorAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <ParameterName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::dyn_$ParameterName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::dyn_$ParameterName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ParameterName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute.get_ParameterName
::StringW JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::get_ParameterName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::get_ParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute.set_ParameterName
void JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::set_ParameterName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::set_ParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ContractAnnotationAttribute
#include "JetBrains/Annotations/ContractAnnotationAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Contract>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::ContractAnnotationAttribute::dyn_$Contract$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ContractAnnotationAttribute::dyn_$Contract$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Contract>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ForceFullStates>k__BackingField
[[deprecated("Use field access instead!")]] bool& JetBrains::Annotations::ContractAnnotationAttribute::dyn_$ForceFullStates$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ContractAnnotationAttribute::dyn_$ForceFullStates$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ForceFullStates>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.ContractAnnotationAttribute.get_Contract
::StringW JetBrains::Annotations::ContractAnnotationAttribute::get_Contract() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ContractAnnotationAttribute::get_Contract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Contract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.ContractAnnotationAttribute.set_Contract
void JetBrains::Annotations::ContractAnnotationAttribute::set_Contract(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ContractAnnotationAttribute::set_Contract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Contract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.ContractAnnotationAttribute.get_ForceFullStates
bool JetBrains::Annotations::ContractAnnotationAttribute::get_ForceFullStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ContractAnnotationAttribute::get_ForceFullStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ForceFullStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.ContractAnnotationAttribute.set_ForceFullStates
void JetBrains::Annotations::ContractAnnotationAttribute::set_ForceFullStates(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ContractAnnotationAttribute::set_ForceFullStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ForceFullStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.LocalizationRequiredAttribute
#include "JetBrains/Annotations/LocalizationRequiredAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <Required>k__BackingField
[[deprecated("Use field access instead!")]] bool& JetBrains::Annotations::LocalizationRequiredAttribute::dyn_$Required$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::LocalizationRequiredAttribute::dyn_$Required$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Required>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.LocalizationRequiredAttribute.get_Required
bool JetBrains::Annotations::LocalizationRequiredAttribute::get_Required() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::LocalizationRequiredAttribute::get_Required");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Required", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.LocalizationRequiredAttribute.set_Required
void JetBrains::Annotations::LocalizationRequiredAttribute::set_Required(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::LocalizationRequiredAttribute::set_Required");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Required", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.CannotApplyEqualityOperatorAttribute
#include "JetBrains/Annotations/CannotApplyEqualityOperatorAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.BaseTypeRequiredAttribute
#include "JetBrains/Annotations/BaseTypeRequiredAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Type <BaseType>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Type*& JetBrains::Annotations::BaseTypeRequiredAttribute::dyn_$BaseType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::BaseTypeRequiredAttribute::dyn_$BaseType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BaseType>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.BaseTypeRequiredAttribute.get_BaseType
::System::Type* JetBrains::Annotations::BaseTypeRequiredAttribute::get_BaseType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::BaseTypeRequiredAttribute::get_BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.BaseTypeRequiredAttribute.set_BaseType
void JetBrains::Annotations::BaseTypeRequiredAttribute::set_BaseType(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::BaseTypeRequiredAttribute::set_BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.UsedImplicitlyAttribute
#include "JetBrains/Annotations/UsedImplicitlyAttribute_.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private JetBrains.Annotations.ImplicitUseKindFlags <UseKindFlags>k__BackingField
[[deprecated("Use field access instead!")]] ::JetBrains::Annotations::ImplicitUseKindFlags_& JetBrains::Annotations::UsedImplicitlyAttribute_::dyn_$UseKindFlags$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::UsedImplicitlyAttribute_::dyn_$UseKindFlags$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UseKindFlags>k__BackingField"))->offset;
  return *reinterpret_cast<::JetBrains::Annotations::ImplicitUseKindFlags_*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private JetBrains.Annotations.ImplicitUseTargetFlags <TargetFlags>k__BackingField
[[deprecated("Use field access instead!")]] ::JetBrains::Annotations::ImplicitUseTargetFlags_& JetBrains::Annotations::UsedImplicitlyAttribute_::dyn_$TargetFlags$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::UsedImplicitlyAttribute_::dyn_$TargetFlags$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TargetFlags>k__BackingField"))->offset;
  return *reinterpret_cast<::JetBrains::Annotations::ImplicitUseTargetFlags_*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.UsedImplicitlyAttribute.get_UseKindFlags
::JetBrains::Annotations::ImplicitUseKindFlags_ JetBrains::Annotations::UsedImplicitlyAttribute_::get_UseKindFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::UsedImplicitlyAttribute_::get_UseKindFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UseKindFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::JetBrains::Annotations::ImplicitUseKindFlags_, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.UsedImplicitlyAttribute.set_UseKindFlags
void JetBrains::Annotations::UsedImplicitlyAttribute_::set_UseKindFlags(::JetBrains::Annotations::ImplicitUseKindFlags_ value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::UsedImplicitlyAttribute_::set_UseKindFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UseKindFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.UsedImplicitlyAttribute.get_TargetFlags
::JetBrains::Annotations::ImplicitUseTargetFlags_ JetBrains::Annotations::UsedImplicitlyAttribute_::get_TargetFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::UsedImplicitlyAttribute_::get_TargetFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TargetFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::JetBrains::Annotations::ImplicitUseTargetFlags_, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.UsedImplicitlyAttribute.set_TargetFlags
void JetBrains::Annotations::UsedImplicitlyAttribute_::set_TargetFlags(::JetBrains::Annotations::ImplicitUseTargetFlags_ value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::UsedImplicitlyAttribute_::set_TargetFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TargetFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.MeansImplicitUseAttribute
#include "JetBrains/Annotations/MeansImplicitUseAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private JetBrains.Annotations.ImplicitUseKindFlags <UseKindFlags>k__BackingField
[[deprecated("Use field access instead!")]] ::JetBrains::Annotations::ImplicitUseKindFlags_& JetBrains::Annotations::MeansImplicitUseAttribute::dyn_$UseKindFlags$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MeansImplicitUseAttribute::dyn_$UseKindFlags$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UseKindFlags>k__BackingField"))->offset;
  return *reinterpret_cast<::JetBrains::Annotations::ImplicitUseKindFlags_*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private JetBrains.Annotations.ImplicitUseTargetFlags <TargetFlags>k__BackingField
[[deprecated("Use field access instead!")]] ::JetBrains::Annotations::ImplicitUseTargetFlags_& JetBrains::Annotations::MeansImplicitUseAttribute::dyn_$TargetFlags$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MeansImplicitUseAttribute::dyn_$TargetFlags$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TargetFlags>k__BackingField"))->offset;
  return *reinterpret_cast<::JetBrains::Annotations::ImplicitUseTargetFlags_*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.MeansImplicitUseAttribute.get_UseKindFlags
::JetBrains::Annotations::ImplicitUseKindFlags_ JetBrains::Annotations::MeansImplicitUseAttribute::get_UseKindFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MeansImplicitUseAttribute::get_UseKindFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UseKindFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::JetBrains::Annotations::ImplicitUseKindFlags_, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MeansImplicitUseAttribute.set_UseKindFlags
void JetBrains::Annotations::MeansImplicitUseAttribute::set_UseKindFlags(::JetBrains::Annotations::ImplicitUseKindFlags_ value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MeansImplicitUseAttribute::set_UseKindFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UseKindFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.MeansImplicitUseAttribute.get_TargetFlags
::JetBrains::Annotations::ImplicitUseTargetFlags_ JetBrains::Annotations::MeansImplicitUseAttribute::get_TargetFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MeansImplicitUseAttribute::get_TargetFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TargetFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::JetBrains::Annotations::ImplicitUseTargetFlags_, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MeansImplicitUseAttribute.set_TargetFlags
void JetBrains::Annotations::MeansImplicitUseAttribute::set_TargetFlags(::JetBrains::Annotations::ImplicitUseTargetFlags_ value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MeansImplicitUseAttribute::set_TargetFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TargetFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ImplicitUseKindFlags
#include "JetBrains/Annotations/ImplicitUseKindFlags_.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseKindFlags Default
::JetBrains::Annotations::ImplicitUseKindFlags_ JetBrains::Annotations::ImplicitUseKindFlags_::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseKindFlags_::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::ImplicitUseKindFlags_>("JetBrains.Annotations", "ImplicitUseKindFlags", "Default"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseKindFlags Default
void JetBrains::Annotations::ImplicitUseKindFlags_::_set_Default(::JetBrains::Annotations::ImplicitUseKindFlags_ value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseKindFlags_::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseKindFlags", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseKindFlags Access
::JetBrains::Annotations::ImplicitUseKindFlags_ JetBrains::Annotations::ImplicitUseKindFlags_::_get_Access() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseKindFlags_::_get_Access");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::ImplicitUseKindFlags_>("JetBrains.Annotations", "ImplicitUseKindFlags", "Access"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseKindFlags Access
void JetBrains::Annotations::ImplicitUseKindFlags_::_set_Access(::JetBrains::Annotations::ImplicitUseKindFlags_ value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseKindFlags_::_set_Access");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseKindFlags", "Access", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseKindFlags Assign
::JetBrains::Annotations::ImplicitUseKindFlags_ JetBrains::Annotations::ImplicitUseKindFlags_::_get_Assign() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseKindFlags_::_get_Assign");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::ImplicitUseKindFlags_>("JetBrains.Annotations", "ImplicitUseKindFlags", "Assign"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseKindFlags Assign
void JetBrains::Annotations::ImplicitUseKindFlags_::_set_Assign(::JetBrains::Annotations::ImplicitUseKindFlags_ value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseKindFlags_::_set_Assign");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseKindFlags", "Assign", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature
::JetBrains::Annotations::ImplicitUseKindFlags_ JetBrains::Annotations::ImplicitUseKindFlags_::_get_InstantiatedWithFixedConstructorSignature() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseKindFlags_::_get_InstantiatedWithFixedConstructorSignature");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::ImplicitUseKindFlags_>("JetBrains.Annotations", "ImplicitUseKindFlags", "InstantiatedWithFixedConstructorSignature"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature
void JetBrains::Annotations::ImplicitUseKindFlags_::_set_InstantiatedWithFixedConstructorSignature(::JetBrains::Annotations::ImplicitUseKindFlags_ value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseKindFlags_::_set_InstantiatedWithFixedConstructorSignature");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseKindFlags", "InstantiatedWithFixedConstructorSignature", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature
::JetBrains::Annotations::ImplicitUseKindFlags_ JetBrains::Annotations::ImplicitUseKindFlags_::_get_InstantiatedNoFixedConstructorSignature() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseKindFlags_::_get_InstantiatedNoFixedConstructorSignature");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::ImplicitUseKindFlags_>("JetBrains.Annotations", "ImplicitUseKindFlags", "InstantiatedNoFixedConstructorSignature"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature
void JetBrains::Annotations::ImplicitUseKindFlags_::_set_InstantiatedNoFixedConstructorSignature(::JetBrains::Annotations::ImplicitUseKindFlags_ value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseKindFlags_::_set_InstantiatedNoFixedConstructorSignature");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseKindFlags", "InstantiatedNoFixedConstructorSignature", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& JetBrains::Annotations::ImplicitUseKindFlags_::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseKindFlags_::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ImplicitUseTargetFlags
#include "JetBrains/Annotations/ImplicitUseTargetFlags_.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseTargetFlags Default
::JetBrains::Annotations::ImplicitUseTargetFlags_ JetBrains::Annotations::ImplicitUseTargetFlags_::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseTargetFlags_::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::ImplicitUseTargetFlags_>("JetBrains.Annotations", "ImplicitUseTargetFlags", "Default"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseTargetFlags Default
void JetBrains::Annotations::ImplicitUseTargetFlags_::_set_Default(::JetBrains::Annotations::ImplicitUseTargetFlags_ value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseTargetFlags_::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseTargetFlags", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseTargetFlags Itself
::JetBrains::Annotations::ImplicitUseTargetFlags_ JetBrains::Annotations::ImplicitUseTargetFlags_::_get_Itself() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseTargetFlags_::_get_Itself");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::ImplicitUseTargetFlags_>("JetBrains.Annotations", "ImplicitUseTargetFlags", "Itself"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseTargetFlags Itself
void JetBrains::Annotations::ImplicitUseTargetFlags_::_set_Itself(::JetBrains::Annotations::ImplicitUseTargetFlags_ value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseTargetFlags_::_set_Itself");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseTargetFlags", "Itself", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseTargetFlags Members
::JetBrains::Annotations::ImplicitUseTargetFlags_ JetBrains::Annotations::ImplicitUseTargetFlags_::_get_Members() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseTargetFlags_::_get_Members");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::ImplicitUseTargetFlags_>("JetBrains.Annotations", "ImplicitUseTargetFlags", "Members"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseTargetFlags Members
void JetBrains::Annotations::ImplicitUseTargetFlags_::_set_Members(::JetBrains::Annotations::ImplicitUseTargetFlags_ value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseTargetFlags_::_set_Members");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseTargetFlags", "Members", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseTargetFlags WithMembers
::JetBrains::Annotations::ImplicitUseTargetFlags_ JetBrains::Annotations::ImplicitUseTargetFlags_::_get_WithMembers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseTargetFlags_::_get_WithMembers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::ImplicitUseTargetFlags_>("JetBrains.Annotations", "ImplicitUseTargetFlags", "WithMembers"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseTargetFlags WithMembers
void JetBrains::Annotations::ImplicitUseTargetFlags_::_set_WithMembers(::JetBrains::Annotations::ImplicitUseTargetFlags_ value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseTargetFlags_::_set_WithMembers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseTargetFlags", "WithMembers", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& JetBrains::Annotations::ImplicitUseTargetFlags_::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::ImplicitUseTargetFlags_::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.PublicAPIAttribute
#include "JetBrains/Annotations/PublicAPIAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Comment>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::PublicAPIAttribute::dyn_$Comment$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::PublicAPIAttribute::dyn_$Comment$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Comment>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.PublicAPIAttribute.get_Comment
::StringW JetBrains::Annotations::PublicAPIAttribute::get_Comment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::PublicAPIAttribute::get_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.PublicAPIAttribute.set_Comment
void JetBrains::Annotations::PublicAPIAttribute::set_Comment(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::PublicAPIAttribute::set_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.InstantHandleAttribute
#include "JetBrains/Annotations/InstantHandleAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.PureAttribute
#include "JetBrains/Annotations/PureAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.MustUseReturnValueAttribute
#include "JetBrains/Annotations/MustUseReturnValueAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Justification>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::MustUseReturnValueAttribute::dyn_$Justification$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MustUseReturnValueAttribute::dyn_$Justification$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Justification>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.MustUseReturnValueAttribute.get_Justification
::StringW JetBrains::Annotations::MustUseReturnValueAttribute::get_Justification() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MustUseReturnValueAttribute::get_Justification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Justification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MustUseReturnValueAttribute.set_Justification
void JetBrains::Annotations::MustUseReturnValueAttribute::set_Justification(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MustUseReturnValueAttribute::set_Justification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Justification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ProvidesContextAttribute
#include "JetBrains/Annotations/ProvidesContextAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.PathReferenceAttribute
#include "JetBrains/Annotations/PathReferenceAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <BasePath>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::PathReferenceAttribute::dyn_$BasePath$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::PathReferenceAttribute::dyn_$BasePath$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BasePath>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.PathReferenceAttribute.get_BasePath
::StringW JetBrains::Annotations::PathReferenceAttribute::get_BasePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::PathReferenceAttribute::get_BasePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BasePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.PathReferenceAttribute.set_BasePath
void JetBrains::Annotations::PathReferenceAttribute::set_BasePath(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::PathReferenceAttribute::set_BasePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BasePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.SourceTemplateAttribute
#include "JetBrains/Annotations/SourceTemplateAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.MacroAttribute
#include "JetBrains/Annotations/MacroAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Expression>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::MacroAttribute::dyn_$Expression$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::dyn_$Expression$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Expression>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <Editable>k__BackingField
[[deprecated("Use field access instead!")]] int& JetBrains::Annotations::MacroAttribute::dyn_$Editable$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::dyn_$Editable$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Editable>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <Target>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::MacroAttribute::dyn_$Target$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::dyn_$Target$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Target>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.get_Expression
::StringW JetBrains::Annotations::MacroAttribute::get_Expression() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::get_Expression");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Expression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.set_Expression
void JetBrains::Annotations::MacroAttribute::set_Expression(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::set_Expression");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Expression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.get_Editable
int JetBrains::Annotations::MacroAttribute::get_Editable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::get_Editable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Editable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.set_Editable
void JetBrains::Annotations::MacroAttribute::set_Editable(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::set_Editable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Editable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.get_Target
::StringW JetBrains::Annotations::MacroAttribute::get_Target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::get_Target");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Target", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.set_Target
void JetBrains::Annotations::MacroAttribute::set_Target(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::set_Target");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Target", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcAreaMasterLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcAreaPartialViewLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcAreaViewLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcMasterLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcMasterLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcMasterLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcMasterLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcPartialViewLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcViewLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcViewLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcViewLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcViewLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcViewLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcViewLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcViewLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcViewLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcViewLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcViewLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcActionAttribute
#include "JetBrains/Annotations/AspMvcActionAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <AnonymousProperty>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcActionAttribute::dyn_$AnonymousProperty$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcActionAttribute::dyn_$AnonymousProperty$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AnonymousProperty>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcActionAttribute.get_AnonymousProperty
::StringW JetBrains::Annotations::AspMvcActionAttribute::get_AnonymousProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcActionAttribute::get_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcActionAttribute.set_AnonymousProperty
void JetBrains::Annotations::AspMvcActionAttribute::set_AnonymousProperty(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcActionAttribute::set_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcAreaAttribute
#include "JetBrains/Annotations/AspMvcAreaAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <AnonymousProperty>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcAreaAttribute::dyn_$AnonymousProperty$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaAttribute::dyn_$AnonymousProperty$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AnonymousProperty>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaAttribute.get_AnonymousProperty
::StringW JetBrains::Annotations::AspMvcAreaAttribute::get_AnonymousProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaAttribute::get_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaAttribute.set_AnonymousProperty
void JetBrains::Annotations::AspMvcAreaAttribute::set_AnonymousProperty(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaAttribute::set_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcControllerAttribute
#include "JetBrains/Annotations/AspMvcControllerAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <AnonymousProperty>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcControllerAttribute::dyn_$AnonymousProperty$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcControllerAttribute::dyn_$AnonymousProperty$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AnonymousProperty>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcControllerAttribute.get_AnonymousProperty
::StringW JetBrains::Annotations::AspMvcControllerAttribute::get_AnonymousProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcControllerAttribute::get_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcControllerAttribute.set_AnonymousProperty
void JetBrains::Annotations::AspMvcControllerAttribute::set_AnonymousProperty(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcControllerAttribute::set_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcMasterAttribute
#include "JetBrains/Annotations/AspMvcMasterAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcModelTypeAttribute
#include "JetBrains/Annotations/AspMvcModelTypeAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcPartialViewAttribute
#include "JetBrains/Annotations/AspMvcPartialViewAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcSuppressViewErrorAttribute
#include "JetBrains/Annotations/AspMvcSuppressViewErrorAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcDisplayTemplateAttribute
#include "JetBrains/Annotations/AspMvcDisplayTemplateAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcEditorTemplateAttribute
#include "JetBrains/Annotations/AspMvcEditorTemplateAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcTemplateAttribute
#include "JetBrains/Annotations/AspMvcTemplateAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcViewAttribute
#include "JetBrains/Annotations/AspMvcViewAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcViewComponentAttribute
#include "JetBrains/Annotations/AspMvcViewComponentAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcViewComponentViewAttribute
#include "JetBrains/Annotations/AspMvcViewComponentViewAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcActionSelectorAttribute
#include "JetBrains/Annotations/AspMvcActionSelectorAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.HtmlElementAttributesAttribute
#include "JetBrains/Annotations/HtmlElementAttributesAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Name>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::HtmlElementAttributesAttribute::dyn_$Name$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::HtmlElementAttributesAttribute::dyn_$Name$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.HtmlElementAttributesAttribute.get_Name
::StringW JetBrains::Annotations::HtmlElementAttributesAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::HtmlElementAttributesAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.HtmlElementAttributesAttribute.set_Name
void JetBrains::Annotations::HtmlElementAttributesAttribute::set_Name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::HtmlElementAttributesAttribute::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.HtmlAttributeValueAttribute
#include "JetBrains/Annotations/HtmlAttributeValueAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Name>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::HtmlAttributeValueAttribute::dyn_$Name$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::HtmlAttributeValueAttribute::dyn_$Name$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.HtmlAttributeValueAttribute.get_Name
::StringW JetBrains::Annotations::HtmlAttributeValueAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::HtmlAttributeValueAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.HtmlAttributeValueAttribute.set_Name
void JetBrains::Annotations::HtmlAttributeValueAttribute::set_Name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::HtmlAttributeValueAttribute::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorSectionAttribute
#include "JetBrains/Annotations/RazorSectionAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.CollectionAccessAttribute
#include "JetBrains/Annotations/CollectionAccessAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private JetBrains.Annotations.CollectionAccessType <CollectionAccessType>k__BackingField
[[deprecated("Use field access instead!")]] ::JetBrains::Annotations::CollectionAccessType& JetBrains::Annotations::CollectionAccessAttribute::dyn_$CollectionAccessType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessAttribute::dyn_$CollectionAccessType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CollectionAccessType>k__BackingField"))->offset;
  return *reinterpret_cast<::JetBrains::Annotations::CollectionAccessType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.CollectionAccessAttribute.get_CollectionAccessType
::JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessAttribute::get_CollectionAccessType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessAttribute::get_CollectionAccessType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CollectionAccessType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::JetBrains::Annotations::CollectionAccessType, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.CollectionAccessAttribute.set_CollectionAccessType
void JetBrains::Annotations::CollectionAccessAttribute::set_CollectionAccessType(::JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessAttribute::set_CollectionAccessType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CollectionAccessType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.CollectionAccessType
#include "JetBrains/Annotations/CollectionAccessType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.CollectionAccessType None
::JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::CollectionAccessType>("JetBrains.Annotations", "CollectionAccessType", "None"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.CollectionAccessType None
void JetBrains::Annotations::CollectionAccessType::_set_None(::JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "CollectionAccessType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.CollectionAccessType Read
::JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessType::_get_Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::_get_Read");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::CollectionAccessType>("JetBrains.Annotations", "CollectionAccessType", "Read"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.CollectionAccessType Read
void JetBrains::Annotations::CollectionAccessType::_set_Read(::JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::_set_Read");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "CollectionAccessType", "Read", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.CollectionAccessType ModifyExistingContent
::JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessType::_get_ModifyExistingContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::_get_ModifyExistingContent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::CollectionAccessType>("JetBrains.Annotations", "CollectionAccessType", "ModifyExistingContent"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.CollectionAccessType ModifyExistingContent
void JetBrains::Annotations::CollectionAccessType::_set_ModifyExistingContent(::JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::_set_ModifyExistingContent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "CollectionAccessType", "ModifyExistingContent", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.CollectionAccessType UpdatedContent
::JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessType::_get_UpdatedContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::_get_UpdatedContent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::CollectionAccessType>("JetBrains.Annotations", "CollectionAccessType", "UpdatedContent"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.CollectionAccessType UpdatedContent
void JetBrains::Annotations::CollectionAccessType::_set_UpdatedContent(::JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::_set_UpdatedContent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "CollectionAccessType", "UpdatedContent", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& JetBrains::Annotations::CollectionAccessType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AssertionMethodAttribute
#include "JetBrains/Annotations/AssertionMethodAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AssertionConditionAttribute
#include "JetBrains/Annotations/AssertionConditionAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private JetBrains.Annotations.AssertionConditionType <ConditionType>k__BackingField
[[deprecated("Use field access instead!")]] ::JetBrains::Annotations::AssertionConditionType& JetBrains::Annotations::AssertionConditionAttribute::dyn_$ConditionType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionAttribute::dyn_$ConditionType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ConditionType>k__BackingField"))->offset;
  return *reinterpret_cast<::JetBrains::Annotations::AssertionConditionType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AssertionConditionAttribute.get_ConditionType
::JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionAttribute::get_ConditionType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionAttribute::get_ConditionType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConditionType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::JetBrains::Annotations::AssertionConditionType, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AssertionConditionAttribute.set_ConditionType
void JetBrains::Annotations::AssertionConditionAttribute::set_ConditionType(::JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionAttribute::set_ConditionType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ConditionType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AssertionConditionType
#include "JetBrains/Annotations/AssertionConditionType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.AssertionConditionType IS_TRUE
::JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionType::_get_IS_TRUE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::_get_IS_TRUE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::AssertionConditionType>("JetBrains.Annotations", "AssertionConditionType", "IS_TRUE"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.AssertionConditionType IS_TRUE
void JetBrains::Annotations::AssertionConditionType::_set_IS_TRUE(::JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::_set_IS_TRUE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "AssertionConditionType", "IS_TRUE", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.AssertionConditionType IS_FALSE
::JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionType::_get_IS_FALSE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::_get_IS_FALSE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::AssertionConditionType>("JetBrains.Annotations", "AssertionConditionType", "IS_FALSE"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.AssertionConditionType IS_FALSE
void JetBrains::Annotations::AssertionConditionType::_set_IS_FALSE(::JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::_set_IS_FALSE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "AssertionConditionType", "IS_FALSE", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.AssertionConditionType IS_NULL
::JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionType::_get_IS_NULL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::_get_IS_NULL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::AssertionConditionType>("JetBrains.Annotations", "AssertionConditionType", "IS_NULL"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.AssertionConditionType IS_NULL
void JetBrains::Annotations::AssertionConditionType::_set_IS_NULL(::JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::_set_IS_NULL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "AssertionConditionType", "IS_NULL", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.AssertionConditionType IS_NOT_NULL
::JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionType::_get_IS_NOT_NULL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::_get_IS_NOT_NULL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::AssertionConditionType>("JetBrains.Annotations", "AssertionConditionType", "IS_NOT_NULL"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.AssertionConditionType IS_NOT_NULL
void JetBrains::Annotations::AssertionConditionType::_set_IS_NOT_NULL(::JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::_set_IS_NOT_NULL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "AssertionConditionType", "IS_NOT_NULL", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& JetBrains::Annotations::AssertionConditionType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.TerminatesProgramAttribute
#include "JetBrains/Annotations/TerminatesProgramAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.LinqTunnelAttribute
#include "JetBrains/Annotations/LinqTunnelAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.NoEnumerationAttribute
#include "JetBrains/Annotations/NoEnumerationAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RegexPatternAttribute
#include "JetBrains/Annotations/RegexPatternAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.NoReorderAttribute
#include "JetBrains/Annotations/NoReorderAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.XamlItemsControlAttribute
#include "JetBrains/Annotations/XamlItemsControlAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute
#include "JetBrains/Annotations/XamlItemBindingOfItemsControlAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspChildControlTypeAttribute
#include "JetBrains/Annotations/AspChildControlTypeAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <TagName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspChildControlTypeAttribute::dyn_$TagName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspChildControlTypeAttribute::dyn_$TagName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TagName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Type <ControlType>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Type*& JetBrains::Annotations::AspChildControlTypeAttribute::dyn_$ControlType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspChildControlTypeAttribute::dyn_$ControlType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ControlType>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspChildControlTypeAttribute.get_TagName
::StringW JetBrains::Annotations::AspChildControlTypeAttribute::get_TagName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspChildControlTypeAttribute::get_TagName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TagName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspChildControlTypeAttribute.set_TagName
void JetBrains::Annotations::AspChildControlTypeAttribute::set_TagName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspChildControlTypeAttribute::set_TagName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TagName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.AspChildControlTypeAttribute.get_ControlType
::System::Type* JetBrains::Annotations::AspChildControlTypeAttribute::get_ControlType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspChildControlTypeAttribute::get_ControlType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ControlType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspChildControlTypeAttribute.set_ControlType
void JetBrains::Annotations::AspChildControlTypeAttribute::set_ControlType(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspChildControlTypeAttribute::set_ControlType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ControlType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspDataFieldAttribute
#include "JetBrains/Annotations/AspDataFieldAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspDataFieldsAttribute
#include "JetBrains/Annotations/AspDataFieldsAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMethodPropertyAttribute
#include "JetBrains/Annotations/AspMethodPropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
