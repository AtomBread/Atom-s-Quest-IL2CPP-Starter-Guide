// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBone/UpdateMode
#include "GlobalNamespace/DynamicBone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DynamicBone/UpdateMode Normal
::GlobalNamespace::DynamicBone::UpdateMode GlobalNamespace::DynamicBone::UpdateMode::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::UpdateMode::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DynamicBone::UpdateMode>("", "DynamicBone/UpdateMode", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBone/UpdateMode Normal
void GlobalNamespace::DynamicBone::UpdateMode::_set_Normal(::GlobalNamespace::DynamicBone::UpdateMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::UpdateMode::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBone/UpdateMode", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public DynamicBone/UpdateMode AnimatePhysics
::GlobalNamespace::DynamicBone::UpdateMode GlobalNamespace::DynamicBone::UpdateMode::_get_AnimatePhysics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::UpdateMode::_get_AnimatePhysics");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DynamicBone::UpdateMode>("", "DynamicBone/UpdateMode", "AnimatePhysics"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBone/UpdateMode AnimatePhysics
void GlobalNamespace::DynamicBone::UpdateMode::_set_AnimatePhysics(::GlobalNamespace::DynamicBone::UpdateMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::UpdateMode::_set_AnimatePhysics");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBone/UpdateMode", "AnimatePhysics", value));
}
// Autogenerated static field getter
// Get static field: static public DynamicBone/UpdateMode UnscaledTime
::GlobalNamespace::DynamicBone::UpdateMode GlobalNamespace::DynamicBone::UpdateMode::_get_UnscaledTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::UpdateMode::_get_UnscaledTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DynamicBone::UpdateMode>("", "DynamicBone/UpdateMode", "UnscaledTime"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBone/UpdateMode UnscaledTime
void GlobalNamespace::DynamicBone::UpdateMode::_set_UnscaledTime(::GlobalNamespace::DynamicBone::UpdateMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::UpdateMode::_set_UnscaledTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBone/UpdateMode", "UnscaledTime", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DynamicBone::UpdateMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::UpdateMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBone/FreezeAxis
#include "GlobalNamespace/DynamicBone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DynamicBone/FreezeAxis None
::GlobalNamespace::DynamicBone::FreezeAxis GlobalNamespace::DynamicBone::FreezeAxis::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::FreezeAxis::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DynamicBone::FreezeAxis>("", "DynamicBone/FreezeAxis", "None"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBone/FreezeAxis None
void GlobalNamespace::DynamicBone::FreezeAxis::_set_None(::GlobalNamespace::DynamicBone::FreezeAxis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::FreezeAxis::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBone/FreezeAxis", "None", value));
}
// Autogenerated static field getter
// Get static field: static public DynamicBone/FreezeAxis X
::GlobalNamespace::DynamicBone::FreezeAxis GlobalNamespace::DynamicBone::FreezeAxis::_get_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::FreezeAxis::_get_X");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DynamicBone::FreezeAxis>("", "DynamicBone/FreezeAxis", "X"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBone/FreezeAxis X
void GlobalNamespace::DynamicBone::FreezeAxis::_set_X(::GlobalNamespace::DynamicBone::FreezeAxis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::FreezeAxis::_set_X");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBone/FreezeAxis", "X", value));
}
// Autogenerated static field getter
// Get static field: static public DynamicBone/FreezeAxis Y
::GlobalNamespace::DynamicBone::FreezeAxis GlobalNamespace::DynamicBone::FreezeAxis::_get_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::FreezeAxis::_get_Y");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DynamicBone::FreezeAxis>("", "DynamicBone/FreezeAxis", "Y"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBone/FreezeAxis Y
void GlobalNamespace::DynamicBone::FreezeAxis::_set_Y(::GlobalNamespace::DynamicBone::FreezeAxis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::FreezeAxis::_set_Y");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBone/FreezeAxis", "Y", value));
}
// Autogenerated static field getter
// Get static field: static public DynamicBone/FreezeAxis Z
::GlobalNamespace::DynamicBone::FreezeAxis GlobalNamespace::DynamicBone::FreezeAxis::_get_Z() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::FreezeAxis::_get_Z");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DynamicBone::FreezeAxis>("", "DynamicBone/FreezeAxis", "Z"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBone/FreezeAxis Z
void GlobalNamespace::DynamicBone::FreezeAxis::_set_Z(::GlobalNamespace::DynamicBone::FreezeAxis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::FreezeAxis::_set_Z");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBone/FreezeAxis", "Z", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DynamicBone::FreezeAxis::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::FreezeAxis::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBone/Particle
#include "GlobalNamespace/DynamicBone_Particle.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform m_Transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::DynamicBone::Particle::dyn_m_Transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::Particle::dyn_m_Transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_ParentIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DynamicBone::Particle::dyn_m_ParentIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::Particle::dyn_m_ParentIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ParentIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Damping
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DynamicBone::Particle::dyn_m_Damping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::Particle::dyn_m_Damping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Damping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Elasticity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DynamicBone::Particle::dyn_m_Elasticity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::Particle::dyn_m_Elasticity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Elasticity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Stiffness
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DynamicBone::Particle::dyn_m_Stiffness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::Particle::dyn_m_Stiffness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Stiffness"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Inert
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DynamicBone::Particle::dyn_m_Inert() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::Particle::dyn_m_Inert");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Inert"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Radius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DynamicBone::Particle::dyn_m_Radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::Particle::dyn_m_Radius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Radius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_BoneLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DynamicBone::Particle::dyn_m_BoneLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::Particle::dyn_m_BoneLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BoneLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_Position
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::DynamicBone::Particle::dyn_m_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::Particle::dyn_m_Position");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Position"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_PrevPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::DynamicBone::Particle::dyn_m_PrevPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::Particle::dyn_m_PrevPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PrevPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_EndOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::DynamicBone::Particle::dyn_m_EndOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::Particle::dyn_m_EndOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_EndOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_InitLocalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::DynamicBone::Particle::dyn_m_InitLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::Particle::dyn_m_InitLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InitLocalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion m_InitLocalRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::DynamicBone::Particle::dyn_m_InitLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBone::Particle::dyn_m_InitLocalRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InitLocalRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBoneCollider
#include "GlobalNamespace/DynamicBoneCollider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single m_Radius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DynamicBoneCollider::dyn_m_Radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneCollider::dyn_m_Radius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Radius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Height
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DynamicBoneCollider::dyn_m_Height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneCollider::dyn_m_Height");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Height"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DynamicBoneCollider.OnValidate
void GlobalNamespace::DynamicBoneCollider::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneCollider::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBoneCollider.OutsideSphere
void GlobalNamespace::DynamicBoneCollider::OutsideSphere(ByRef<::UnityEngine::Vector3> particlePosition, float particleRadius, ::UnityEngine::Vector3 sphereCenter, float sphereRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneCollider::OutsideSphere");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DynamicBoneCollider", "OutsideSphere", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(particlePosition), ::il2cpp_utils::ExtractType(particleRadius), ::il2cpp_utils::ExtractType(sphereCenter), ::il2cpp_utils::ExtractType(sphereRadius)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(particlePosition), particleRadius, sphereCenter, sphereRadius);
}
// Autogenerated method: DynamicBoneCollider.InsideSphere
void GlobalNamespace::DynamicBoneCollider::InsideSphere(ByRef<::UnityEngine::Vector3> particlePosition, float particleRadius, ::UnityEngine::Vector3 sphereCenter, float sphereRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneCollider::InsideSphere");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DynamicBoneCollider", "InsideSphere", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(particlePosition), ::il2cpp_utils::ExtractType(particleRadius), ::il2cpp_utils::ExtractType(sphereCenter), ::il2cpp_utils::ExtractType(sphereRadius)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(particlePosition), particleRadius, sphereCenter, sphereRadius);
}
// Autogenerated method: DynamicBoneCollider.OutsideCapsule
void GlobalNamespace::DynamicBoneCollider::OutsideCapsule(ByRef<::UnityEngine::Vector3> particlePosition, float particleRadius, ::UnityEngine::Vector3 capsuleP0, ::UnityEngine::Vector3 capsuleP1, float capsuleRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneCollider::OutsideCapsule");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DynamicBoneCollider", "OutsideCapsule", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(particlePosition), ::il2cpp_utils::ExtractType(particleRadius), ::il2cpp_utils::ExtractType(capsuleP0), ::il2cpp_utils::ExtractType(capsuleP1), ::il2cpp_utils::ExtractType(capsuleRadius)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(particlePosition), particleRadius, capsuleP0, capsuleP1, capsuleRadius);
}
// Autogenerated method: DynamicBoneCollider.InsideCapsule
void GlobalNamespace::DynamicBoneCollider::InsideCapsule(ByRef<::UnityEngine::Vector3> particlePosition, float particleRadius, ::UnityEngine::Vector3 capsuleP0, ::UnityEngine::Vector3 capsuleP1, float capsuleRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneCollider::InsideCapsule");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DynamicBoneCollider", "InsideCapsule", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(particlePosition), ::il2cpp_utils::ExtractType(particleRadius), ::il2cpp_utils::ExtractType(capsuleP0), ::il2cpp_utils::ExtractType(capsuleP1), ::il2cpp_utils::ExtractType(capsuleRadius)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(particlePosition), particleRadius, capsuleP0, capsuleP1, capsuleRadius);
}
// Autogenerated method: DynamicBoneCollider.OnDrawGizmosSelected
void GlobalNamespace::DynamicBoneCollider::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneCollider::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBoneCollider.Collide
void GlobalNamespace::DynamicBoneCollider::Collide(ByRef<::UnityEngine::Vector3> particlePosition, float particleRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneCollider::Collide");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Collide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(particlePosition), ::il2cpp_utils::ExtractType(particleRadius)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(particlePosition), particleRadius);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBoneColliderBase
#include "GlobalNamespace/DynamicBoneColliderBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public DynamicBoneColliderBase/Direction m_Direction
[[deprecated("Use field access instead!")]] ::GlobalNamespace::DynamicBoneColliderBase::Direction& GlobalNamespace::DynamicBoneColliderBase::dyn_m_Direction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneColliderBase::dyn_m_Direction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Direction"))->offset;
  return *reinterpret_cast<::GlobalNamespace::DynamicBoneColliderBase::Direction*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_Center
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::DynamicBoneColliderBase::dyn_m_Center() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneColliderBase::dyn_m_Center");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Center"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public DynamicBoneColliderBase/Bound m_Bound
[[deprecated("Use field access instead!")]] ::GlobalNamespace::DynamicBoneColliderBase::Bound& GlobalNamespace::DynamicBoneColliderBase::dyn_m_Bound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneColliderBase::dyn_m_Bound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Bound"))->offset;
  return *reinterpret_cast<::GlobalNamespace::DynamicBoneColliderBase::Bound*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DynamicBoneColliderBase.Collide
void GlobalNamespace::DynamicBoneColliderBase::Collide(ByRef<::UnityEngine::Vector3> particlePosition, float particleRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneColliderBase::Collide");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Collide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(particlePosition), ::il2cpp_utils::ExtractType(particleRadius)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(particlePosition), particleRadius);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBoneColliderBase/Direction
#include "GlobalNamespace/DynamicBoneColliderBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DynamicBoneColliderBase/Direction X
::GlobalNamespace::DynamicBoneColliderBase::Direction GlobalNamespace::DynamicBoneColliderBase::Direction::_get_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneColliderBase::Direction::_get_X");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DynamicBoneColliderBase::Direction>("", "DynamicBoneColliderBase/Direction", "X"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBoneColliderBase/Direction X
void GlobalNamespace::DynamicBoneColliderBase::Direction::_set_X(::GlobalNamespace::DynamicBoneColliderBase::Direction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneColliderBase::Direction::_set_X");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBoneColliderBase/Direction", "X", value));
}
// Autogenerated static field getter
// Get static field: static public DynamicBoneColliderBase/Direction Y
::GlobalNamespace::DynamicBoneColliderBase::Direction GlobalNamespace::DynamicBoneColliderBase::Direction::_get_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneColliderBase::Direction::_get_Y");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DynamicBoneColliderBase::Direction>("", "DynamicBoneColliderBase/Direction", "Y"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBoneColliderBase/Direction Y
void GlobalNamespace::DynamicBoneColliderBase::Direction::_set_Y(::GlobalNamespace::DynamicBoneColliderBase::Direction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneColliderBase::Direction::_set_Y");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBoneColliderBase/Direction", "Y", value));
}
// Autogenerated static field getter
// Get static field: static public DynamicBoneColliderBase/Direction Z
::GlobalNamespace::DynamicBoneColliderBase::Direction GlobalNamespace::DynamicBoneColliderBase::Direction::_get_Z() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneColliderBase::Direction::_get_Z");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DynamicBoneColliderBase::Direction>("", "DynamicBoneColliderBase/Direction", "Z"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBoneColliderBase/Direction Z
void GlobalNamespace::DynamicBoneColliderBase::Direction::_set_Z(::GlobalNamespace::DynamicBoneColliderBase::Direction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneColliderBase::Direction::_set_Z");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBoneColliderBase/Direction", "Z", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DynamicBoneColliderBase::Direction::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneColliderBase::Direction::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBoneColliderBase/Bound
#include "GlobalNamespace/DynamicBoneColliderBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DynamicBoneColliderBase/Bound Outside
::GlobalNamespace::DynamicBoneColliderBase::Bound GlobalNamespace::DynamicBoneColliderBase::Bound::_get_Outside() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneColliderBase::Bound::_get_Outside");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DynamicBoneColliderBase::Bound>("", "DynamicBoneColliderBase/Bound", "Outside"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBoneColliderBase/Bound Outside
void GlobalNamespace::DynamicBoneColliderBase::Bound::_set_Outside(::GlobalNamespace::DynamicBoneColliderBase::Bound value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneColliderBase::Bound::_set_Outside");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBoneColliderBase/Bound", "Outside", value));
}
// Autogenerated static field getter
// Get static field: static public DynamicBoneColliderBase/Bound Inside
::GlobalNamespace::DynamicBoneColliderBase::Bound GlobalNamespace::DynamicBoneColliderBase::Bound::_get_Inside() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneColliderBase::Bound::_get_Inside");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DynamicBoneColliderBase::Bound>("", "DynamicBoneColliderBase/Bound", "Inside"));
}
// Autogenerated static field setter
// Set static field: static public DynamicBoneColliderBase/Bound Inside
void GlobalNamespace::DynamicBoneColliderBase::Bound::_set_Inside(::GlobalNamespace::DynamicBoneColliderBase::Bound value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneColliderBase::Bound::_set_Inside");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DynamicBoneColliderBase/Bound", "Inside", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DynamicBoneColliderBase::Bound::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBoneColliderBase::Bound::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DynamicBonePlaneCollider
#include "GlobalNamespace/DynamicBonePlaneCollider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DynamicBonePlaneCollider.OnValidate
void GlobalNamespace::DynamicBonePlaneCollider::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBonePlaneCollider::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBonePlaneCollider.OnDrawGizmosSelected
void GlobalNamespace::DynamicBonePlaneCollider::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBonePlaneCollider::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DynamicBonePlaneCollider.Collide
void GlobalNamespace::DynamicBonePlaneCollider::Collide(ByRef<::UnityEngine::Vector3> particlePosition, float particleRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicBonePlaneCollider::Collide");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Collide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(particlePosition), ::il2cpp_utils::ExtractType(particleRadius)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(particlePosition), particleRadius);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Baker
#include "RootMotion/Baker.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 frameRate
[[deprecated("Use field access instead!")]] int& RootMotion::Baker::dyn_frameRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::dyn_frameRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frameRate"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single keyReductionError
[[deprecated("Use field access instead!")]] float& RootMotion::Baker::dyn_keyReductionError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::dyn_keyReductionError");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "keyReductionError"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.Baker/RootMotion.Mode mode
[[deprecated("Use field access instead!")]] ::RootMotion::Baker::Mode& RootMotion::Baker::dyn_mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::dyn_mode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mode"))->offset;
  return *reinterpret_cast<::RootMotion::Baker::Mode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationClip[] animationClips
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AnimationClip*>& RootMotion::Baker::dyn_animationClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::dyn_animationClips");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animationClips"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AnimationClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String[] animationStates
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& RootMotion::Baker::dyn_animationStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::dyn_animationStates");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animationStates"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean loop
[[deprecated("Use field access instead!")]] bool& RootMotion::Baker::dyn_loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::dyn_loop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loop"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String saveToFolder
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::Baker::dyn_saveToFolder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::dyn_saveToFolder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "saveToFolder"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String appendName
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::Baker::dyn_appendName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::dyn_appendName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "appendName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String saveName
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::Baker::dyn_saveName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::dyn_saveName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "saveName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isBaking>k__BackingField
[[deprecated("Use field access instead!")]] bool& RootMotion::Baker::dyn_$isBaking$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::dyn_$isBaking$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isBaking>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <bakingProgress>k__BackingField
[[deprecated("Use field access instead!")]] float& RootMotion::Baker::dyn_$bakingProgress$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::dyn_$bakingProgress$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<bakingProgress>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Animator animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& RootMotion::Baker::dyn_animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::dyn_animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Playables.PlayableDirector director
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableDirector*& RootMotion::Baker::dyn_director() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::dyn_director");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "director"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableDirector**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <clipLength>k__BackingField
[[deprecated("Use field access instead!")]] float& RootMotion::Baker::dyn_$clipLength$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::dyn_$clipLength$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<clipLength>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.Baker.get_isBaking
bool RootMotion::Baker::get_isBaking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::get_isBaking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isBaking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.set_isBaking
void RootMotion::Baker::set_isBaking(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::set_isBaking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isBaking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.Baker.get_bakingProgress
float RootMotion::Baker::get_bakingProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::get_bakingProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bakingProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.set_bakingProgress
void RootMotion::Baker::set_bakingProgress(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::set_bakingProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_bakingProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.Baker.get_clipLength
float RootMotion::Baker::get_clipLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::get_clipLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clipLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.set_clipLength
void RootMotion::Baker::set_clipLength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::set_clipLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clipLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.Baker.OpenUserManual
void RootMotion::Baker::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.OpenScriptReference
void RootMotion::Baker::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.SupportGroup
void RootMotion::Baker::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.ASThread
void RootMotion::Baker::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.GetCharacterRoot
::UnityEngine::Transform* RootMotion::Baker::GetCharacterRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::GetCharacterRoot");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCharacterRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.OnStartBaking
void RootMotion::Baker::OnStartBaking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::OnStartBaking");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnStartBaking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.OnSetLoopFrame
void RootMotion::Baker::OnSetLoopFrame(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::OnSetLoopFrame");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSetLoopFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: RootMotion.Baker.OnSetCurves
void RootMotion::Baker::OnSetCurves(ByRef<::UnityEngine::AnimationClip*> clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::OnSetCurves");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSetCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(clip));
}
// Autogenerated method: RootMotion.Baker.OnSetKeyframes
void RootMotion::Baker::OnSetKeyframes(float time, bool lastFrame) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::OnSetKeyframes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSetKeyframes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(lastFrame)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time, lastFrame);
}
// Autogenerated method: RootMotion.Baker.BakeClip
void RootMotion::Baker::BakeClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::BakeClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BakeClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.StartBaking
void RootMotion::Baker::StartBaking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::StartBaking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartBaking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Baker.StopBaking
void RootMotion::Baker::StopBaking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::StopBaking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopBaking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Baker/RootMotion.Mode
#include "RootMotion/Baker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.Baker/RootMotion.Mode AnimationClips
::RootMotion::Baker::Mode RootMotion::Baker::Mode::_get_AnimationClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::Mode::_get_AnimationClips");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::Baker::Mode>("RootMotion", "Baker/Mode", "AnimationClips"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Baker/RootMotion.Mode AnimationClips
void RootMotion::Baker::Mode::_set_AnimationClips(::RootMotion::Baker::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::Mode::_set_AnimationClips");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "Baker/Mode", "AnimationClips", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.Baker/RootMotion.Mode AnimationStates
::RootMotion::Baker::Mode RootMotion::Baker::Mode::_get_AnimationStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::Mode::_get_AnimationStates");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::Baker::Mode>("RootMotion", "Baker/Mode", "AnimationStates"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Baker/RootMotion.Mode AnimationStates
void RootMotion::Baker::Mode::_set_AnimationStates(::RootMotion::Baker::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::Mode::_set_AnimationStates");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "Baker/Mode", "AnimationStates", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.Baker/RootMotion.Mode PlayableDirector
::RootMotion::Baker::Mode RootMotion::Baker::Mode::_get_PlayableDirector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::Mode::_get_PlayableDirector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::Baker::Mode>("RootMotion", "Baker/Mode", "PlayableDirector"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Baker/RootMotion.Mode PlayableDirector
void RootMotion::Baker::Mode::_set_PlayableDirector(::RootMotion::Baker::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::Mode::_set_PlayableDirector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "Baker/Mode", "PlayableDirector", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.Baker/RootMotion.Mode Realtime
::RootMotion::Baker::Mode RootMotion::Baker::Mode::_get_Realtime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::Mode::_get_Realtime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::Baker::Mode>("RootMotion", "Baker/Mode", "Realtime"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Baker/RootMotion.Mode Realtime
void RootMotion::Baker::Mode::_set_Realtime(::RootMotion::Baker::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::Mode::_set_Realtime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "Baker/Mode", "Realtime", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& RootMotion::Baker::Mode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Baker::Mode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.GenericBaker
#include "RootMotion/GenericBaker.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.BakerTransform
#include "RootMotion/BakerTransform.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean markAsLegacy
[[deprecated("Use field access instead!")]] bool& RootMotion::GenericBaker::dyn_markAsLegacy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::GenericBaker::dyn_markAsLegacy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "markAsLegacy"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform root
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::GenericBaker::dyn_root() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::GenericBaker::dyn_root");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "root"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rootNode
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::GenericBaker::dyn_rootNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::GenericBaker::dyn_rootNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rootNode"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] ignoreList
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& RootMotion::GenericBaker::dyn_ignoreList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::GenericBaker::dyn_ignoreList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ignoreList"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] bakePositionList
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& RootMotion::GenericBaker::dyn_bakePositionList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::GenericBaker::dyn_bakePositionList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakePositionList"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.BakerTransform[] children
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::BakerTransform*>& RootMotion::GenericBaker::dyn_children() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::GenericBaker::dyn_children");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "children"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::BakerTransform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.BakerTransform rootChild
[[deprecated("Use field access instead!")]] ::RootMotion::BakerTransform*& RootMotion::GenericBaker::dyn_rootChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::GenericBaker::dyn_rootChild");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rootChild"))->offset;
  return *reinterpret_cast<::RootMotion::BakerTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 rootChildIndex
[[deprecated("Use field access instead!")]] int& RootMotion::GenericBaker::dyn_rootChildIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::GenericBaker::dyn_rootChildIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rootChildIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.GenericBaker.Awake
void RootMotion::GenericBaker::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::GenericBaker::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.GenericBaker.IsIgnored
bool RootMotion::GenericBaker::IsIgnored(::UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::GenericBaker::IsIgnored");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsIgnored", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: RootMotion.GenericBaker.BakePosition
bool RootMotion::GenericBaker::BakePosition(::UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::GenericBaker::BakePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BakePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: RootMotion.GenericBaker.GetCharacterRoot
::UnityEngine::Transform* RootMotion::GenericBaker::GetCharacterRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::GenericBaker::GetCharacterRoot");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCharacterRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.GenericBaker.OnStartBaking
void RootMotion::GenericBaker::OnStartBaking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::GenericBaker::OnStartBaking");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnStartBaking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.GenericBaker.OnSetLoopFrame
void RootMotion::GenericBaker::OnSetLoopFrame(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::GenericBaker::OnSetLoopFrame");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSetLoopFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: RootMotion.GenericBaker.OnSetCurves
void RootMotion::GenericBaker::OnSetCurves(ByRef<::UnityEngine::AnimationClip*> clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::GenericBaker::OnSetCurves");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSetCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(clip));
}
// Autogenerated method: RootMotion.GenericBaker.OnSetKeyframes
void RootMotion::GenericBaker::OnSetKeyframes(float time, bool lastFrame) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::GenericBaker::OnSetKeyframes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSetKeyframes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(lastFrame)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time, lastFrame);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.TQ
#include "RootMotion/TQ.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 t
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::TQ::dyn_t() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::TQ::dyn_t");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "t"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion q
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::TQ::dyn_q() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::TQ::dyn_q");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "q"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.AvatarUtility
#include "RootMotion/AvatarUtility.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Avatar
#include "UnityEngine/Avatar.hpp"
// Including type: UnityEngine.AvatarIKGoal
#include "UnityEngine/AvatarIKGoal.hpp"
// Including type: RootMotion.TQ
#include "RootMotion/TQ.hpp"
// Including type: UnityEngine.HumanBodyBones
#include "UnityEngine/HumanBodyBones.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.AvatarUtility.GetPostRotation
::UnityEngine::Quaternion RootMotion::AvatarUtility::GetPostRotation(::UnityEngine::Avatar* avatar, ::UnityEngine::AvatarIKGoal avatarIKGoal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::AvatarUtility::GetPostRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "AvatarUtility", "GetPostRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(avatar), ::il2cpp_utils::ExtractType(avatarIKGoal)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, avatar, avatarIKGoal);
}
// Autogenerated method: RootMotion.AvatarUtility.GetIKGoalTQ
::RootMotion::TQ* RootMotion::AvatarUtility::GetIKGoalTQ(::UnityEngine::Avatar* avatar, float humanScale, ::UnityEngine::AvatarIKGoal avatarIKGoal, ::RootMotion::TQ* bodyPositionRotation, ::RootMotion::TQ* boneTQ) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::AvatarUtility::GetIKGoalTQ");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "AvatarUtility", "GetIKGoalTQ", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(avatar), ::il2cpp_utils::ExtractType(humanScale), ::il2cpp_utils::ExtractType(avatarIKGoal), ::il2cpp_utils::ExtractType(bodyPositionRotation), ::il2cpp_utils::ExtractType(boneTQ)})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::TQ*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, avatar, humanScale, avatarIKGoal, bodyPositionRotation, boneTQ);
}
// Autogenerated method: RootMotion.AvatarUtility.HumanIDFromAvatarIKGoal
::UnityEngine::HumanBodyBones RootMotion::AvatarUtility::HumanIDFromAvatarIKGoal(::UnityEngine::AvatarIKGoal avatarIKGoal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::AvatarUtility::HumanIDFromAvatarIKGoal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "AvatarUtility", "HumanIDFromAvatarIKGoal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(avatarIKGoal)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::HumanBodyBones, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, avatarIKGoal);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.BakerUtilities
#include "RootMotion/BakerUtilities.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.BakerUtilities.ReduceKeyframes
void RootMotion::BakerUtilities::ReduceKeyframes(::UnityEngine::AnimationCurve* curve, float maxError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerUtilities::ReduceKeyframes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BakerUtilities", "ReduceKeyframes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curve), ::il2cpp_utils::ExtractType(maxError)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, curve, maxError);
}
// Autogenerated method: RootMotion.BakerUtilities.GetReducedKeyframes
::ArrayW<::UnityEngine::Keyframe> RootMotion::BakerUtilities::GetReducedKeyframes(::UnityEngine::AnimationCurve* curve, float maxError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerUtilities::GetReducedKeyframes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BakerUtilities", "GetReducedKeyframes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curve), ::il2cpp_utils::ExtractType(maxError)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Keyframe>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, curve, maxError);
}
// Autogenerated method: RootMotion.BakerUtilities.SetLoopFrame
void RootMotion::BakerUtilities::SetLoopFrame(float time, ::UnityEngine::AnimationCurve* curve) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerUtilities::SetLoopFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BakerUtilities", "SetLoopFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(curve)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time, curve);
}
// Autogenerated method: RootMotion.BakerUtilities.SetTangentMode
void RootMotion::BakerUtilities::SetTangentMode(::UnityEngine::AnimationCurve* curve) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerUtilities::SetTangentMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BakerUtilities", "SetTangentMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curve)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, curve);
}
// Autogenerated method: RootMotion.BakerUtilities.EnsureQuaternionContinuity
::UnityEngine::Quaternion RootMotion::BakerUtilities::EnsureQuaternionContinuity(::UnityEngine::Quaternion lastQ, ::UnityEngine::Quaternion q) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerUtilities::EnsureQuaternionContinuity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BakerUtilities", "EnsureQuaternionContinuity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lastQ), ::il2cpp_utils::ExtractType(q)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lastQ, q);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.BakerHumanoidQT
#include "RootMotion/BakerHumanoidQT.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Avatar
#include "UnityEngine/Avatar.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::BakerHumanoidQT::dyn_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String Qx
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::BakerHumanoidQT::dyn_Qx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_Qx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Qx"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String Qy
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::BakerHumanoidQT::dyn_Qy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_Qy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Qy"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String Qz
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::BakerHumanoidQT::dyn_Qz() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_Qz");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Qz"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String Qw
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::BakerHumanoidQT::dyn_Qw() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_Qw");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Qw"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String Tx
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::BakerHumanoidQT::dyn_Tx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_Tx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Tx"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String Ty
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::BakerHumanoidQT::dyn_Ty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_Ty");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Ty"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String Tz
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::BakerHumanoidQT::dyn_Tz() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_Tz");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Tz"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve rotX
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& RootMotion::BakerHumanoidQT::dyn_rotX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_rotX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotX"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve rotY
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& RootMotion::BakerHumanoidQT::dyn_rotY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_rotY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotY"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve rotZ
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& RootMotion::BakerHumanoidQT::dyn_rotZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_rotZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotZ"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve rotW
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& RootMotion::BakerHumanoidQT::dyn_rotW() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_rotW");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotW"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve posX
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& RootMotion::BakerHumanoidQT::dyn_posX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_posX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "posX"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve posY
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& RootMotion::BakerHumanoidQT::dyn_posY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_posY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "posY"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve posZ
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& RootMotion::BakerHumanoidQT::dyn_posZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_posZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "posZ"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AvatarIKGoal goal
[[deprecated("Use field access instead!")]] ::UnityEngine::AvatarIKGoal& RootMotion::BakerHumanoidQT::dyn_goal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_goal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "goal"))->offset;
  return *reinterpret_cast<::UnityEngine::AvatarIKGoal*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion lastQ
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::BakerHumanoidQT::dyn_lastQ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_lastQ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastQ"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean lastQSet
[[deprecated("Use field access instead!")]] bool& RootMotion::BakerHumanoidQT::dyn_lastQSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::dyn_lastQSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastQSet"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.BakerHumanoidQT.Reset
void RootMotion::BakerHumanoidQT::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.BakerHumanoidQT.SetIKKeyframes
void RootMotion::BakerHumanoidQT::SetIKKeyframes(float time, ::UnityEngine::Avatar* avatar, float humanScale, ::UnityEngine::Vector3 bodyPosition, ::UnityEngine::Quaternion bodyRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::SetIKKeyframes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKKeyframes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(avatar), ::il2cpp_utils::ExtractType(humanScale), ::il2cpp_utils::ExtractType(bodyPosition), ::il2cpp_utils::ExtractType(bodyRotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time, avatar, humanScale, bodyPosition, bodyRotation);
}
// Autogenerated method: RootMotion.BakerHumanoidQT.SetKeyframes
void RootMotion::BakerHumanoidQT::SetKeyframes(float time, ::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::SetKeyframes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKeyframes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rot)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time, pos, rot);
}
// Autogenerated method: RootMotion.BakerHumanoidQT.MoveLastKeyframes
void RootMotion::BakerHumanoidQT::MoveLastKeyframes(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::MoveLastKeyframes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveLastKeyframes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: RootMotion.BakerHumanoidQT.SetLoopFrame
void RootMotion::BakerHumanoidQT::SetLoopFrame(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::SetLoopFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLoopFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: RootMotion.BakerHumanoidQT.MoveLastKeyframe
void RootMotion::BakerHumanoidQT::MoveLastKeyframe(float time, ::UnityEngine::AnimationCurve* curve) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::MoveLastKeyframe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveLastKeyframe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(curve)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time, curve);
}
// Autogenerated method: RootMotion.BakerHumanoidQT.MultiplyLength
void RootMotion::BakerHumanoidQT::MultiplyLength(::UnityEngine::AnimationCurve* curve, float mlp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::MultiplyLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MultiplyLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curve), ::il2cpp_utils::ExtractType(mlp)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, curve, mlp);
}
// Autogenerated method: RootMotion.BakerHumanoidQT.SetCurves
void RootMotion::BakerHumanoidQT::SetCurves(ByRef<::UnityEngine::AnimationClip*> clip, float maxError, float lengthMlp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::SetCurves");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(maxError), ::il2cpp_utils::ExtractType(lengthMlp)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(clip), maxError, lengthMlp);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.BakerMuscle
#include "RootMotion/BakerMuscle.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve curve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& RootMotion::BakerMuscle::dyn_curve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerMuscle::dyn_curve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "curve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 muscleIndex
[[deprecated("Use field access instead!")]] int& RootMotion::BakerMuscle::dyn_muscleIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerMuscle::dyn_muscleIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "muscleIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String propertyName
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::BakerMuscle::dyn_propertyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerMuscle::dyn_propertyName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "propertyName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.BakerMuscle.MuscleNameToPropertyName
::StringW RootMotion::BakerMuscle::MuscleNameToPropertyName(::StringW n) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerMuscle::MuscleNameToPropertyName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MuscleNameToPropertyName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(n)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, n);
}
// Autogenerated method: RootMotion.BakerMuscle.MultiplyLength
void RootMotion::BakerMuscle::MultiplyLength(::UnityEngine::AnimationCurve* curve, float mlp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerMuscle::MultiplyLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MultiplyLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curve), ::il2cpp_utils::ExtractType(mlp)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, curve, mlp);
}
// Autogenerated method: RootMotion.BakerMuscle.SetCurves
void RootMotion::BakerMuscle::SetCurves(ByRef<::UnityEngine::AnimationClip*> clip, float maxError, float lengthMlp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerMuscle::SetCurves");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(maxError), ::il2cpp_utils::ExtractType(lengthMlp)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(clip), maxError, lengthMlp);
}
// Autogenerated method: RootMotion.BakerMuscle.Reset
void RootMotion::BakerMuscle::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerMuscle::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.BakerMuscle.SetKeyframe
void RootMotion::BakerMuscle::SetKeyframe(float time, ::ArrayW<float> muscles) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerMuscle::SetKeyframe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKeyframe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(muscles)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time, muscles);
}
// Autogenerated method: RootMotion.BakerMuscle.SetLoopFrame
void RootMotion::BakerMuscle::SetLoopFrame(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerMuscle::SetLoopFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLoopFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.BakerTransform
#include "RootMotion/BakerTransform.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::BakerTransform::dyn_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::dyn_transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve posX
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& RootMotion::BakerTransform::dyn_posX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::dyn_posX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "posX"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve posY
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& RootMotion::BakerTransform::dyn_posY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::dyn_posY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "posY"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve posZ
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& RootMotion::BakerTransform::dyn_posZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::dyn_posZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "posZ"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve rotX
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& RootMotion::BakerTransform::dyn_rotX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::dyn_rotX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotX"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve rotY
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& RootMotion::BakerTransform::dyn_rotY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::dyn_rotY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotY"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve rotZ
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& RootMotion::BakerTransform::dyn_rotZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::dyn_rotZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotZ"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve rotW
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& RootMotion::BakerTransform::dyn_rotW() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::dyn_rotW");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotW"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String relativePath
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::BakerTransform::dyn_relativePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::dyn_relativePath");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "relativePath"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean recordPosition
[[deprecated("Use field access instead!")]] bool& RootMotion::BakerTransform::dyn_recordPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::dyn_recordPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "recordPosition"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 relativePosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::BakerTransform::dyn_relativePosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::dyn_relativePosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "relativePosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isRootNode
[[deprecated("Use field access instead!")]] bool& RootMotion::BakerTransform::dyn_isRootNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::dyn_isRootNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isRootNode"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion relativeRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::BakerTransform::dyn_relativeRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::dyn_relativeRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "relativeRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.BakerTransform.SetRelativeSpace
void RootMotion::BakerTransform::SetRelativeSpace(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::SetRelativeSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRelativeSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position, rotation);
}
// Autogenerated method: RootMotion.BakerTransform.SetCurves
void RootMotion::BakerTransform::SetCurves(ByRef<::UnityEngine::AnimationClip*> clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::SetCurves");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(clip));
}
// Autogenerated method: RootMotion.BakerTransform.AddRootMotionCurves
void RootMotion::BakerTransform::AddRootMotionCurves(ByRef<::UnityEngine::AnimationClip*> clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::AddRootMotionCurves");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddRootMotionCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(clip));
}
// Autogenerated method: RootMotion.BakerTransform.Reset
void RootMotion::BakerTransform::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.BakerTransform.ReduceKeyframes
void RootMotion::BakerTransform::ReduceKeyframes(float maxError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::ReduceKeyframes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReduceKeyframes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxError)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, maxError);
}
// Autogenerated method: RootMotion.BakerTransform.SetKeyframes
void RootMotion::BakerTransform::SetKeyframes(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::SetKeyframes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKeyframes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: RootMotion.BakerTransform.AddLoopFrame
void RootMotion::BakerTransform::AddLoopFrame(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerTransform::AddLoopFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddLoopFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.HumanoidBaker
#include "RootMotion/HumanoidBaker.hpp"
// Including type: RootMotion.BakerMuscle
#include "RootMotion/BakerMuscle.hpp"
// Including type: RootMotion.BakerHumanoidQT
#include "RootMotion/BakerHumanoidQT.hpp"
// Including type: UnityEngine.HumanPoseHandler
#include "UnityEngine/HumanPoseHandler.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean bakeHandIK
[[deprecated("Use field access instead!")]] bool& RootMotion::HumanoidBaker::dyn_bakeHandIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::dyn_bakeHandIK");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakeHandIK"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single IKKeyReductionError
[[deprecated("Use field access instead!")]] float& RootMotion::HumanoidBaker::dyn_IKKeyReductionError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::dyn_IKKeyReductionError");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IKKeyReductionError"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 muscleFrameRateDiv
[[deprecated("Use field access instead!")]] int& RootMotion::HumanoidBaker::dyn_muscleFrameRateDiv() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::dyn_muscleFrameRateDiv");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "muscleFrameRateDiv"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.BakerMuscle[] bakerMuscles
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::BakerMuscle*>& RootMotion::HumanoidBaker::dyn_bakerMuscles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::dyn_bakerMuscles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakerMuscles"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::BakerMuscle*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.BakerHumanoidQT rootQT
[[deprecated("Use field access instead!")]] ::RootMotion::BakerHumanoidQT*& RootMotion::HumanoidBaker::dyn_rootQT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::dyn_rootQT");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rootQT"))->offset;
  return *reinterpret_cast<::RootMotion::BakerHumanoidQT**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.BakerHumanoidQT leftFootQT
[[deprecated("Use field access instead!")]] ::RootMotion::BakerHumanoidQT*& RootMotion::HumanoidBaker::dyn_leftFootQT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::dyn_leftFootQT");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftFootQT"))->offset;
  return *reinterpret_cast<::RootMotion::BakerHumanoidQT**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.BakerHumanoidQT rightFootQT
[[deprecated("Use field access instead!")]] ::RootMotion::BakerHumanoidQT*& RootMotion::HumanoidBaker::dyn_rightFootQT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::dyn_rightFootQT");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightFootQT"))->offset;
  return *reinterpret_cast<::RootMotion::BakerHumanoidQT**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.BakerHumanoidQT leftHandQT
[[deprecated("Use field access instead!")]] ::RootMotion::BakerHumanoidQT*& RootMotion::HumanoidBaker::dyn_leftHandQT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::dyn_leftHandQT");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandQT"))->offset;
  return *reinterpret_cast<::RootMotion::BakerHumanoidQT**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.BakerHumanoidQT rightHandQT
[[deprecated("Use field access instead!")]] ::RootMotion::BakerHumanoidQT*& RootMotion::HumanoidBaker::dyn_rightHandQT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::dyn_rightHandQT");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandQT"))->offset;
  return *reinterpret_cast<::RootMotion::BakerHumanoidQT**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] muscles
[[deprecated("Use field access instead!")]] ::ArrayW<float>& RootMotion::HumanoidBaker::dyn_muscles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::dyn_muscles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "muscles"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.HumanPose pose
[[deprecated("Use field access instead!")]] ::UnityEngine::HumanPose& RootMotion::HumanoidBaker::dyn_pose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::dyn_pose");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pose"))->offset;
  return *reinterpret_cast<::UnityEngine::HumanPose*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.HumanPoseHandler handler
[[deprecated("Use field access instead!")]] ::UnityEngine::HumanPoseHandler*& RootMotion::HumanoidBaker::dyn_handler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::dyn_handler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handler"))->offset;
  return *reinterpret_cast<::UnityEngine::HumanPoseHandler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 bodyPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::HumanoidBaker::dyn_bodyPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::dyn_bodyPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bodyPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion bodyRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::HumanoidBaker::dyn_bodyRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::dyn_bodyRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bodyRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 mN
[[deprecated("Use field access instead!")]] int& RootMotion::HumanoidBaker::dyn_mN() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::dyn_mN");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mN"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion lastBodyRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::HumanoidBaker::dyn_lastBodyRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::dyn_lastBodyRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastBodyRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.HumanoidBaker.Awake
void RootMotion::HumanoidBaker::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.HumanoidBaker.UpdateHumanPose
void RootMotion::HumanoidBaker::UpdateHumanPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::UpdateHumanPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateHumanPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.HumanoidBaker.GetCharacterRoot
::UnityEngine::Transform* RootMotion::HumanoidBaker::GetCharacterRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::GetCharacterRoot");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCharacterRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.HumanoidBaker.OnStartBaking
void RootMotion::HumanoidBaker::OnStartBaking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::OnStartBaking");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnStartBaking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.HumanoidBaker.OnSetLoopFrame
void RootMotion::HumanoidBaker::OnSetLoopFrame(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::OnSetLoopFrame");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSetLoopFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: RootMotion.HumanoidBaker.OnSetCurves
void RootMotion::HumanoidBaker::OnSetCurves(ByRef<::UnityEngine::AnimationClip*> clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::OnSetCurves");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSetCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(clip));
}
// Autogenerated method: RootMotion.HumanoidBaker.OnSetKeyframes
void RootMotion::HumanoidBaker::OnSetKeyframes(float time, bool lastFrame) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::HumanoidBaker::OnSetKeyframes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSetKeyframes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(lastFrame)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time, lastFrame);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Axis
#include "RootMotion/Axis.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.Axis X
::RootMotion::Axis RootMotion::Axis::_get_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Axis::_get_X");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::Axis>("RootMotion", "Axis", "X"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Axis X
void RootMotion::Axis::_set_X(::RootMotion::Axis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Axis::_set_X");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "Axis", "X", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.Axis Y
::RootMotion::Axis RootMotion::Axis::_get_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Axis::_get_Y");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::Axis>("RootMotion", "Axis", "Y"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Axis Y
void RootMotion::Axis::_set_Y(::RootMotion::Axis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Axis::_set_Y");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "Axis", "Y", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.Axis Z
::RootMotion::Axis RootMotion::Axis::_get_Z() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Axis::_get_Z");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::Axis>("RootMotion", "Axis", "Z"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Axis Z
void RootMotion::Axis::_set_Z(::RootMotion::Axis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Axis::_set_Z");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "Axis", "Z", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& RootMotion::Axis::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Axis::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.AxisTools
#include "RootMotion/AxisTools.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: RootMotion.Axis
#include "RootMotion/Axis.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.AxisTools.ToVector3
::UnityEngine::Vector3 RootMotion::AxisTools::ToVector3(::RootMotion::Axis axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::AxisTools::ToVector3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "AxisTools", "ToVector3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axis)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, axis);
}
// Autogenerated method: RootMotion.AxisTools.ToAxis
::RootMotion::Axis RootMotion::AxisTools::ToAxis(::UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::AxisTools::ToAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "AxisTools", "ToAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::Axis, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated method: RootMotion.AxisTools.GetAxisToPoint
::RootMotion::Axis RootMotion::AxisTools::GetAxisToPoint(::UnityEngine::Transform* t, ::UnityEngine::Vector3 worldPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::AxisTools::GetAxisToPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "AxisTools", "GetAxisToPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(worldPosition)})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::Axis, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, worldPosition);
}
// Autogenerated method: RootMotion.AxisTools.GetAxisToDirection
::RootMotion::Axis RootMotion::AxisTools::GetAxisToDirection(::UnityEngine::Transform* t, ::UnityEngine::Vector3 direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::AxisTools::GetAxisToDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "AxisTools", "GetAxisToDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(direction)})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::Axis, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, direction);
}
// Autogenerated method: RootMotion.AxisTools.GetAxisVectorToPoint
::UnityEngine::Vector3 RootMotion::AxisTools::GetAxisVectorToPoint(::UnityEngine::Transform* t, ::UnityEngine::Vector3 worldPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::AxisTools::GetAxisVectorToPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "AxisTools", "GetAxisVectorToPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(worldPosition)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, worldPosition);
}
// Autogenerated method: RootMotion.AxisTools.GetAxisVectorToDirection
::UnityEngine::Vector3 RootMotion::AxisTools::GetAxisVectorToDirection(::UnityEngine::Transform* t, ::UnityEngine::Vector3 direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::AxisTools::GetAxisVectorToDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "AxisTools", "GetAxisVectorToDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(direction)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, direction);
}
// Autogenerated method: RootMotion.AxisTools.GetAxisVectorToDirection
::UnityEngine::Vector3 RootMotion::AxisTools::GetAxisVectorToDirection(::UnityEngine::Quaternion r, ::UnityEngine::Vector3 direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::AxisTools::GetAxisVectorToDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "AxisTools", "GetAxisVectorToDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(r), ::il2cpp_utils::ExtractType(direction)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, r, direction);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.BipedLimbOrientations
#include "RootMotion/BipedLimbOrientations.hpp"
// Including type: RootMotion.BipedLimbOrientations/RootMotion.LimbOrientation
#include "RootMotion/BipedLimbOrientations_LimbOrientation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.BipedLimbOrientations/RootMotion.LimbOrientation leftArm
[[deprecated("Use field access instead!")]] ::RootMotion::BipedLimbOrientations::LimbOrientation*& RootMotion::BipedLimbOrientations::dyn_leftArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedLimbOrientations::dyn_leftArm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftArm"))->offset;
  return *reinterpret_cast<::RootMotion::BipedLimbOrientations::LimbOrientation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.BipedLimbOrientations/RootMotion.LimbOrientation rightArm
[[deprecated("Use field access instead!")]] ::RootMotion::BipedLimbOrientations::LimbOrientation*& RootMotion::BipedLimbOrientations::dyn_rightArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedLimbOrientations::dyn_rightArm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightArm"))->offset;
  return *reinterpret_cast<::RootMotion::BipedLimbOrientations::LimbOrientation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.BipedLimbOrientations/RootMotion.LimbOrientation leftLeg
[[deprecated("Use field access instead!")]] ::RootMotion::BipedLimbOrientations::LimbOrientation*& RootMotion::BipedLimbOrientations::dyn_leftLeg() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedLimbOrientations::dyn_leftLeg");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftLeg"))->offset;
  return *reinterpret_cast<::RootMotion::BipedLimbOrientations::LimbOrientation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.BipedLimbOrientations/RootMotion.LimbOrientation rightLeg
[[deprecated("Use field access instead!")]] ::RootMotion::BipedLimbOrientations::LimbOrientation*& RootMotion::BipedLimbOrientations::dyn_rightLeg() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedLimbOrientations::dyn_rightLeg");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightLeg"))->offset;
  return *reinterpret_cast<::RootMotion::BipedLimbOrientations::LimbOrientation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.BipedLimbOrientations.get_UMA
::RootMotion::BipedLimbOrientations* RootMotion::BipedLimbOrientations::get_UMA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedLimbOrientations::get_UMA");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedLimbOrientations", "get_UMA", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::BipedLimbOrientations*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: RootMotion.BipedLimbOrientations.get_MaxBiped
::RootMotion::BipedLimbOrientations* RootMotion::BipedLimbOrientations::get_MaxBiped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedLimbOrientations::get_MaxBiped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedLimbOrientations", "get_MaxBiped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::BipedLimbOrientations*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.BipedLimbOrientations/RootMotion.LimbOrientation
#include "RootMotion/BipedLimbOrientations_LimbOrientation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 upperBoneForwardAxis
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::BipedLimbOrientations::LimbOrientation::dyn_upperBoneForwardAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedLimbOrientations::LimbOrientation::dyn_upperBoneForwardAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "upperBoneForwardAxis"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 lowerBoneForwardAxis
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::BipedLimbOrientations::LimbOrientation::dyn_lowerBoneForwardAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedLimbOrientations::LimbOrientation::dyn_lowerBoneForwardAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lowerBoneForwardAxis"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 lastBoneLeftAxis
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::BipedLimbOrientations::LimbOrientation::dyn_lastBoneLeftAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedLimbOrientations::LimbOrientation::dyn_lastBoneLeftAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastBoneLeftAxis"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.BipedNaming
#include "RootMotion/BipedNaming.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String[] typeLeft
::ArrayW<::StringW> RootMotion::BipedNaming::_get_typeLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_typeLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "typeLeft"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeLeft
void RootMotion::BipedNaming::_set_typeLeft(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_typeLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeLeft", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeRight
::ArrayW<::StringW> RootMotion::BipedNaming::_get_typeRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_typeRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "typeRight"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeRight
void RootMotion::BipedNaming::_set_typeRight(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_typeRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeRight", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeSpine
::ArrayW<::StringW> RootMotion::BipedNaming::_get_typeSpine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_typeSpine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "typeSpine"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeSpine
void RootMotion::BipedNaming::_set_typeSpine(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_typeSpine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeSpine", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeHead
::ArrayW<::StringW> RootMotion::BipedNaming::_get_typeHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_typeHead");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "typeHead"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeHead
void RootMotion::BipedNaming::_set_typeHead(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_typeHead");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeHead", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeArm
::ArrayW<::StringW> RootMotion::BipedNaming::_get_typeArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_typeArm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "typeArm"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeArm
void RootMotion::BipedNaming::_set_typeArm(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_typeArm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeArm", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeLeg
::ArrayW<::StringW> RootMotion::BipedNaming::_get_typeLeg() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_typeLeg");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "typeLeg"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeLeg
void RootMotion::BipedNaming::_set_typeLeg(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_typeLeg");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeLeg", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeTail
::ArrayW<::StringW> RootMotion::BipedNaming::_get_typeTail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_typeTail");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "typeTail"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeTail
void RootMotion::BipedNaming::_set_typeTail(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_typeTail");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeTail", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeEye
::ArrayW<::StringW> RootMotion::BipedNaming::_get_typeEye() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_typeEye");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "typeEye"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeEye
void RootMotion::BipedNaming::_set_typeEye(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_typeEye");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeEye", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeExclude
::ArrayW<::StringW> RootMotion::BipedNaming::_get_typeExclude() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_typeExclude");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "typeExclude"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeExclude
void RootMotion::BipedNaming::_set_typeExclude(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_typeExclude");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeExclude", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeExcludeSpine
::ArrayW<::StringW> RootMotion::BipedNaming::_get_typeExcludeSpine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_typeExcludeSpine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "typeExcludeSpine"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeExcludeSpine
void RootMotion::BipedNaming::_set_typeExcludeSpine(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_typeExcludeSpine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeExcludeSpine", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeExcludeHead
::ArrayW<::StringW> RootMotion::BipedNaming::_get_typeExcludeHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_typeExcludeHead");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "typeExcludeHead"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeExcludeHead
void RootMotion::BipedNaming::_set_typeExcludeHead(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_typeExcludeHead");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeExcludeHead", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeExcludeArm
::ArrayW<::StringW> RootMotion::BipedNaming::_get_typeExcludeArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_typeExcludeArm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "typeExcludeArm"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeExcludeArm
void RootMotion::BipedNaming::_set_typeExcludeArm(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_typeExcludeArm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeExcludeArm", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeExcludeLeg
::ArrayW<::StringW> RootMotion::BipedNaming::_get_typeExcludeLeg() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_typeExcludeLeg");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "typeExcludeLeg"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeExcludeLeg
void RootMotion::BipedNaming::_set_typeExcludeLeg(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_typeExcludeLeg");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeExcludeLeg", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeExcludeTail
::ArrayW<::StringW> RootMotion::BipedNaming::_get_typeExcludeTail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_typeExcludeTail");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "typeExcludeTail"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeExcludeTail
void RootMotion::BipedNaming::_set_typeExcludeTail(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_typeExcludeTail");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeExcludeTail", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] typeExcludeEye
::ArrayW<::StringW> RootMotion::BipedNaming::_get_typeExcludeEye() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_typeExcludeEye");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "typeExcludeEye"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] typeExcludeEye
void RootMotion::BipedNaming::_set_typeExcludeEye(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_typeExcludeEye");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "typeExcludeEye", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] pelvis
::ArrayW<::StringW> RootMotion::BipedNaming::_get_pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_pelvis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "pelvis"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] pelvis
void RootMotion::BipedNaming::_set_pelvis(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_pelvis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "pelvis", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] hand
::ArrayW<::StringW> RootMotion::BipedNaming::_get_hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_hand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "hand"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] hand
void RootMotion::BipedNaming::_set_hand(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_hand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "hand", value));
}
// Autogenerated static field getter
// Get static field: static public System.String[] foot
::ArrayW<::StringW> RootMotion::BipedNaming::_get_foot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_get_foot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("RootMotion", "BipedNaming", "foot"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] foot
void RootMotion::BipedNaming::_set_foot(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::_set_foot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming", "foot", value));
}
// Autogenerated method: RootMotion.BipedNaming..cctor
void RootMotion::BipedNaming::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: RootMotion.BipedNaming.GetBonesOfType
::ArrayW<::UnityEngine::Transform*> RootMotion::BipedNaming::GetBonesOfType(::RootMotion::BipedNaming::BoneType boneType, ::ArrayW<::UnityEngine::Transform*> bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::GetBonesOfType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "GetBonesOfType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneType), ::il2cpp_utils::ExtractType(bones)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Transform*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneType, bones);
}
// Autogenerated method: RootMotion.BipedNaming.GetBonesOfSide
::ArrayW<::UnityEngine::Transform*> RootMotion::BipedNaming::GetBonesOfSide(::RootMotion::BipedNaming::BoneSide boneSide, ::ArrayW<::UnityEngine::Transform*> bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::GetBonesOfSide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "GetBonesOfSide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneSide), ::il2cpp_utils::ExtractType(bones)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Transform*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneSide, bones);
}
// Autogenerated method: RootMotion.BipedNaming.GetBonesOfTypeAndSide
::ArrayW<::UnityEngine::Transform*> RootMotion::BipedNaming::GetBonesOfTypeAndSide(::RootMotion::BipedNaming::BoneType boneType, ::RootMotion::BipedNaming::BoneSide boneSide, ::ArrayW<::UnityEngine::Transform*> bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::GetBonesOfTypeAndSide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "GetBonesOfTypeAndSide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneType), ::il2cpp_utils::ExtractType(boneSide), ::il2cpp_utils::ExtractType(bones)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Transform*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneType, boneSide, bones);
}
// Autogenerated method: RootMotion.BipedNaming.GetFirstBoneOfTypeAndSide
::UnityEngine::Transform* RootMotion::BipedNaming::GetFirstBoneOfTypeAndSide(::RootMotion::BipedNaming::BoneType boneType, ::RootMotion::BipedNaming::BoneSide boneSide, ::ArrayW<::UnityEngine::Transform*> bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::GetFirstBoneOfTypeAndSide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "GetFirstBoneOfTypeAndSide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneType), ::il2cpp_utils::ExtractType(boneSide), ::il2cpp_utils::ExtractType(bones)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneType, boneSide, bones);
}
// Autogenerated method: RootMotion.BipedNaming.GetNamingMatch
::UnityEngine::Transform* RootMotion::BipedNaming::GetNamingMatch(::ArrayW<::UnityEngine::Transform*> transforms, ::ArrayW<::ArrayW<::StringW>> namings) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::GetNamingMatch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "GetNamingMatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transforms), ::il2cpp_utils::ExtractType(namings)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transforms, namings);
}
// Autogenerated method: RootMotion.BipedNaming.GetBoneType
::RootMotion::BipedNaming::BoneType RootMotion::BipedNaming::GetBoneType(::StringW boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::GetBoneType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "GetBoneType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneName)})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::BipedNaming::BoneType, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.GetBoneSide
::RootMotion::BipedNaming::BoneSide RootMotion::BipedNaming::GetBoneSide(::StringW boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::GetBoneSide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "GetBoneSide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneName)})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::BipedNaming::BoneSide, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.GetBone
::UnityEngine::Transform* RootMotion::BipedNaming::GetBone(::ArrayW<::UnityEngine::Transform*> transforms, ::RootMotion::BipedNaming::BoneType boneType, ::RootMotion::BipedNaming::BoneSide boneSide, ::ArrayW<::ArrayW<::StringW>> namings) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::GetBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "GetBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transforms), ::il2cpp_utils::ExtractType(boneType), ::il2cpp_utils::ExtractType(boneSide), ::il2cpp_utils::ExtractType(namings)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transforms, boneType, boneSide, namings);
}
// Autogenerated method: RootMotion.BipedNaming.isLeft
bool RootMotion::BipedNaming::isLeft(::StringW boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::isLeft");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isLeft", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.isRight
bool RootMotion::BipedNaming::isRight(::StringW boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::isRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.isSpine
bool RootMotion::BipedNaming::isSpine(::StringW boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::isSpine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isSpine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.isHead
bool RootMotion::BipedNaming::isHead(::StringW boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::isHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.isArm
bool RootMotion::BipedNaming::isArm(::StringW boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::isArm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isArm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.isLeg
bool RootMotion::BipedNaming::isLeg(::StringW boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::isLeg");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isLeg", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.isTail
bool RootMotion::BipedNaming::isTail(::StringW boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::isTail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isTail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.isEye
bool RootMotion::BipedNaming::isEye(::StringW boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::isEye");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isEye", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.isTypeExclude
bool RootMotion::BipedNaming::isTypeExclude(::StringW boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::isTypeExclude");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "isTypeExclude", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.matchesNaming
bool RootMotion::BipedNaming::matchesNaming(::StringW boneName, ::ArrayW<::StringW> namingConvention) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::matchesNaming");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "matchesNaming", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneName), ::il2cpp_utils::ExtractType(namingConvention)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneName, namingConvention);
}
// Autogenerated method: RootMotion.BipedNaming.excludesNaming
bool RootMotion::BipedNaming::excludesNaming(::StringW boneName, ::ArrayW<::StringW> namingConvention) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::excludesNaming");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "excludesNaming", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneName), ::il2cpp_utils::ExtractType(namingConvention)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneName, namingConvention);
}
// Autogenerated method: RootMotion.BipedNaming.matchesLastLetter
bool RootMotion::BipedNaming::matchesLastLetter(::StringW boneName, ::ArrayW<::StringW> namingConvention) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::matchesLastLetter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "matchesLastLetter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneName), ::il2cpp_utils::ExtractType(namingConvention)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneName, namingConvention);
}
// Autogenerated method: RootMotion.BipedNaming.LastLetterIs
bool RootMotion::BipedNaming::LastLetterIs(::StringW boneName, ::StringW letter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::LastLetterIs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "LastLetterIs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneName), ::il2cpp_utils::ExtractType(letter)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneName, letter);
}
// Autogenerated method: RootMotion.BipedNaming.firstLetter
::StringW RootMotion::BipedNaming::firstLetter(::StringW boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::firstLetter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "firstLetter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneName)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneName);
}
// Autogenerated method: RootMotion.BipedNaming.lastLetter
::StringW RootMotion::BipedNaming::lastLetter(::StringW boneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::lastLetter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedNaming", "lastLetter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneName)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneName);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.BipedNaming/RootMotion.BoneType
#include "RootMotion/BipedNaming.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/RootMotion.BoneType Unassigned
::RootMotion::BipedNaming::BoneType RootMotion::BipedNaming::BoneType::_get_Unassigned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneType::_get_Unassigned");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::BipedNaming::BoneType>("RootMotion", "BipedNaming/BoneType", "Unassigned"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/RootMotion.BoneType Unassigned
void RootMotion::BipedNaming::BoneType::_set_Unassigned(::RootMotion::BipedNaming::BoneType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneType::_set_Unassigned");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneType", "Unassigned", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/RootMotion.BoneType Spine
::RootMotion::BipedNaming::BoneType RootMotion::BipedNaming::BoneType::_get_Spine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneType::_get_Spine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::BipedNaming::BoneType>("RootMotion", "BipedNaming/BoneType", "Spine"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/RootMotion.BoneType Spine
void RootMotion::BipedNaming::BoneType::_set_Spine(::RootMotion::BipedNaming::BoneType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneType::_set_Spine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneType", "Spine", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/RootMotion.BoneType Head
::RootMotion::BipedNaming::BoneType RootMotion::BipedNaming::BoneType::_get_Head() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneType::_get_Head");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::BipedNaming::BoneType>("RootMotion", "BipedNaming/BoneType", "Head"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/RootMotion.BoneType Head
void RootMotion::BipedNaming::BoneType::_set_Head(::RootMotion::BipedNaming::BoneType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneType::_set_Head");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneType", "Head", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/RootMotion.BoneType Arm
::RootMotion::BipedNaming::BoneType RootMotion::BipedNaming::BoneType::_get_Arm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneType::_get_Arm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::BipedNaming::BoneType>("RootMotion", "BipedNaming/BoneType", "Arm"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/RootMotion.BoneType Arm
void RootMotion::BipedNaming::BoneType::_set_Arm(::RootMotion::BipedNaming::BoneType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneType::_set_Arm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneType", "Arm", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/RootMotion.BoneType Leg
::RootMotion::BipedNaming::BoneType RootMotion::BipedNaming::BoneType::_get_Leg() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneType::_get_Leg");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::BipedNaming::BoneType>("RootMotion", "BipedNaming/BoneType", "Leg"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/RootMotion.BoneType Leg
void RootMotion::BipedNaming::BoneType::_set_Leg(::RootMotion::BipedNaming::BoneType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneType::_set_Leg");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneType", "Leg", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/RootMotion.BoneType Tail
::RootMotion::BipedNaming::BoneType RootMotion::BipedNaming::BoneType::_get_Tail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneType::_get_Tail");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::BipedNaming::BoneType>("RootMotion", "BipedNaming/BoneType", "Tail"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/RootMotion.BoneType Tail
void RootMotion::BipedNaming::BoneType::_set_Tail(::RootMotion::BipedNaming::BoneType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneType::_set_Tail");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneType", "Tail", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/RootMotion.BoneType Eye
::RootMotion::BipedNaming::BoneType RootMotion::BipedNaming::BoneType::_get_Eye() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneType::_get_Eye");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::BipedNaming::BoneType>("RootMotion", "BipedNaming/BoneType", "Eye"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/RootMotion.BoneType Eye
void RootMotion::BipedNaming::BoneType::_set_Eye(::RootMotion::BipedNaming::BoneType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneType::_set_Eye");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneType", "Eye", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& RootMotion::BipedNaming::BoneType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.BipedNaming/RootMotion.BoneSide
#include "RootMotion/BipedNaming.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/RootMotion.BoneSide Center
::RootMotion::BipedNaming::BoneSide RootMotion::BipedNaming::BoneSide::_get_Center() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneSide::_get_Center");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::BipedNaming::BoneSide>("RootMotion", "BipedNaming/BoneSide", "Center"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/RootMotion.BoneSide Center
void RootMotion::BipedNaming::BoneSide::_set_Center(::RootMotion::BipedNaming::BoneSide value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneSide::_set_Center");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneSide", "Center", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/RootMotion.BoneSide Left
::RootMotion::BipedNaming::BoneSide RootMotion::BipedNaming::BoneSide::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneSide::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::BipedNaming::BoneSide>("RootMotion", "BipedNaming/BoneSide", "Left"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/RootMotion.BoneSide Left
void RootMotion::BipedNaming::BoneSide::_set_Left(::RootMotion::BipedNaming::BoneSide value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneSide::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneSide", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.BipedNaming/RootMotion.BoneSide Right
::RootMotion::BipedNaming::BoneSide RootMotion::BipedNaming::BoneSide::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneSide::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::BipedNaming::BoneSide>("RootMotion", "BipedNaming/BoneSide", "Right"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.BipedNaming/RootMotion.BoneSide Right
void RootMotion::BipedNaming::BoneSide::_set_Right(::RootMotion::BipedNaming::BoneSide value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneSide::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "BipedNaming/BoneSide", "Right", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& RootMotion::BipedNaming::BoneSide::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedNaming::BoneSide::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.BipedReferences
#include "RootMotion/BipedReferences.hpp"
// Including type: RootMotion.BipedReferences/RootMotion.AutoDetectParams
#include "RootMotion/BipedReferences_AutoDetectParams.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform root
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::BipedReferences::dyn_root() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::dyn_root");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "root"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform pelvis
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::BipedReferences::dyn_pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::dyn_pelvis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pelvis"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftThigh
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::BipedReferences::dyn_leftThigh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::dyn_leftThigh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftThigh"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftCalf
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::BipedReferences::dyn_leftCalf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::dyn_leftCalf");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftCalf"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftFoot
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::BipedReferences::dyn_leftFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::dyn_leftFoot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftFoot"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightThigh
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::BipedReferences::dyn_rightThigh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::dyn_rightThigh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightThigh"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightCalf
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::BipedReferences::dyn_rightCalf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::dyn_rightCalf");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightCalf"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightFoot
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::BipedReferences::dyn_rightFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::dyn_rightFoot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightFoot"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftUpperArm
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::BipedReferences::dyn_leftUpperArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::dyn_leftUpperArm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftUpperArm"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftForearm
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::BipedReferences::dyn_leftForearm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::dyn_leftForearm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftForearm"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftHand
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::BipedReferences::dyn_leftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::dyn_leftHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHand"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightUpperArm
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::BipedReferences::dyn_rightUpperArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::dyn_rightUpperArm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightUpperArm"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightForearm
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::BipedReferences::dyn_rightForearm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::dyn_rightForearm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightForearm"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightHand
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::BipedReferences::dyn_rightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::dyn_rightHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHand"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform head
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::BipedReferences::dyn_head() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::dyn_head");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "head"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] spine
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& RootMotion::BipedReferences::dyn_spine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::dyn_spine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spine"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] eyes
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& RootMotion::BipedReferences::dyn_eyes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::dyn_eyes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "eyes"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.BipedReferences.get_isFilled
bool RootMotion::BipedReferences::get_isFilled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::get_isFilled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFilled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.BipedReferences.get_isEmpty
bool RootMotion::BipedReferences::get_isEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::get_isEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.BipedReferences.IsEmpty
bool RootMotion::BipedReferences::IsEmpty(bool includeRoot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::IsEmpty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(includeRoot)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, includeRoot);
}
// Autogenerated method: RootMotion.BipedReferences.Contains
bool RootMotion::BipedReferences::Contains(::UnityEngine::Transform* t, bool ignoreRoot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::Contains");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(ignoreRoot)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, t, ignoreRoot);
}
// Autogenerated method: RootMotion.BipedReferences.AutoDetectReferences
bool RootMotion::BipedReferences::AutoDetectReferences(ByRef<::RootMotion::BipedReferences*> references, ::UnityEngine::Transform* root, ::RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::AutoDetectReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "AutoDetectReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(autoDetectParams)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(references), root, autoDetectParams);
}
// Autogenerated method: RootMotion.BipedReferences.DetectReferencesByNaming
void RootMotion::BipedReferences::DetectReferencesByNaming(ByRef<::RootMotion::BipedReferences*> references, ::UnityEngine::Transform* root, ::RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::DetectReferencesByNaming");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "DetectReferencesByNaming", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(autoDetectParams)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(references), root, autoDetectParams);
}
// Autogenerated method: RootMotion.BipedReferences.AssignHumanoidReferences
void RootMotion::BipedReferences::AssignHumanoidReferences(ByRef<::RootMotion::BipedReferences*> references, ::UnityEngine::Animator* animator, ::RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::AssignHumanoidReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "AssignHumanoidReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(animator), ::il2cpp_utils::ExtractType(autoDetectParams)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(references), animator, autoDetectParams);
}
// Autogenerated method: RootMotion.BipedReferences.SetupError
bool RootMotion::BipedReferences::SetupError(::RootMotion::BipedReferences* references, ByRef<::StringW> errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::SetupError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "SetupError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, references, byref(errorMessage));
}
// Autogenerated method: RootMotion.BipedReferences.SetupWarning
bool RootMotion::BipedReferences::SetupWarning(::RootMotion::BipedReferences* references, ByRef<::StringW> warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::SetupWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "SetupWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(warningMessage)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, references, byref(warningMessage));
}
// Autogenerated method: RootMotion.BipedReferences.IsNeckBone
bool RootMotion::BipedReferences::IsNeckBone(::UnityEngine::Transform* bone, ::UnityEngine::Transform* leftUpperArm) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::IsNeckBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "IsNeckBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone), ::il2cpp_utils::ExtractType(leftUpperArm)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bone, leftUpperArm);
}
// Autogenerated method: RootMotion.BipedReferences.AddBoneToEyes
bool RootMotion::BipedReferences::AddBoneToEyes(::UnityEngine::Transform* bone, ByRef<::RootMotion::BipedReferences*> references, ::RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::AddBoneToEyes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "AddBoneToEyes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone), ::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(autoDetectParams)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bone, byref(references), autoDetectParams);
}
// Autogenerated method: RootMotion.BipedReferences.AddBoneToSpine
bool RootMotion::BipedReferences::AddBoneToSpine(::UnityEngine::Transform* bone, ByRef<::RootMotion::BipedReferences*> references, ::RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::AddBoneToSpine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "AddBoneToSpine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone), ::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(autoDetectParams)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bone, byref(references), autoDetectParams);
}
// Autogenerated method: RootMotion.BipedReferences.DetectLimb
void RootMotion::BipedReferences::DetectLimb(::RootMotion::BipedNaming::BoneType boneType, ::RootMotion::BipedNaming::BoneSide boneSide, ByRef<::UnityEngine::Transform*> firstBone, ByRef<::UnityEngine::Transform*> secondBone, ByRef<::UnityEngine::Transform*> lastBone, ::ArrayW<::UnityEngine::Transform*> transforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::DetectLimb");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "DetectLimb", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneType), ::il2cpp_utils::ExtractType(boneSide), ::il2cpp_utils::ExtractType(firstBone), ::il2cpp_utils::ExtractType(secondBone), ::il2cpp_utils::ExtractType(lastBone), ::il2cpp_utils::ExtractType(transforms)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boneType, boneSide, byref(firstBone), byref(secondBone), byref(lastBone), transforms);
}
// Autogenerated method: RootMotion.BipedReferences.AddBoneToHierarchy
void RootMotion::BipedReferences::AddBoneToHierarchy(ByRef<::ArrayW<::UnityEngine::Transform*>> bones, ::UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::AddBoneToHierarchy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "AddBoneToHierarchy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(transform)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(bones), transform);
}
// Autogenerated method: RootMotion.BipedReferences.LimbError
bool RootMotion::BipedReferences::LimbError(::UnityEngine::Transform* bone1, ::UnityEngine::Transform* bone2, ::UnityEngine::Transform* bone3, ByRef<::StringW> errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::LimbError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "LimbError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3), ::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bone1, bone2, bone3, byref(errorMessage));
}
// Autogenerated method: RootMotion.BipedReferences.LimbWarning
bool RootMotion::BipedReferences::LimbWarning(::UnityEngine::Transform* bone1, ::UnityEngine::Transform* bone2, ::UnityEngine::Transform* bone3, ByRef<::StringW> warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::LimbWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "LimbWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3), ::il2cpp_utils::ExtractType(warningMessage)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bone1, bone2, bone3, byref(warningMessage));
}
// Autogenerated method: RootMotion.BipedReferences.SpineError
bool RootMotion::BipedReferences::SpineError(::RootMotion::BipedReferences* references, ByRef<::StringW> errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::SpineError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "SpineError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, references, byref(errorMessage));
}
// Autogenerated method: RootMotion.BipedReferences.SpineWarning
bool RootMotion::BipedReferences::SpineWarning(::RootMotion::BipedReferences* references, ByRef<::StringW> warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::SpineWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "SpineWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(warningMessage)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, references, byref(warningMessage));
}
// Autogenerated method: RootMotion.BipedReferences.EyesError
bool RootMotion::BipedReferences::EyesError(::RootMotion::BipedReferences* references, ByRef<::StringW> errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::EyesError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "EyesError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, references, byref(errorMessage));
}
// Autogenerated method: RootMotion.BipedReferences.EyesWarning
bool RootMotion::BipedReferences::EyesWarning(::RootMotion::BipedReferences* references, ByRef<::StringW> warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::EyesWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "EyesWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(warningMessage)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, references, byref(warningMessage));
}
// Autogenerated method: RootMotion.BipedReferences.RootHeightWarning
bool RootMotion::BipedReferences::RootHeightWarning(::RootMotion::BipedReferences* references, ByRef<::StringW> warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::RootHeightWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "RootHeightWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(warningMessage)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, references, byref(warningMessage));
}
// Autogenerated method: RootMotion.BipedReferences.FacingAxisWarning
bool RootMotion::BipedReferences::FacingAxisWarning(::RootMotion::BipedReferences* references, ByRef<::StringW> warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::FacingAxisWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "FacingAxisWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(warningMessage)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, references, byref(warningMessage));
}
// Autogenerated method: RootMotion.BipedReferences.GetVerticalOffset
float RootMotion::BipedReferences::GetVerticalOffset(::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::GetVerticalOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "GetVerticalOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, p1, p2, rotation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.BipedReferences/RootMotion.AutoDetectParams
#include "RootMotion/BipedReferences_AutoDetectParams.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean legsParentInSpine
[[deprecated("Use field access instead!")]] bool& RootMotion::BipedReferences::AutoDetectParams::dyn_legsParentInSpine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::AutoDetectParams::dyn_legsParentInSpine");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "legsParentInSpine"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean includeEyes
[[deprecated("Use field access instead!")]] bool& RootMotion::BipedReferences::AutoDetectParams::dyn_includeEyes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::AutoDetectParams::dyn_includeEyes");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "includeEyes"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.BipedReferences/RootMotion.AutoDetectParams.get_Default
::RootMotion::BipedReferences::AutoDetectParams RootMotion::BipedReferences::AutoDetectParams::get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BipedReferences::AutoDetectParams::get_Default");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences/AutoDetectParams", "get_Default", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::BipedReferences::AutoDetectParams, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: RootMotion.BipedReferences/RootMotion.AutoDetectParams..ctor
// ABORTED elsewhere.  RootMotion::BipedReferences::AutoDetectParams::AutoDetectParams(bool legsParentInSpine, bool includeEyes)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Comments
#include "RootMotion/Comments.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String text
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::Comments::dyn_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Comments::dyn_text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "text"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.DemoGUIMessage
#include "RootMotion/DemoGUIMessage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String text
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::DemoGUIMessage::dyn_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::DemoGUIMessage::dyn_text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "text"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& RootMotion::DemoGUIMessage::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::DemoGUIMessage::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.DemoGUIMessage.OnGUI
void RootMotion::DemoGUIMessage::OnGUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::DemoGUIMessage::OnGUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Hierarchy
#include "RootMotion/Hierarchy.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.Hierarchy.HierarchyIsValid
bool RootMotion::Hierarchy::HierarchyIsValid(::ArrayW<::UnityEngine::Transform*> bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Hierarchy::HierarchyIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "HierarchyIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bones);
}
// Autogenerated method: RootMotion.Hierarchy.ContainsDuplicate
::UnityEngine::Object* RootMotion::Hierarchy::ContainsDuplicate(::ArrayW<::UnityEngine::Object*> objects) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Hierarchy::ContainsDuplicate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "ContainsDuplicate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(objects)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Object*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, objects);
}
// Autogenerated method: RootMotion.Hierarchy.IsAncestor
bool RootMotion::Hierarchy::IsAncestor(::UnityEngine::Transform* transform, ::UnityEngine::Transform* ancestor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Hierarchy::IsAncestor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "IsAncestor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(ancestor)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transform, ancestor);
}
// Autogenerated method: RootMotion.Hierarchy.ContainsChild
bool RootMotion::Hierarchy::ContainsChild(::UnityEngine::Transform* transform, ::UnityEngine::Transform* child) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Hierarchy::ContainsChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "ContainsChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(child)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transform, child);
}
// Autogenerated method: RootMotion.Hierarchy.AddAncestors
void RootMotion::Hierarchy::AddAncestors(::UnityEngine::Transform* transform, ::UnityEngine::Transform* blocker, ByRef<::ArrayW<::UnityEngine::Transform*>> array) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Hierarchy::AddAncestors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "AddAncestors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(blocker), ::il2cpp_utils::ExtractType(array)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transform, blocker, byref(array));
}
// Autogenerated method: RootMotion.Hierarchy.GetAncestor
::UnityEngine::Transform* RootMotion::Hierarchy::GetAncestor(::UnityEngine::Transform* transform, int minChildCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Hierarchy::GetAncestor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "GetAncestor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(minChildCount)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transform, minChildCount);
}
// Autogenerated method: RootMotion.Hierarchy.GetFirstCommonAncestor
::UnityEngine::Transform* RootMotion::Hierarchy::GetFirstCommonAncestor(::UnityEngine::Transform* t1, ::UnityEngine::Transform* t2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Hierarchy::GetFirstCommonAncestor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "GetFirstCommonAncestor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t1), ::il2cpp_utils::ExtractType(t2)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t1, t2);
}
// Autogenerated method: RootMotion.Hierarchy.GetFirstCommonAncestor
::UnityEngine::Transform* RootMotion::Hierarchy::GetFirstCommonAncestor(::ArrayW<::UnityEngine::Transform*> transforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Hierarchy::GetFirstCommonAncestor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "GetFirstCommonAncestor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transforms)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transforms);
}
// Autogenerated method: RootMotion.Hierarchy.GetFirstCommonAncestorRecursive
::UnityEngine::Transform* RootMotion::Hierarchy::GetFirstCommonAncestorRecursive(::UnityEngine::Transform* transform, ::ArrayW<::UnityEngine::Transform*> transforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Hierarchy::GetFirstCommonAncestorRecursive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "GetFirstCommonAncestorRecursive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(transforms)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transform, transforms);
}
// Autogenerated method: RootMotion.Hierarchy.IsCommonAncestor
bool RootMotion::Hierarchy::IsCommonAncestor(::UnityEngine::Transform* transform, ::ArrayW<::UnityEngine::Transform*> transforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Hierarchy::IsCommonAncestor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "IsCommonAncestor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(transforms)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transform, transforms);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.InspectorComment
#include "RootMotion/InspectorComment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String name
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::InspectorComment::dyn_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InspectorComment::dyn_name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String color
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::InspectorComment::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InspectorComment::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.InterpolationMode
#include "RootMotion/InterpolationMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode None
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "None"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode None
void RootMotion::InterpolationMode::_set_None(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "None", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InOutCubic
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InOutCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_InOutCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InOutCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InOutCubic
void RootMotion::InterpolationMode::_set_InOutCubic(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_InOutCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InOutCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InOutQuintic
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InOutQuintic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_InOutQuintic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InOutQuintic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InOutQuintic
void RootMotion::InterpolationMode::_set_InOutQuintic(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_InOutQuintic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InOutQuintic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InOutSine
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InOutSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_InOutSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InOutSine"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InOutSine
void RootMotion::InterpolationMode::_set_InOutSine(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_InOutSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InOutSine", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InQuintic
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InQuintic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_InQuintic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InQuintic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InQuintic
void RootMotion::InterpolationMode::_set_InQuintic(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_InQuintic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InQuintic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InQuartic
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InQuartic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_InQuartic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InQuartic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InQuartic
void RootMotion::InterpolationMode::_set_InQuartic(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_InQuartic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InQuartic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InCubic
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_InCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InCubic
void RootMotion::InterpolationMode::_set_InCubic(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_InCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InQuadratic
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InQuadratic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_InQuadratic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InQuadratic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InQuadratic
void RootMotion::InterpolationMode::_set_InQuadratic(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_InQuadratic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InQuadratic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InElastic
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_InElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InElastic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InElastic
void RootMotion::InterpolationMode::_set_InElastic(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_InElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InElastic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InElasticSmall
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InElasticSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_InElasticSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InElasticSmall"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InElasticSmall
void RootMotion::InterpolationMode::_set_InElasticSmall(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_InElasticSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InElasticSmall", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InElasticBig
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InElasticBig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_InElasticBig");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InElasticBig"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InElasticBig
void RootMotion::InterpolationMode::_set_InElasticBig(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_InElasticBig");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InElasticBig", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InSine
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_InSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InSine"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InSine
void RootMotion::InterpolationMode::_set_InSine(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_InSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InSine", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InBack
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_InBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InBack"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InBack
void RootMotion::InterpolationMode::_set_InBack(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_InBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InBack", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutQuintic
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutQuintic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_OutQuintic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutQuintic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutQuintic
void RootMotion::InterpolationMode::_set_OutQuintic(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_OutQuintic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutQuintic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutQuartic
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutQuartic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_OutQuartic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutQuartic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutQuartic
void RootMotion::InterpolationMode::_set_OutQuartic(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_OutQuartic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutQuartic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutCubic
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_OutCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutCubic
void RootMotion::InterpolationMode::_set_OutCubic(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_OutCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutInCubic
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutInCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_OutInCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutInCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutInCubic
void RootMotion::InterpolationMode::_set_OutInCubic(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_OutInCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutInCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutInQuartic
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutInQuartic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_OutInQuartic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutInQuartic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutInQuartic
void RootMotion::InterpolationMode::_set_OutInQuartic(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_OutInQuartic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutInQuartic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutElastic
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_OutElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutElastic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutElastic
void RootMotion::InterpolationMode::_set_OutElastic(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_OutElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutElastic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutElasticSmall
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutElasticSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_OutElasticSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutElasticSmall"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutElasticSmall
void RootMotion::InterpolationMode::_set_OutElasticSmall(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_OutElasticSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutElasticSmall", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutElasticBig
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutElasticBig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_OutElasticBig");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutElasticBig"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutElasticBig
void RootMotion::InterpolationMode::_set_OutElasticBig(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_OutElasticBig");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutElasticBig", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutSine
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_OutSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutSine"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutSine
void RootMotion::InterpolationMode::_set_OutSine(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_OutSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutSine", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutBack
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_OutBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutBack"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutBack
void RootMotion::InterpolationMode::_set_OutBack(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_OutBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutBack", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutBackCubic
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutBackCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_OutBackCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutBackCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutBackCubic
void RootMotion::InterpolationMode::_set_OutBackCubic(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_OutBackCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutBackCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutBackQuartic
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutBackQuartic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_OutBackQuartic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutBackQuartic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutBackQuartic
void RootMotion::InterpolationMode::_set_OutBackQuartic(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_OutBackQuartic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutBackQuartic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode BackInCubic
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_BackInCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_BackInCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "BackInCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode BackInCubic
void RootMotion::InterpolationMode::_set_BackInCubic(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_BackInCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "BackInCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode BackInQuartic
::RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_BackInQuartic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_get_BackInQuartic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "BackInQuartic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode BackInQuartic
void RootMotion::InterpolationMode::_set_BackInQuartic(::RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::_set_BackInQuartic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "BackInQuartic", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& RootMotion::InterpolationMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::InterpolationMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Interp
#include "RootMotion/Interp.hpp"
// Including type: RootMotion.InterpolationMode
#include "RootMotion/InterpolationMode.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.Interp.Float
float RootMotion::Interp::Float(float t, ::RootMotion::InterpolationMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::Float");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "Float", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, mode);
}
// Autogenerated method: RootMotion.Interp.V3
::UnityEngine::Vector3 RootMotion::Interp::V3(::UnityEngine::Vector3 v1, ::UnityEngine::Vector3 v2, float t, ::RootMotion::InterpolationMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::V3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "V3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v1), ::il2cpp_utils::ExtractType(v2), ::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v1, v2, t, mode);
}
// Autogenerated method: RootMotion.Interp.LerpValue
float RootMotion::Interp::LerpValue(float value, float target, float increaseSpeed, float decreaseSpeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::LerpValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "LerpValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(increaseSpeed), ::il2cpp_utils::ExtractType(decreaseSpeed)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value, target, increaseSpeed, decreaseSpeed);
}
// Autogenerated method: RootMotion.Interp.None
float RootMotion::Interp::None(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::None");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "None", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InOutCubic
float RootMotion::Interp::InOutCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::InOutCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InOutCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InOutQuintic
float RootMotion::Interp::InOutQuintic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::InOutQuintic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InOutQuintic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InQuintic
float RootMotion::Interp::InQuintic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::InQuintic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InQuintic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InQuartic
float RootMotion::Interp::InQuartic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::InQuartic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InQuartic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InCubic
float RootMotion::Interp::InCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::InCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InQuadratic
float RootMotion::Interp::InQuadratic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::InQuadratic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InQuadratic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutQuintic
float RootMotion::Interp::OutQuintic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::OutQuintic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutQuintic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutQuartic
float RootMotion::Interp::OutQuartic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::OutQuartic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutQuartic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutCubic
float RootMotion::Interp::OutCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::OutCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutInCubic
float RootMotion::Interp::OutInCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::OutInCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutInCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutInQuartic
float RootMotion::Interp::OutInQuartic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::OutInQuartic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutInQuartic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.BackInCubic
float RootMotion::Interp::BackInCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::BackInCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "BackInCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.BackInQuartic
float RootMotion::Interp::BackInQuartic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::BackInQuartic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "BackInQuartic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutBackCubic
float RootMotion::Interp::OutBackCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::OutBackCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutBackCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutBackQuartic
float RootMotion::Interp::OutBackQuartic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::OutBackQuartic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutBackQuartic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutElasticSmall
float RootMotion::Interp::OutElasticSmall(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::OutElasticSmall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutElasticSmall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutElasticBig
float RootMotion::Interp::OutElasticBig(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::OutElasticBig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutElasticBig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InElasticSmall
float RootMotion::Interp::InElasticSmall(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::InElasticSmall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InElasticSmall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InElasticBig
float RootMotion::Interp::InElasticBig(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::InElasticBig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InElasticBig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InSine
float RootMotion::Interp::InSine(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::InSine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InSine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutSine
float RootMotion::Interp::OutSine(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::OutSine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutSine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InOutSine
float RootMotion::Interp::InOutSine(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::InOutSine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InOutSine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InElastic
float RootMotion::Interp::InElastic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::InElastic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InElastic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutElastic
float RootMotion::Interp::OutElastic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::OutElastic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutElastic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InBack
float RootMotion::Interp::InBack(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::InBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutBack
float RootMotion::Interp::OutBack(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Interp::OutBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.LargeHeader
#include "RootMotion/LargeHeader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String name
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::LargeHeader::dyn_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::LargeHeader::dyn_name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String color
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::LargeHeader::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::LargeHeader::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.LayerMaskExtensions
#include "RootMotion/LayerMaskExtensions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.LayerMaskExtensions.Contains
bool RootMotion::LayerMaskExtensions::Contains(::UnityEngine::LayerMask mask, int layer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::LayerMaskExtensions::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask), ::il2cpp_utils::ExtractType(layer)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, mask, layer);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.Create
::UnityEngine::LayerMask RootMotion::LayerMaskExtensions::Create(::ArrayW<::StringW> layerNames) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::LayerMaskExtensions::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerNames)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::LayerMask, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, layerNames);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.Create
::UnityEngine::LayerMask RootMotion::LayerMaskExtensions::Create(::ArrayW<int> layerNumbers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::LayerMaskExtensions::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerNumbers)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::LayerMask, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, layerNumbers);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.NamesToMask
::UnityEngine::LayerMask RootMotion::LayerMaskExtensions::NamesToMask(::ArrayW<::StringW> layerNames) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::LayerMaskExtensions::NamesToMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "NamesToMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerNames)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::LayerMask, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, layerNames);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.LayerNumbersToMask
::UnityEngine::LayerMask RootMotion::LayerMaskExtensions::LayerNumbersToMask(::ArrayW<int> layerNumbers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::LayerMaskExtensions::LayerNumbersToMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "LayerNumbersToMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerNumbers)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::LayerMask, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, layerNumbers);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.Inverse
::UnityEngine::LayerMask RootMotion::LayerMaskExtensions::Inverse(::UnityEngine::LayerMask original) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::LayerMaskExtensions::Inverse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "Inverse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::LayerMask, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, original);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.AddToMask
::UnityEngine::LayerMask RootMotion::LayerMaskExtensions::AddToMask(::UnityEngine::LayerMask original, ::ArrayW<::StringW> layerNames) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::LayerMaskExtensions::AddToMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "AddToMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original), ::il2cpp_utils::ExtractType(layerNames)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::LayerMask, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, original, layerNames);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.RemoveFromMask
::UnityEngine::LayerMask RootMotion::LayerMaskExtensions::RemoveFromMask(::UnityEngine::LayerMask original, ::ArrayW<::StringW> layerNames) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::LayerMaskExtensions::RemoveFromMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "RemoveFromMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original), ::il2cpp_utils::ExtractType(layerNames)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::LayerMask, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, original, layerNames);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.MaskToNames
::ArrayW<::StringW> RootMotion::LayerMaskExtensions::MaskToNames(::UnityEngine::LayerMask original) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::LayerMaskExtensions::MaskToNames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "MaskToNames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::StringW>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, original);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.MaskToNumbers
::ArrayW<int> RootMotion::LayerMaskExtensions::MaskToNumbers(::UnityEngine::LayerMask original) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::LayerMaskExtensions::MaskToNumbers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "MaskToNumbers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<int>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, original);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.MaskToString
::StringW RootMotion::LayerMaskExtensions::MaskToString(::UnityEngine::LayerMask original) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::LayerMaskExtensions::MaskToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "MaskToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, original);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.MaskToString
::StringW RootMotion::LayerMaskExtensions::MaskToString(::UnityEngine::LayerMask original, ::StringW delimiter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::LayerMaskExtensions::MaskToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "MaskToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original), ::il2cpp_utils::ExtractType(delimiter)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, original, delimiter);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.QuaTools
#include "RootMotion/QuaTools.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.QuaTools.Lerp
::UnityEngine::Quaternion RootMotion::QuaTools::Lerp(::UnityEngine::Quaternion fromRotation, ::UnityEngine::Quaternion toRotation, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::QuaTools::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromRotation), ::il2cpp_utils::ExtractType(toRotation), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, fromRotation, toRotation, weight);
}
// Autogenerated method: RootMotion.QuaTools.Slerp
::UnityEngine::Quaternion RootMotion::QuaTools::Slerp(::UnityEngine::Quaternion fromRotation, ::UnityEngine::Quaternion toRotation, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::QuaTools::Slerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "Slerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromRotation), ::il2cpp_utils::ExtractType(toRotation), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, fromRotation, toRotation, weight);
}
// Autogenerated method: RootMotion.QuaTools.LinearBlend
::UnityEngine::Quaternion RootMotion::QuaTools::LinearBlend(::UnityEngine::Quaternion q, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::QuaTools::LinearBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "LinearBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, q, weight);
}
// Autogenerated method: RootMotion.QuaTools.SphericalBlend
::UnityEngine::Quaternion RootMotion::QuaTools::SphericalBlend(::UnityEngine::Quaternion q, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::QuaTools::SphericalBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "SphericalBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, q, weight);
}
// Autogenerated method: RootMotion.QuaTools.FromToAroundAxis
::UnityEngine::Quaternion RootMotion::QuaTools::FromToAroundAxis(::UnityEngine::Vector3 fromDirection, ::UnityEngine::Vector3 toDirection, ::UnityEngine::Vector3 axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::QuaTools::FromToAroundAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "FromToAroundAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromDirection), ::il2cpp_utils::ExtractType(toDirection), ::il2cpp_utils::ExtractType(axis)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, fromDirection, toDirection, axis);
}
// Autogenerated method: RootMotion.QuaTools.RotationToLocalSpace
::UnityEngine::Quaternion RootMotion::QuaTools::RotationToLocalSpace(::UnityEngine::Quaternion space, ::UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::QuaTools::RotationToLocalSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "RotationToLocalSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(space), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, space, rotation);
}
// Autogenerated method: RootMotion.QuaTools.FromToRotation
::UnityEngine::Quaternion RootMotion::QuaTools::FromToRotation(::UnityEngine::Quaternion from, ::UnityEngine::Quaternion to) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::QuaTools::FromToRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "FromToRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, from, to);
}
// Autogenerated method: RootMotion.QuaTools.GetAxis
::UnityEngine::Vector3 RootMotion::QuaTools::GetAxis(::UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::QuaTools::GetAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "GetAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated method: RootMotion.QuaTools.ClampRotation
::UnityEngine::Quaternion RootMotion::QuaTools::ClampRotation(::UnityEngine::Quaternion rotation, float clampWeight, int clampSmoothing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::QuaTools::ClampRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "ClampRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(clampSmoothing)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, rotation, clampWeight, clampSmoothing);
}
// Autogenerated method: RootMotion.QuaTools.ClampAngle
float RootMotion::QuaTools::ClampAngle(float angle, float clampWeight, int clampSmoothing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::QuaTools::ClampAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "ClampAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(angle), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(clampSmoothing)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, angle, clampWeight, clampSmoothing);
}
// Autogenerated method: RootMotion.QuaTools.MatchRotation
::UnityEngine::Quaternion RootMotion::QuaTools::MatchRotation(::UnityEngine::Quaternion targetRotation, ::UnityEngine::Vector3 targetforwardAxis, ::UnityEngine::Vector3 targetUpAxis, ::UnityEngine::Vector3 forwardAxis, ::UnityEngine::Vector3 upAxis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::QuaTools::MatchRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "MatchRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetRotation), ::il2cpp_utils::ExtractType(targetforwardAxis), ::il2cpp_utils::ExtractType(targetUpAxis), ::il2cpp_utils::ExtractType(forwardAxis), ::il2cpp_utils::ExtractType(upAxis)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, targetRotation, targetforwardAxis, targetUpAxis, forwardAxis, upAxis);
}
// Autogenerated method: RootMotion.QuaTools.ToBiPolar
::UnityEngine::Vector3 RootMotion::QuaTools::ToBiPolar(::UnityEngine::Vector3 euler) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::QuaTools::ToBiPolar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "ToBiPolar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(euler)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, euler);
}
// Autogenerated method: RootMotion.QuaTools.ToBiPolar
float RootMotion::QuaTools::ToBiPolar(float angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::QuaTools::ToBiPolar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "ToBiPolar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(angle)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, angle);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.SolverManager
#include "RootMotion/SolverManager.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean fixTransforms
[[deprecated("Use field access instead!")]] bool& RootMotion::SolverManager::dyn_fixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::dyn_fixTransforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fixTransforms"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animator animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& RootMotion::SolverManager::dyn_animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::dyn_animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animation legacy
[[deprecated("Use field access instead!")]] ::UnityEngine::Animation*& RootMotion::SolverManager::dyn_legacy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::dyn_legacy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "legacy"))->offset;
  return *reinterpret_cast<::UnityEngine::Animation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean updateFrame
[[deprecated("Use field access instead!")]] bool& RootMotion::SolverManager::dyn_updateFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::dyn_updateFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "updateFrame"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean componentInitiated
[[deprecated("Use field access instead!")]] bool& RootMotion::SolverManager::dyn_componentInitiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::dyn_componentInitiated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "componentInitiated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean skipSolverUpdate
[[deprecated("Use field access instead!")]] bool& RootMotion::SolverManager::dyn_skipSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::dyn_skipSolverUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "skipSolverUpdate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.SolverManager.get_animatePhysics
bool RootMotion::SolverManager::get_animatePhysics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::get_animatePhysics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animatePhysics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.get_isAnimated
bool RootMotion::SolverManager::get_isAnimated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::get_isAnimated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAnimated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.Disable
void RootMotion::SolverManager::Disable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::Disable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.InitiateSolver
void RootMotion::SolverManager::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.UpdateSolver
void RootMotion::SolverManager::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.FixTransforms
void RootMotion::SolverManager::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.OnDisable
void RootMotion::SolverManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.Start
void RootMotion::SolverManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.Initiate
void RootMotion::SolverManager::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.Update
void RootMotion::SolverManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.FindAnimatorRecursive
void RootMotion::SolverManager::FindAnimatorRecursive(::UnityEngine::Transform* t, bool findInChildren) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::FindAnimatorRecursive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindAnimatorRecursive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(findInChildren)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t, findInChildren);
}
// Autogenerated method: RootMotion.SolverManager.FixedUpdate
void RootMotion::SolverManager::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.LateUpdate
void RootMotion::SolverManager::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.UpdateSolverExternal
void RootMotion::SolverManager::UpdateSolverExternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::SolverManager::UpdateSolverExternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolverExternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.TriggerEventBroadcaster
#include "RootMotion/TriggerEventBroadcaster.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject target
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& RootMotion::TriggerEventBroadcaster::dyn_target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::TriggerEventBroadcaster::dyn_target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "target"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.TriggerEventBroadcaster.OnTriggerEnter
void RootMotion::TriggerEventBroadcaster::OnTriggerEnter(::UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::TriggerEventBroadcaster::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collider)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collider);
}
// Autogenerated method: RootMotion.TriggerEventBroadcaster.OnTriggerStay
void RootMotion::TriggerEventBroadcaster::OnTriggerStay(::UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::TriggerEventBroadcaster::OnTriggerStay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerStay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collider)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collider);
}
// Autogenerated method: RootMotion.TriggerEventBroadcaster.OnTriggerExit
void RootMotion::TriggerEventBroadcaster::OnTriggerExit(::UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::TriggerEventBroadcaster::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collider)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collider);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.V3Tools
#include "RootMotion/V3Tools.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.V3Tools.Lerp
::UnityEngine::Vector3 RootMotion::V3Tools::Lerp(::UnityEngine::Vector3 fromVector, ::UnityEngine::Vector3 toVector, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::V3Tools::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromVector), ::il2cpp_utils::ExtractType(toVector), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, fromVector, toVector, weight);
}
// Autogenerated method: RootMotion.V3Tools.Slerp
::UnityEngine::Vector3 RootMotion::V3Tools::Slerp(::UnityEngine::Vector3 fromVector, ::UnityEngine::Vector3 toVector, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::V3Tools::Slerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "Slerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromVector), ::il2cpp_utils::ExtractType(toVector), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, fromVector, toVector, weight);
}
// Autogenerated method: RootMotion.V3Tools.ExtractVertical
::UnityEngine::Vector3 RootMotion::V3Tools::ExtractVertical(::UnityEngine::Vector3 v, ::UnityEngine::Vector3 verticalAxis, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::V3Tools::ExtractVertical");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "ExtractVertical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v), ::il2cpp_utils::ExtractType(verticalAxis), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v, verticalAxis, weight);
}
// Autogenerated method: RootMotion.V3Tools.ExtractHorizontal
::UnityEngine::Vector3 RootMotion::V3Tools::ExtractHorizontal(::UnityEngine::Vector3 v, ::UnityEngine::Vector3 normal, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::V3Tools::ExtractHorizontal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "ExtractHorizontal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v), ::il2cpp_utils::ExtractType(normal), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v, normal, weight);
}
// Autogenerated method: RootMotion.V3Tools.ClampDirection
::UnityEngine::Vector3 RootMotion::V3Tools::ClampDirection(::UnityEngine::Vector3 direction, ::UnityEngine::Vector3 normalDirection, float clampWeight, int clampSmoothing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::V3Tools::ClampDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "ClampDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(normalDirection), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(clampSmoothing)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, direction, normalDirection, clampWeight, clampSmoothing);
}
// Autogenerated method: RootMotion.V3Tools.ClampDirection
::UnityEngine::Vector3 RootMotion::V3Tools::ClampDirection(::UnityEngine::Vector3 direction, ::UnityEngine::Vector3 normalDirection, float clampWeight, int clampSmoothing, ByRef<bool> changed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::V3Tools::ClampDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "ClampDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(normalDirection), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(clampSmoothing), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, direction, normalDirection, clampWeight, clampSmoothing, byref(changed));
}
// Autogenerated method: RootMotion.V3Tools.ClampDirection
::UnityEngine::Vector3 RootMotion::V3Tools::ClampDirection(::UnityEngine::Vector3 direction, ::UnityEngine::Vector3 normalDirection, float clampWeight, int clampSmoothing, ByRef<float> clampValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::V3Tools::ClampDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "ClampDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(normalDirection), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(clampSmoothing), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, direction, normalDirection, clampWeight, clampSmoothing, byref(clampValue));
}
// Autogenerated method: RootMotion.V3Tools.LineToPlane
::UnityEngine::Vector3 RootMotion::V3Tools::LineToPlane(::UnityEngine::Vector3 origin, ::UnityEngine::Vector3 direction, ::UnityEngine::Vector3 planeNormal, ::UnityEngine::Vector3 planePoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::V3Tools::LineToPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "LineToPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(planeNormal), ::il2cpp_utils::ExtractType(planePoint)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, origin, direction, planeNormal, planePoint);
}
// Autogenerated method: RootMotion.V3Tools.PointToPlane
::UnityEngine::Vector3 RootMotion::V3Tools::PointToPlane(::UnityEngine::Vector3 point, ::UnityEngine::Vector3 planePosition, ::UnityEngine::Vector3 planeNormal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::V3Tools::PointToPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "PointToPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point), ::il2cpp_utils::ExtractType(planePosition), ::il2cpp_utils::ExtractType(planeNormal)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, point, planePosition, planeNormal);
}
// Autogenerated method: RootMotion.V3Tools.TransformPointUnscaled
::UnityEngine::Vector3 RootMotion::V3Tools::TransformPointUnscaled(::UnityEngine::Transform* t, ::UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::V3Tools::TransformPointUnscaled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "TransformPointUnscaled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, point);
}
// Autogenerated method: RootMotion.V3Tools.InverseTransformPointUnscaled
::UnityEngine::Vector3 RootMotion::V3Tools::InverseTransformPointUnscaled(::UnityEngine::Transform* t, ::UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::V3Tools::InverseTransformPointUnscaled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "InverseTransformPointUnscaled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, point);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Warning
#include "RootMotion/Warning.hpp"
// Including type: RootMotion.Warning/RootMotion.Logger
#include "RootMotion/Warning_Logger.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Boolean logged
bool RootMotion::Warning::_get_logged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Warning::_get_logged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("RootMotion", "Warning", "logged"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean logged
void RootMotion::Warning::_set_logged(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Warning::_set_logged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "Warning", "logged", value));
}
// Autogenerated method: RootMotion.Warning.Log
void RootMotion::Warning::Log(::StringW message, ::RootMotion::Warning::Logger* logger, bool logInEditMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Warning::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Warning", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(logger), ::il2cpp_utils::ExtractType(logInEditMode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message, logger, logInEditMode);
}
// Autogenerated method: RootMotion.Warning.Log
void RootMotion::Warning::Log(::StringW message, ::UnityEngine::Transform* context, bool logInEditMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Warning::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Warning", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(logInEditMode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message, context, logInEditMode);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.Warning/RootMotion.Logger
#include "RootMotion/Warning_Logger.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.Warning/RootMotion.Logger.Invoke
void RootMotion::Warning::Logger::Invoke(::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Warning::Logger::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.Warning/RootMotion.Logger.BeginInvoke
::System::IAsyncResult* RootMotion::Warning::Logger::BeginInvoke(::StringW message, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Warning::Logger::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, message, callback, object);
}
// Autogenerated method: RootMotion.Warning/RootMotion.Logger.EndInvoke
void RootMotion::Warning::Logger::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Warning::Logger::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Demos.Navigator
#include "RootMotion/Demos/Navigator.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AI.NavMeshPath
#include "UnityEngine/AI/NavMeshPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean activeTargetSeeking
[[deprecated("Use field access instead!")]] bool& RootMotion::Demos::Navigator::dyn_activeTargetSeeking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::dyn_activeTargetSeeking");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activeTargetSeeking"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single cornerRadius
[[deprecated("Use field access instead!")]] float& RootMotion::Demos::Navigator::dyn_cornerRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::dyn_cornerRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cornerRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single recalculateOnPathDistance
[[deprecated("Use field access instead!")]] float& RootMotion::Demos::Navigator::dyn_recalculateOnPathDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::dyn_recalculateOnPathDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "recalculateOnPathDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxSampleDistance
[[deprecated("Use field access instead!")]] float& RootMotion::Demos::Navigator::dyn_maxSampleDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::dyn_maxSampleDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxSampleDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single nextPathInterval
[[deprecated("Use field access instead!")]] float& RootMotion::Demos::Navigator::dyn_nextPathInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::dyn_nextPathInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nextPathInterval"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <normalizedDeltaPosition>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::Demos::Navigator::dyn_$normalizedDeltaPosition$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::dyn_$normalizedDeltaPosition$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<normalizedDeltaPosition>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.Demos.Navigator/RootMotion.Demos.State <state>k__BackingField
[[deprecated("Use field access instead!")]] ::RootMotion::Demos::Navigator::State& RootMotion::Demos::Navigator::dyn_$state$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::dyn_$state$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<state>k__BackingField"))->offset;
  return *reinterpret_cast<::RootMotion::Demos::Navigator::State*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::Demos::Navigator::dyn_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::dyn_transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 cornerIndex
[[deprecated("Use field access instead!")]] int& RootMotion::Demos::Navigator::dyn_cornerIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::dyn_cornerIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cornerIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] corners
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& RootMotion::Demos::Navigator::dyn_corners() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::dyn_corners");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "corners"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AI.NavMeshPath path
[[deprecated("Use field access instead!")]] ::UnityEngine::AI::NavMeshPath*& RootMotion::Demos::Navigator::dyn_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::dyn_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "path"))->offset;
  return *reinterpret_cast<::UnityEngine::AI::NavMeshPath**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastTargetPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::Demos::Navigator::dyn_lastTargetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::dyn_lastTargetPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastTargetPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean initiated
[[deprecated("Use field access instead!")]] bool& RootMotion::Demos::Navigator::dyn_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::dyn_initiated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initiated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single nextPathTime
[[deprecated("Use field access instead!")]] float& RootMotion::Demos::Navigator::dyn_nextPathTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::dyn_nextPathTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nextPathTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.Demos.Navigator.get_normalizedDeltaPosition
::UnityEngine::Vector3 RootMotion::Demos::Navigator::get_normalizedDeltaPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::get_normalizedDeltaPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalizedDeltaPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Demos.Navigator.set_normalizedDeltaPosition
void RootMotion::Demos::Navigator::set_normalizedDeltaPosition(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::set_normalizedDeltaPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_normalizedDeltaPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.Demos.Navigator.get_state
::RootMotion::Demos::Navigator::State RootMotion::Demos::Navigator::get_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::get_state");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::Demos::Navigator::State, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Demos.Navigator.set_state
void RootMotion::Demos::Navigator::set_state(::RootMotion::Demos::Navigator::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::set_state");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.Demos.Navigator.Initiate
void RootMotion::Demos::Navigator::Initiate(::UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.Demos.Navigator.Update
void RootMotion::Demos::Navigator::Update(::UnityEngine::Vector3 targetPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetPosition)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, targetPosition);
}
// Autogenerated method: RootMotion.Demos.Navigator.CalculatePath
void RootMotion::Demos::Navigator::CalculatePath(::UnityEngine::Vector3 targetPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::CalculatePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculatePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetPosition)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, targetPosition);
}
// Autogenerated method: RootMotion.Demos.Navigator.Find
bool RootMotion::Demos::Navigator::Find(::UnityEngine::Vector3 targetPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::Find");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Find", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetPosition)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, targetPosition);
}
// Autogenerated method: RootMotion.Demos.Navigator.Stop
void RootMotion::Demos::Navigator::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Demos.Navigator.HorDistance
float RootMotion::Demos::Navigator::HorDistance(::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::HorDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HorDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, p1, p2);
}
// Autogenerated method: RootMotion.Demos.Navigator.Visualize
void RootMotion::Demos::Navigator::Visualize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::Visualize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Visualize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Demos.Navigator/RootMotion.Demos.State
#include "RootMotion/Demos/Navigator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.Demos.Navigator/RootMotion.Demos.State Idle
::RootMotion::Demos::Navigator::State RootMotion::Demos::Navigator::State::_get_Idle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::State::_get_Idle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::Demos::Navigator::State>("RootMotion.Demos", "Navigator/State", "Idle"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Demos.Navigator/RootMotion.Demos.State Idle
void RootMotion::Demos::Navigator::State::_set_Idle(::RootMotion::Demos::Navigator::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::State::_set_Idle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.Demos", "Navigator/State", "Idle", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.Demos.Navigator/RootMotion.Demos.State Seeking
::RootMotion::Demos::Navigator::State RootMotion::Demos::Navigator::State::_get_Seeking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::State::_get_Seeking");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::Demos::Navigator::State>("RootMotion.Demos", "Navigator/State", "Seeking"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Demos.Navigator/RootMotion.Demos.State Seeking
void RootMotion::Demos::Navigator::State::_set_Seeking(::RootMotion::Demos::Navigator::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::State::_set_Seeking");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.Demos", "Navigator/State", "Seeking", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.Demos.Navigator/RootMotion.Demos.State OnPath
::RootMotion::Demos::Navigator::State RootMotion::Demos::Navigator::State::_get_OnPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::State::_get_OnPath");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::Demos::Navigator::State>("RootMotion.Demos", "Navigator/State", "OnPath"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Demos.Navigator/RootMotion.Demos.State OnPath
void RootMotion::Demos::Navigator::State::_set_OnPath(::RootMotion::Demos::Navigator::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::State::_set_OnPath");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.Demos", "Navigator/State", "OnPath", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& RootMotion::Demos::Navigator::State::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::Navigator::State::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.BipedIK
#include "RootMotion/FinalIK/BipedIK.hpp"
// Including type: RootMotion.BipedReferences
#include "RootMotion/BipedReferences.hpp"
// Including type: RootMotion.FinalIK.BipedIKSolvers
#include "RootMotion/FinalIK/BipedIKSolvers.hpp"
// Including type: UnityEngine.AvatarIKGoal
#include "UnityEngine/AvatarIKGoal.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.BipedReferences references
[[deprecated("Use field access instead!")]] ::RootMotion::BipedReferences*& RootMotion::FinalIK::BipedIK::dyn_references() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::dyn_references");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "references"))->offset;
  return *reinterpret_cast<::RootMotion::BipedReferences**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.BipedIKSolvers solvers
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::BipedIKSolvers*& RootMotion::FinalIK::BipedIK::dyn_solvers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::dyn_solvers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solvers"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::BipedIKSolvers**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.OpenUserManual
void RootMotion::FinalIK::BipedIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.OpenScriptReference
void RootMotion::FinalIK::BipedIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SupportGroup
void RootMotion::FinalIK::BipedIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.ASThread
void RootMotion::FinalIK::BipedIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.GetIKPositionWeight
float RootMotion::FinalIK::BipedIK::GetIKPositionWeight(::UnityEngine::AvatarIKGoal goal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::GetIKPositionWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKPositionWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, goal);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.GetIKRotationWeight
float RootMotion::FinalIK::BipedIK::GetIKRotationWeight(::UnityEngine::AvatarIKGoal goal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::GetIKRotationWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKRotationWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, goal);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetIKPositionWeight
void RootMotion::FinalIK::BipedIK::SetIKPositionWeight(::UnityEngine::AvatarIKGoal goal, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::SetIKPositionWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKPositionWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, goal, weight);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetIKRotationWeight
void RootMotion::FinalIK::BipedIK::SetIKRotationWeight(::UnityEngine::AvatarIKGoal goal, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::SetIKRotationWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKRotationWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, goal, weight);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetIKPosition
void RootMotion::FinalIK::BipedIK::SetIKPosition(::UnityEngine::AvatarIKGoal goal, ::UnityEngine::Vector3 IKPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::SetIKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal), ::il2cpp_utils::ExtractType(IKPosition)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, goal, IKPosition);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetIKRotation
void RootMotion::FinalIK::BipedIK::SetIKRotation(::UnityEngine::AvatarIKGoal goal, ::UnityEngine::Quaternion IKRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::SetIKRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal), ::il2cpp_utils::ExtractType(IKRotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, goal, IKRotation);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.GetIKPosition
::UnityEngine::Vector3 RootMotion::FinalIK::BipedIK::GetIKPosition(::UnityEngine::AvatarIKGoal goal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::GetIKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, goal);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.GetIKRotation
::UnityEngine::Quaternion RootMotion::FinalIK::BipedIK::GetIKRotation(::UnityEngine::AvatarIKGoal goal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::GetIKRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method, goal);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetLookAtWeight
void RootMotion::FinalIK::BipedIK::SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::SetLookAtWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLookAtWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(bodyWeight), ::il2cpp_utils::ExtractType(headWeight), ::il2cpp_utils::ExtractType(eyesWeight), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(clampWeightHead), ::il2cpp_utils::ExtractType(clampWeightEyes)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, weight, bodyWeight, headWeight, eyesWeight, clampWeight, clampWeightHead, clampWeightEyes);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetLookAtPosition
void RootMotion::FinalIK::BipedIK::SetLookAtPosition(::UnityEngine::Vector3 lookAtPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::SetLookAtPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLookAtPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lookAtPosition)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lookAtPosition);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetSpinePosition
void RootMotion::FinalIK::BipedIK::SetSpinePosition(::UnityEngine::Vector3 spinePosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::SetSpinePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSpinePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spinePosition)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, spinePosition);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetSpineWeight
void RootMotion::FinalIK::BipedIK::SetSpineWeight(float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::SetSpineWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSpineWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, weight);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.GetGoalIK
::RootMotion::FinalIK::IKSolverLimb* RootMotion::FinalIK::BipedIK::GetGoalIK(::UnityEngine::AvatarIKGoal goal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::GetGoalIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGoalIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal)})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKSolverLimb*, false>(this, ___internal__method, goal);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.InitiateBipedIK
void RootMotion::FinalIK::BipedIK::InitiateBipedIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::InitiateBipedIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateBipedIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.UpdateBipedIK
void RootMotion::FinalIK::BipedIK::UpdateBipedIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::UpdateBipedIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateBipedIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetToDefaults
void RootMotion::FinalIK::BipedIK::SetToDefaults() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::SetToDefaults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToDefaults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.LogWarning
void RootMotion::FinalIK::BipedIK::LogWarning(::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::LogWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.FixTransforms
void RootMotion::FinalIK::BipedIK::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.InitiateSolver
void RootMotion::FinalIK::BipedIK::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.UpdateSolver
void RootMotion::FinalIK::BipedIK::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIK::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.BipedIKSolvers
#include "RootMotion/FinalIK/BipedIKSolvers.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
// Including type: RootMotion.FinalIK.IKSolverFABRIK
#include "RootMotion/FinalIK/IKSolverFABRIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverLookAt
#include "RootMotion/FinalIK/IKSolverLookAt.hpp"
// Including type: RootMotion.FinalIK.IKSolverAim
#include "RootMotion/FinalIK/IKSolverAim.hpp"
// Including type: RootMotion.FinalIK.Constraints
#include "RootMotion/FinalIK/Constraints.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.BipedReferences
#include "RootMotion/BipedReferences.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverLimb leftFoot
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverLimb*& RootMotion::FinalIK::BipedIKSolvers::dyn_leftFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIKSolvers::dyn_leftFoot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftFoot"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverLimb**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverLimb rightFoot
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverLimb*& RootMotion::FinalIK::BipedIKSolvers::dyn_rightFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIKSolvers::dyn_rightFoot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightFoot"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverLimb**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverLimb leftHand
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverLimb*& RootMotion::FinalIK::BipedIKSolvers::dyn_leftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIKSolvers::dyn_leftHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHand"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverLimb**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverLimb rightHand
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverLimb*& RootMotion::FinalIK::BipedIKSolvers::dyn_rightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIKSolvers::dyn_rightHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHand"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverLimb**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverFABRIK spine
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverFABRIK*& RootMotion::FinalIK::BipedIKSolvers::dyn_spine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIKSolvers::dyn_spine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spine"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverFABRIK**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverLookAt lookAt
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverLookAt*& RootMotion::FinalIK::BipedIKSolvers::dyn_lookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIKSolvers::dyn_lookAt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lookAt"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverLookAt**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverAim aim
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverAim*& RootMotion::FinalIK::BipedIKSolvers::dyn_aim() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIKSolvers::dyn_aim");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "aim"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverAim**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.Constraints pelvis
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::Constraints*& RootMotion::FinalIK::BipedIKSolvers::dyn_pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIKSolvers::dyn_pelvis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pelvis"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::Constraints**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.IKSolverLimb[] _limbs
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::IKSolverLimb*>& RootMotion::FinalIK::BipedIKSolvers::dyn__limbs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIKSolvers::dyn__limbs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_limbs"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::FinalIK::IKSolverLimb*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.IKSolver[] _ikSolvers
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::IKSolver*>& RootMotion::FinalIK::BipedIKSolvers::dyn__ikSolvers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIKSolvers::dyn__ikSolvers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ikSolvers"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::FinalIK::IKSolver*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.BipedIKSolvers.get_limbs
::ArrayW<::RootMotion::FinalIK::IKSolverLimb*> RootMotion::FinalIK::BipedIKSolvers::get_limbs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIKSolvers::get_limbs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_limbs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::RootMotion::FinalIK::IKSolverLimb*>, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIKSolvers.get_ikSolvers
::ArrayW<::RootMotion::FinalIK::IKSolver*> RootMotion::FinalIK::BipedIKSolvers::get_ikSolvers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIKSolvers::get_ikSolvers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ikSolvers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::RootMotion::FinalIK::IKSolver*>, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIKSolvers.AssignReferences
void RootMotion::FinalIK::BipedIKSolvers::AssignReferences(::RootMotion::BipedReferences* references) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::BipedIKSolvers::AssignReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssignReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, references);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Constraint
#include "RootMotion/FinalIK/Constraint.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::Constraint::dyn_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Constraint::dyn_transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single weight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Constraint::dyn_weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Constraint::dyn_weight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "weight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.Constraint.get_isValid
bool RootMotion::FinalIK::Constraint::get_isValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Constraint::get_isValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Constraint.UpdateConstraint
void RootMotion::FinalIK::Constraint::UpdateConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Constraint::UpdateConstraint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ConstraintPosition
#include "RootMotion/FinalIK/ConstraintPosition.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 position
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::ConstraintPosition::dyn_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintPosition::dyn_position");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "position"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.ConstraintPosition.UpdateConstraint
void RootMotion::FinalIK::ConstraintPosition::UpdateConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintPosition::UpdateConstraint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ConstraintPositionOffset
#include "RootMotion/FinalIK/ConstraintPositionOffset.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 offset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::ConstraintPositionOffset::dyn_offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintPositionOffset::dyn_offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 defaultLocalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::ConstraintPositionOffset::dyn_defaultLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintPositionOffset::dyn_defaultLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultLocalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastLocalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::ConstraintPositionOffset::dyn_lastLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintPositionOffset::dyn_lastLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastLocalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean initiated
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::ConstraintPositionOffset::dyn_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintPositionOffset::dyn_initiated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initiated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.ConstraintPositionOffset.get_positionChanged
bool RootMotion::FinalIK::ConstraintPositionOffset::get_positionChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintPositionOffset::get_positionChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_positionChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ConstraintPositionOffset.UpdateConstraint
void RootMotion::FinalIK::ConstraintPositionOffset::UpdateConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintPositionOffset::UpdateConstraint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ConstraintRotation
#include "RootMotion/FinalIK/ConstraintRotation.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion rotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::ConstraintRotation::dyn_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintRotation::dyn_rotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.ConstraintRotation.UpdateConstraint
void RootMotion::FinalIK::ConstraintRotation::UpdateConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintRotation::UpdateConstraint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ConstraintRotationOffset
#include "RootMotion/FinalIK/ConstraintRotationOffset.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion offset
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::ConstraintRotationOffset::dyn_offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintRotationOffset::dyn_offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offset"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion defaultRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::ConstraintRotationOffset::dyn_defaultRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintRotationOffset::dyn_defaultRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion defaultLocalRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::ConstraintRotationOffset::dyn_defaultLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintRotationOffset::dyn_defaultLocalRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultLocalRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion lastLocalRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::ConstraintRotationOffset::dyn_lastLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintRotationOffset::dyn_lastLocalRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastLocalRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion defaultTargetLocalRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::ConstraintRotationOffset::dyn_defaultTargetLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintRotationOffset::dyn_defaultTargetLocalRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultTargetLocalRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean initiated
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::ConstraintRotationOffset::dyn_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintRotationOffset::dyn_initiated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initiated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.ConstraintRotationOffset.get_rotationChanged
bool RootMotion::FinalIK::ConstraintRotationOffset::get_rotationChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintRotationOffset::get_rotationChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotationChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ConstraintRotationOffset.UpdateConstraint
void RootMotion::FinalIK::ConstraintRotationOffset::UpdateConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ConstraintRotationOffset::UpdateConstraint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Constraints
#include "RootMotion/FinalIK/Constraints.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::Constraints::dyn_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Constraints::dyn_transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform target
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::Constraints::dyn_target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Constraints::dyn_target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "target"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 positionOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Constraints::dyn_positionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Constraints::dyn_positionOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "positionOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 position
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Constraints::dyn_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Constraints::dyn_position");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "position"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single positionWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Constraints::dyn_positionWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Constraints::dyn_positionWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "positionWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 rotationOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Constraints::dyn_rotationOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Constraints::dyn_rotationOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 rotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Constraints::dyn_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Constraints::dyn_rotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rotationWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Constraints::dyn_rotationWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Constraints::dyn_rotationWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.Constraints.IsValid
bool RootMotion::FinalIK::Constraints::IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Constraints::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Constraints.Initiate
void RootMotion::FinalIK::Constraints::Initiate(::UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Constraints::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.Constraints.Update
void RootMotion::FinalIK::Constraints::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Constraints::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Finger
#include "RootMotion/FinalIK/Finger.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single weight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Finger::dyn_weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::dyn_weight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "weight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rotationWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Finger::dyn_rotationWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::dyn_rotationWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.Finger/RootMotion.FinalIK.DOF rotationDOF
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::Finger::DOF& RootMotion::FinalIK::Finger::dyn_rotationDOF() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::dyn_rotationDOF");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationDOF"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::Finger::DOF*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean fixBone1Twist
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::Finger::dyn_fixBone1Twist() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::dyn_fixBone1Twist");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fixBone1Twist"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform bone1
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::Finger::dyn_bone1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::dyn_bone1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone1"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform bone2
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::Finger::dyn_bone2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::dyn_bone2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone2"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform bone3
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::Finger::dyn_bone3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::dyn_bone3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone3"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform tip
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::Finger::dyn_tip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::dyn_tip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tip"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform target
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::Finger::dyn_target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::dyn_target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "target"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <initiated>k__BackingField
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::Finger::dyn_$initiated$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::dyn_$initiated$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<initiated>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.IKSolverLimb solver
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverLimb*& RootMotion::FinalIK::Finger::dyn_solver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::dyn_solver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solver"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverLimb**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion bone3RelativeToTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::Finger::dyn_bone3RelativeToTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::dyn_bone3RelativeToTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone3RelativeToTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 bone3DefaultLocalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Finger::dyn_bone3DefaultLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::dyn_bone3DefaultLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone3DefaultLocalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion bone3DefaultLocalRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::Finger::dyn_bone3DefaultLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::dyn_bone3DefaultLocalRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone3DefaultLocalRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 bone1Axis
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Finger::dyn_bone1Axis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::dyn_bone1Axis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone1Axis"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 tipAxis
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Finger::dyn_tipAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::dyn_tipAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tipAxis"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 bone1TwistAxis
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Finger::dyn_bone1TwistAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::dyn_bone1TwistAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone1TwistAxis"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.Finger.get_initiated
bool RootMotion::FinalIK::Finger::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.set_initiated
void RootMotion::FinalIK::Finger::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Finger.get_IKPosition
::UnityEngine::Vector3 RootMotion::FinalIK::Finger::get_IKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::get_IKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.set_IKPosition
void RootMotion::FinalIK::Finger::set_IKPosition(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::set_IKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Finger.get_IKRotation
::UnityEngine::Quaternion RootMotion::FinalIK::Finger::get_IKRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::get_IKRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IKRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.set_IKRotation
void RootMotion::FinalIK::Finger::set_IKRotation(::UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::set_IKRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IKRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Finger.IsValid
bool RootMotion::FinalIK::Finger::IsValid(ByRef<::StringW> errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(errorMessage));
}
// Autogenerated method: RootMotion.FinalIK.Finger.Initiate
void RootMotion::FinalIK::Finger::Initiate(::UnityEngine::Transform* hand, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand, index);
}
// Autogenerated method: RootMotion.FinalIK.Finger.FixTransforms
void RootMotion::FinalIK::Finger::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.StoreDefaultLocalState
void RootMotion::FinalIK::Finger::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.Update
void RootMotion::FinalIK::Finger::Update(float masterWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(masterWeight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, masterWeight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Finger/RootMotion.FinalIK.DOF
#include "RootMotion/FinalIK/Finger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Finger/RootMotion.FinalIK.DOF One
::RootMotion::FinalIK::Finger::DOF RootMotion::FinalIK::Finger::DOF::_get_One() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::DOF::_get_One");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::FinalIK::Finger::DOF>("RootMotion.FinalIK", "Finger/DOF", "One"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Finger/RootMotion.FinalIK.DOF One
void RootMotion::FinalIK::Finger::DOF::_set_One(::RootMotion::FinalIK::Finger::DOF value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::DOF::_set_One");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Finger/DOF", "One", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Finger/RootMotion.FinalIK.DOF Three
::RootMotion::FinalIK::Finger::DOF RootMotion::FinalIK::Finger::DOF::_get_Three() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::DOF::_get_Three");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::FinalIK::Finger::DOF>("RootMotion.FinalIK", "Finger/DOF", "Three"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Finger/RootMotion.FinalIK.DOF Three
void RootMotion::FinalIK::Finger::DOF::_set_Three(::RootMotion::FinalIK::Finger::DOF value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::DOF::_set_Three");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Finger/DOF", "Three", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::Finger::DOF::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Finger::DOF::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FingerRig
#include "RootMotion/FinalIK/FingerRig.hpp"
// Including type: RootMotion.FinalIK.Finger
#include "RootMotion/FinalIK/Finger.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single weight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FingerRig::dyn_weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FingerRig::dyn_weight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "weight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.Finger[] fingers
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::Finger*>& RootMotion::FinalIK::FingerRig::dyn_fingers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FingerRig::dyn_fingers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fingers"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::FinalIK::Finger*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <initiated>k__BackingField
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::FingerRig::dyn_$initiated$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FingerRig::dyn_$initiated$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<initiated>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.get_initiated
bool RootMotion::FinalIK::FingerRig::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FingerRig::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.set_initiated
void RootMotion::FinalIK::FingerRig::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FingerRig::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.IsValid
bool RootMotion::FinalIK::FingerRig::IsValid(ByRef<::StringW> errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FingerRig::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(errorMessage));
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.AutoDetect
void RootMotion::FinalIK::FingerRig::AutoDetect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FingerRig::AutoDetect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AutoDetect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.AddFinger
void RootMotion::FinalIK::FingerRig::AddFinger(::UnityEngine::Transform* bone1, ::UnityEngine::Transform* bone2, ::UnityEngine::Transform* bone3, ::UnityEngine::Transform* tip, ::UnityEngine::Transform* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FingerRig::AddFinger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddFinger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3), ::il2cpp_utils::ExtractType(tip), ::il2cpp_utils::ExtractType(target)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bone1, bone2, bone3, tip, target);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.RemoveFinger
void RootMotion::FinalIK::FingerRig::RemoveFinger(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FingerRig::RemoveFinger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveFinger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.AddChildrenRecursive
void RootMotion::FinalIK::FingerRig::AddChildrenRecursive(::UnityEngine::Transform* parent, ByRef<::ArrayW<::UnityEngine::Transform*>> array) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FingerRig::AddChildrenRecursive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddChildrenRecursive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(array)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parent, byref(array));
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.UpdateFingerSolvers
void RootMotion::FinalIK::FingerRig::UpdateFingerSolvers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FingerRig::UpdateFingerSolvers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFingerSolvers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.FixFingerTransforms
void RootMotion::FinalIK::FingerRig::FixFingerTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FingerRig::FixFingerTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixFingerTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.StoreDefaultLocalState
void RootMotion::FinalIK::FingerRig::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FingerRig::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.InitiateSolver
void RootMotion::FinalIK::FingerRig::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FingerRig::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.UpdateSolver
void RootMotion::FinalIK::FingerRig::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FingerRig::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.FixTransforms
void RootMotion::FinalIK::FingerRig::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FingerRig::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Grounder
#include "RootMotion/FinalIK/Grounder.hpp"
// Including type: RootMotion.FinalIK.Grounder/RootMotion.FinalIK.GrounderDelegate
#include "RootMotion/FinalIK/Grounder_GrounderDelegate.hpp"
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single weight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounder::dyn_weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounder::dyn_weight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "weight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.Grounding solver
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::Grounding*& RootMotion::FinalIK::Grounder::dyn_solver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounder::dyn_solver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solver"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::Grounding**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.Grounder/RootMotion.FinalIK.GrounderDelegate OnPreGrounder
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::Grounder::GrounderDelegate*& RootMotion::FinalIK::Grounder::dyn_OnPreGrounder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounder::dyn_OnPreGrounder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnPreGrounder"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::Grounder::GrounderDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.Grounder/RootMotion.FinalIK.GrounderDelegate OnPostGrounder
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::Grounder::GrounderDelegate*& RootMotion::FinalIK::Grounder::dyn_OnPostGrounder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounder::dyn_OnPostGrounder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnPostGrounder"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::Grounder::GrounderDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <initiated>k__BackingField
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::Grounder::dyn_$initiated$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounder::dyn_$initiated$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<initiated>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.get_initiated
bool RootMotion::FinalIK::Grounder::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounder::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.set_initiated
void RootMotion::FinalIK::Grounder::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounder::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.ResetPosition
void RootMotion::FinalIK::Grounder::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounder::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.GetSpineOffsetTarget
::UnityEngine::Vector3 RootMotion::FinalIK::Grounder::GetSpineOffsetTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounder::GetSpineOffsetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSpineOffsetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.LogWarning
void RootMotion::FinalIK::Grounder::LogWarning(::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounder::LogWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.GetLegSpineBendVector
::UnityEngine::Vector3 RootMotion::FinalIK::Grounder::GetLegSpineBendVector(::RootMotion::FinalIK::Grounding::Leg* leg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounder::GetLegSpineBendVector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLegSpineBendVector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leg)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, leg);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.GetLegSpineTangent
::UnityEngine::Vector3 RootMotion::FinalIK::Grounder::GetLegSpineTangent(::RootMotion::FinalIK::Grounding::Leg* leg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounder::GetLegSpineTangent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLegSpineTangent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leg)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, leg);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.OpenUserManual
void RootMotion::FinalIK::Grounder::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounder::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.OpenScriptReference
void RootMotion::FinalIK::Grounder::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounder::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Grounder/RootMotion.FinalIK.GrounderDelegate
#include "RootMotion/FinalIK/Grounder_GrounderDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Grounder/RootMotion.FinalIK.GrounderDelegate.Invoke
void RootMotion::FinalIK::Grounder::GrounderDelegate::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounder::GrounderDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder/RootMotion.FinalIK.GrounderDelegate.BeginInvoke
::System::IAsyncResult* RootMotion::FinalIK::Grounder::GrounderDelegate::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounder::GrounderDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: RootMotion.FinalIK.Grounder/RootMotion.FinalIK.GrounderDelegate.EndInvoke
void RootMotion::FinalIK::Grounder::GrounderDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounder::GrounderDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.GrounderBipedIK
#include "RootMotion/FinalIK/GrounderBipedIK.hpp"
// Including type: RootMotion.FinalIK.BipedIK
#include "RootMotion/FinalIK/BipedIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.BipedIK ik
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::BipedIK*& RootMotion::FinalIK::GrounderBipedIK::dyn_ik() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::dyn_ik");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ik"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::BipedIK**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single spineBend
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderBipedIK::dyn_spineBend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::dyn_spineBend");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spineBend"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single spineSpeed
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderBipedIK::dyn_spineSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::dyn_spineSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spineSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform[] feet
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& RootMotion::FinalIK::GrounderBipedIK::dyn_feet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::dyn_feet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "feet"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion[] footRotations
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& RootMotion::FinalIK::GrounderBipedIK::dyn_footRotations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::dyn_footRotations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "footRotations"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 animatedPelvisLocalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::GrounderBipedIK::dyn_animatedPelvisLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::dyn_animatedPelvisLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animatedPelvisLocalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 solvedPelvisLocalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::GrounderBipedIK::dyn_solvedPelvisLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::dyn_solvedPelvisLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solvedPelvisLocalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 spineOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::GrounderBipedIK::dyn_spineOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::dyn_spineOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spineOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderBipedIK::dyn_lastWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::dyn_lastWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderBipedIK::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.Update
void RootMotion::FinalIK::GrounderBipedIK::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.Initiate
void RootMotion::FinalIK::GrounderBipedIK::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OnDisable
void RootMotion::FinalIK::GrounderBipedIK::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OnSolverUpdate
void RootMotion::FinalIK::GrounderBipedIK::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.SetLegIK
void RootMotion::FinalIK::GrounderBipedIK::SetLegIK(::RootMotion::FinalIK::IKSolverLimb* limb, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::SetLegIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLegIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(limb), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, limb, index);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OnPostSolverUpdate
void RootMotion::FinalIK::GrounderBipedIK::OnPostSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::OnPostSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OnDestroy
void RootMotion::FinalIK::GrounderBipedIK::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OpenUserManual
void RootMotion::FinalIK::GrounderBipedIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OpenScriptReference
void RootMotion::FinalIK::GrounderBipedIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.ResetPosition
void RootMotion::FinalIK::GrounderBipedIK::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderBipedIK::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.GrounderFBBIK
#include "RootMotion/FinalIK/GrounderFBBIK.hpp"
// Including type: RootMotion.FinalIK.GrounderFBBIK/RootMotion.FinalIK.SpineEffector
#include "RootMotion/FinalIK/GrounderFBBIK_SpineEffector.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.FullBodyBipedIK ik
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::FullBodyBipedIK*& RootMotion::FinalIK::GrounderFBBIK::dyn_ik() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::dyn_ik");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ik"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::FullBodyBipedIK**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single spineBend
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderFBBIK::dyn_spineBend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::dyn_spineBend");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spineBend"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single spineSpeed
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderFBBIK::dyn_spineSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::dyn_spineSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spineSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.GrounderFBBIK/RootMotion.FinalIK.SpineEffector[] spine
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::GrounderFBBIK::SpineEffector*>& RootMotion::FinalIK::GrounderFBBIK::dyn_spine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::dyn_spine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spine"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::FinalIK::GrounderFBBIK::SpineEffector*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform[] feet
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& RootMotion::FinalIK::GrounderFBBIK::dyn_feet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::dyn_feet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "feet"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 spineOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::GrounderFBBIK::dyn_spineOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::dyn_spineOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spineOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean firstSolve
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::GrounderFBBIK::dyn_firstSolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::dyn_firstSolve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "firstSolve"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OpenTutorial
void RootMotion::FinalIK::GrounderFBBIK::OpenTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::OpenTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderFBBIK::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.Update
void RootMotion::FinalIK::GrounderFBBIK::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.FixedUpdate
void RootMotion::FinalIK::GrounderFBBIK::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.LateUpdate
void RootMotion::FinalIK::GrounderFBBIK::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.Initiate
void RootMotion::FinalIK::GrounderFBBIK::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OnSolverUpdate
void RootMotion::FinalIK::GrounderFBBIK::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.SetLegIK
void RootMotion::FinalIK::GrounderFBBIK::SetLegIK(::RootMotion::FinalIK::IKEffector* effector, ::RootMotion::FinalIK::Grounding::Leg* leg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::SetLegIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLegIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(leg)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, effector, leg);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OnDrawGizmosSelected
void RootMotion::FinalIK::GrounderFBBIK::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OnDestroy
void RootMotion::FinalIK::GrounderFBBIK::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OpenUserManual
void RootMotion::FinalIK::GrounderFBBIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OpenScriptReference
void RootMotion::FinalIK::GrounderFBBIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.ResetPosition
void RootMotion::FinalIK::GrounderFBBIK::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.GrounderFBBIK/RootMotion.FinalIK.SpineEffector
#include "RootMotion/FinalIK/GrounderFBBIK_SpineEffector.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.FullBodyBipedEffector effectorType
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::FullBodyBipedEffector& RootMotion::FinalIK::GrounderFBBIK::SpineEffector::dyn_effectorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::SpineEffector::dyn_effectorType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "effectorType"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::FullBodyBipedEffector*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single horizontalWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderFBBIK::SpineEffector::dyn_horizontalWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::SpineEffector::dyn_horizontalWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "horizontalWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single verticalWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderFBBIK::SpineEffector::dyn_verticalWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderFBBIK::SpineEffector::dyn_verticalWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "verticalWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.GrounderIK
#include "RootMotion/FinalIK/GrounderIK.hpp"
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IK[] legs
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::IK*>& RootMotion::FinalIK::GrounderIK::dyn_legs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::dyn_legs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "legs"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::FinalIK::IK*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform pelvis
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::GrounderIK::dyn_pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::dyn_pelvis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pelvis"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform characterRoot
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::GrounderIK::dyn_characterRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::dyn_characterRoot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "characterRoot"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rootRotationWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderIK::dyn_rootRotationWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::dyn_rootRotationWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rootRotationWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rootRotationSpeed
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderIK::dyn_rootRotationSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::dyn_rootRotationSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rootRotationSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxRootRotationAngle
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderIK::dyn_maxRootRotationAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::dyn_maxRootRotationAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxRootRotationAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform[] feet
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& RootMotion::FinalIK::GrounderIK::dyn_feet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::dyn_feet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "feet"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion[] footRotations
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& RootMotion::FinalIK::GrounderIK::dyn_footRotations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::dyn_footRotations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "footRotations"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 animatedPelvisLocalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::GrounderIK::dyn_animatedPelvisLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::dyn_animatedPelvisLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animatedPelvisLocalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 solvedPelvisLocalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::GrounderIK::dyn_solvedPelvisLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::dyn_solvedPelvisLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solvedPelvisLocalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 solvedFeet
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::GrounderIK::dyn_solvedFeet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::dyn_solvedFeet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solvedFeet"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean solved
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::GrounderIK::dyn_solved() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::dyn_solved");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solved"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderIK::dyn_lastWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::dyn_lastWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody characterRootRigidbody
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& RootMotion::FinalIK::GrounderIK::dyn_characterRootRigidbody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::dyn_characterRootRigidbody");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "characterRootRigidbody"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderIK::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OnDisable
void RootMotion::FinalIK::GrounderIK::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.Update
void RootMotion::FinalIK::GrounderIK::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.Initiate
void RootMotion::FinalIK::GrounderIK::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OnSolverUpdate
void RootMotion::FinalIK::GrounderIK::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.SetLegIK
void RootMotion::FinalIK::GrounderIK::SetLegIK(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::SetLegIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLegIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OnPostSolverUpdate
void RootMotion::FinalIK::GrounderIK::OnPostSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::OnPostSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OnDestroy
void RootMotion::FinalIK::GrounderIK::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OpenUserManual
void RootMotion::FinalIK::GrounderIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OpenScriptReference
void RootMotion::FinalIK::GrounderIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.ResetPosition
void RootMotion::FinalIK::GrounderIK::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderIK::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.GrounderQuadruped
#include "RootMotion/FinalIK/GrounderQuadruped.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.Grounding forelegSolver
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::Grounding*& RootMotion::FinalIK::GrounderQuadruped::dyn_forelegSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_forelegSolver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "forelegSolver"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::Grounding**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rootRotationWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderQuadruped::dyn_rootRotationWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_rootRotationWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rootRotationWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minRootRotation
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderQuadruped::dyn_minRootRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_minRootRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minRootRotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxRootRotation
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderQuadruped::dyn_maxRootRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_maxRootRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxRootRotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rootRotationSpeed
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderQuadruped::dyn_rootRotationSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_rootRotationSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rootRotationSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxLegOffset
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderQuadruped::dyn_maxLegOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_maxLegOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxLegOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxForeLegOffset
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderQuadruped::dyn_maxForeLegOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_maxForeLegOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxForeLegOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maintainHeadRotationWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderQuadruped::dyn_maintainHeadRotationWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_maintainHeadRotationWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maintainHeadRotationWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform characterRoot
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::GrounderQuadruped::dyn_characterRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_characterRoot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "characterRoot"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform pelvis
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::GrounderQuadruped::dyn_pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_pelvis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pelvis"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform lastSpineBone
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::GrounderQuadruped::dyn_lastSpineBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_lastSpineBone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastSpineBone"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform head
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::GrounderQuadruped::dyn_head() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_head");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "head"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IK[] legs
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::IK*>& RootMotion::FinalIK::GrounderQuadruped::dyn_legs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_legs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "legs"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::FinalIK::IK*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IK[] forelegs
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::IK*>& RootMotion::FinalIK::GrounderQuadruped::dyn_forelegs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_forelegs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "forelegs"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::FinalIK::IK*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 gravity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::GrounderQuadruped::dyn_gravity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_gravity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gravity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.GrounderQuadruped/RootMotion.FinalIK.Foot[] feet
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::GrounderQuadruped::Foot>& RootMotion::FinalIK::GrounderQuadruped::dyn_feet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_feet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "feet"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::FinalIK::GrounderQuadruped::Foot>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 animatedPelvisLocalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::GrounderQuadruped::dyn_animatedPelvisLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_animatedPelvisLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animatedPelvisLocalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion animatedPelvisLocalRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::GrounderQuadruped::dyn_animatedPelvisLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_animatedPelvisLocalRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animatedPelvisLocalRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion animatedHeadLocalRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::GrounderQuadruped::dyn_animatedHeadLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_animatedHeadLocalRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animatedHeadLocalRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 solvedPelvisLocalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::GrounderQuadruped::dyn_solvedPelvisLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_solvedPelvisLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solvedPelvisLocalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion solvedPelvisLocalRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::GrounderQuadruped::dyn_solvedPelvisLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_solvedPelvisLocalRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solvedPelvisLocalRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion solvedHeadLocalRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::GrounderQuadruped::dyn_solvedHeadLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_solvedHeadLocalRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solvedHeadLocalRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 solvedFeet
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::GrounderQuadruped::dyn_solvedFeet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_solvedFeet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solvedFeet"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean solved
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::GrounderQuadruped::dyn_solved() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_solved");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solved"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single angle
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderQuadruped::dyn_angle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_angle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform forefeetRoot
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::GrounderQuadruped::dyn_forefeetRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_forefeetRoot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "forefeetRoot"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion headRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::GrounderQuadruped::dyn_headRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_headRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::GrounderQuadruped::dyn_lastWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_lastWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody characterRootRigidbody
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& RootMotion::FinalIK::GrounderQuadruped::dyn_characterRootRigidbody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::dyn_characterRootRigidbody");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "characterRootRigidbody"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderQuadruped::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.IsReadyToInitiateLegs
bool RootMotion::FinalIK::GrounderQuadruped::IsReadyToInitiateLegs(::ArrayW<::RootMotion::FinalIK::IK*> ikComponents) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::IsReadyToInitiateLegs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiateLegs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ikComponents)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ikComponents);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OnDisable
void RootMotion::FinalIK::GrounderQuadruped::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.Update
void RootMotion::FinalIK::GrounderQuadruped::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.Initiate
void RootMotion::FinalIK::GrounderQuadruped::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.InitiateFeet
::ArrayW<::UnityEngine::Transform*> RootMotion::FinalIK::GrounderQuadruped::InitiateFeet(::ArrayW<::RootMotion::FinalIK::IK*> ikComponents, ByRef<::ArrayW<::RootMotion::FinalIK::GrounderQuadruped::Foot>> f, int indexOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::InitiateFeet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateFeet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ikComponents), ::il2cpp_utils::ExtractType(f), ::il2cpp_utils::ExtractType(indexOffset)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Transform*>, false>(this, ___internal__method, ikComponents, byref(f), indexOffset);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.LateUpdate
void RootMotion::FinalIK::GrounderQuadruped::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.RootRotation
void RootMotion::FinalIK::GrounderQuadruped::RootRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::RootRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RootRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OnSolverUpdate
void RootMotion::FinalIK::GrounderQuadruped::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.UpdateForefeetRoot
void RootMotion::FinalIK::GrounderQuadruped::UpdateForefeetRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::UpdateForefeetRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateForefeetRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.SetFootIK
void RootMotion::FinalIK::GrounderQuadruped::SetFootIK(::RootMotion::FinalIK::GrounderQuadruped::Foot foot, float maxOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::SetFootIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFootIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(foot), ::il2cpp_utils::ExtractType(maxOffset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, foot, maxOffset);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OnPostSolverUpdate
void RootMotion::FinalIK::GrounderQuadruped::OnPostSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::OnPostSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OnDestroy
void RootMotion::FinalIK::GrounderQuadruped::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.DestroyLegs
void RootMotion::FinalIK::GrounderQuadruped::DestroyLegs(::ArrayW<::RootMotion::FinalIK::IK*> ikComponents) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::DestroyLegs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyLegs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ikComponents)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ikComponents);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OpenUserManual
void RootMotion::FinalIK::GrounderQuadruped::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OpenScriptReference
void RootMotion::FinalIK::GrounderQuadruped::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.ResetPosition
void RootMotion::FinalIK::GrounderQuadruped::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.GrounderQuadruped/RootMotion.FinalIK.Foot
#include "RootMotion/FinalIK/GrounderQuadruped.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolver solver
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolver*& RootMotion::FinalIK::GrounderQuadruped::Foot::dyn_solver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::Foot::dyn_solver");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solver"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolver**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::GrounderQuadruped::Foot::dyn_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::Foot::dyn_transform");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion rotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::GrounderQuadruped::Foot::dyn_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::Foot::dyn_rotation");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg leg
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::Grounding::Leg*& RootMotion::FinalIK::GrounderQuadruped::Foot::dyn_leg() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::Foot::dyn_leg");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leg"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::Grounding::Leg**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped/RootMotion.FinalIK.Foot..ctor
RootMotion::FinalIK::GrounderQuadruped::Foot::Foot(::RootMotion::FinalIK::IKSolver* solver, ::UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderQuadruped::Foot::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(transform)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver, transform);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.GrounderVRIK
#include "RootMotion/FinalIK/GrounderVRIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset
#include "RootMotion/FinalIK/IKSolverVR_PositionOffset.hpp"
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.VRIK ik
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::VRIK*& RootMotion::FinalIK::GrounderVRIK::dyn_ik() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderVRIK::dyn_ik");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ik"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::VRIK**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform[] feet
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& RootMotion::FinalIK::GrounderVRIK::dyn_feet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderVRIK::dyn_feet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "feet"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OpenTutorial
void RootMotion::FinalIK::GrounderVRIK::OpenTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderVRIK::OpenTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderVRIK::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderVRIK::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.Update
void RootMotion::FinalIK::GrounderVRIK::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderVRIK::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.Initiate
void RootMotion::FinalIK::GrounderVRIK::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderVRIK::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OnSolverUpdate
void RootMotion::FinalIK::GrounderVRIK::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderVRIK::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.SetLegIK
void RootMotion::FinalIK::GrounderVRIK::SetLegIK(::RootMotion::FinalIK::IKSolverVR::PositionOffset positionOffset, ::UnityEngine::Transform* bone, ::RootMotion::FinalIK::Grounding::Leg* leg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderVRIK::SetLegIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLegIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positionOffset), ::il2cpp_utils::ExtractType(bone), ::il2cpp_utils::ExtractType(leg)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, positionOffset, bone, leg);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OnPostSolverUpdate
void RootMotion::FinalIK::GrounderVRIK::OnPostSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderVRIK::OnPostSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OnDrawGizmosSelected
void RootMotion::FinalIK::GrounderVRIK::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderVRIK::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OnDestroy
void RootMotion::FinalIK::GrounderVRIK::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderVRIK::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OpenUserManual
void RootMotion::FinalIK::GrounderVRIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderVRIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OpenScriptReference
void RootMotion::FinalIK::GrounderVRIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderVRIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.ResetPosition
void RootMotion::FinalIK::GrounderVRIK::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GrounderVRIK::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Grounding
#include "RootMotion/FinalIK/Grounding.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis
#include "RootMotion/FinalIK/Grounding_Pelvis.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask layers
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& RootMotion::FinalIK::Grounding::dyn_layers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_layers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "layers"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxStep
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::dyn_maxStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_maxStep");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxStep"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single heightOffset
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::dyn_heightOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_heightOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "heightOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single footSpeed
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::dyn_footSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_footSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "footSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single footRadius
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::dyn_footRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_footRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "footRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single footCenterOffset
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::dyn_footCenterOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_footCenterOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "footCenterOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single prediction
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::dyn_prediction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_prediction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prediction"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single footRotationWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::dyn_footRotationWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_footRotationWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "footRotationWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single footRotationSpeed
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::dyn_footRotationSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_footRotationSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "footRotationSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxFootRotationAngle
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::dyn_maxFootRotationAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_maxFootRotationAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxFootRotationAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean rotateSolver
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::Grounding::dyn_rotateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_rotateSolver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotateSolver"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pelvisSpeed
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::dyn_pelvisSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_pelvisSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pelvisSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pelvisDamper
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::dyn_pelvisDamper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_pelvisDamper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pelvisDamper"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lowerPelvisWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::dyn_lowerPelvisWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_lowerPelvisWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lowerPelvisWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single liftPelvisWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::dyn_liftPelvisWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_liftPelvisWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "liftPelvisWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rootSphereCastRadius
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::dyn_rootSphereCastRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_rootSphereCastRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rootSphereCastRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean overstepFallsDown
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::Grounding::dyn_overstepFallsDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_overstepFallsDown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overstepFallsDown"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Quality quality
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::Grounding::Quality& RootMotion::FinalIK::Grounding::dyn_quality() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_quality");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "quality"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::Grounding::Quality*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg[] <legs>k__BackingField
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::Grounding::Leg*>& RootMotion::FinalIK::Grounding::dyn_$legs$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_$legs$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<legs>k__BackingField"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::FinalIK::Grounding::Leg*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis <pelvis>k__BackingField
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::Grounding::Pelvis*& RootMotion::FinalIK::Grounding::dyn_$pelvis$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_$pelvis$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<pelvis>k__BackingField"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::Grounding::Pelvis**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isGrounded>k__BackingField
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::Grounding::dyn_$isGrounded$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_$isGrounded$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isGrounded>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform <root>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::Grounding::dyn_$root$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_$root$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<root>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RaycastHit <rootHit>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& RootMotion::FinalIK::Grounding::dyn_$rootHit$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_$rootHit$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<rootHit>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::RaycastHit*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean initiated
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::Grounding::dyn_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::dyn_initiated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initiated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_legs
::ArrayW<::RootMotion::FinalIK::Grounding::Leg*> RootMotion::FinalIK::Grounding::get_legs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::get_legs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_legs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::RootMotion::FinalIK::Grounding::Leg*>, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_legs
void RootMotion::FinalIK::Grounding::set_legs(::ArrayW<::RootMotion::FinalIK::Grounding::Leg*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::set_legs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_legs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_pelvis
::RootMotion::FinalIK::Grounding::Pelvis* RootMotion::FinalIK::Grounding::get_pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::get_pelvis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pelvis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::Grounding::Pelvis*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_pelvis
void RootMotion::FinalIK::Grounding::set_pelvis(::RootMotion::FinalIK::Grounding::Pelvis* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::set_pelvis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pelvis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_isGrounded
bool RootMotion::FinalIK::Grounding::get_isGrounded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::get_isGrounded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isGrounded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_isGrounded
void RootMotion::FinalIK::Grounding::set_isGrounded(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::set_isGrounded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isGrounded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_root
::UnityEngine::Transform* RootMotion::FinalIK::Grounding::get_root() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::get_root");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_root", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_root
void RootMotion::FinalIK::Grounding::set_root(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::set_root");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_root", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_rootHit
::UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::get_rootHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::get_rootHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rootHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::RaycastHit, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_rootHit
void RootMotion::FinalIK::Grounding::set_rootHit(::UnityEngine::RaycastHit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::set_rootHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rootHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_rootGrounded
bool RootMotion::FinalIK::Grounding::get_rootGrounded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::get_rootGrounded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rootGrounded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_up
::UnityEngine::Vector3 RootMotion::FinalIK::Grounding::get_up() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::get_up");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_up", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_useRootRotation
bool RootMotion::FinalIK::Grounding::get_useRootRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::get_useRootRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useRootRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.GetRootHit
::UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::GetRootHit(float maxDistanceMlp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::GetRootHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRootHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxDistanceMlp)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::RaycastHit, false>(this, ___internal__method, maxDistanceMlp);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.IsValid
bool RootMotion::FinalIK::Grounding::IsValid(ByRef<::StringW> errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(errorMessage));
}
// Autogenerated method: RootMotion.FinalIK.Grounding.Initiate
void RootMotion::FinalIK::Grounding::Initiate(::UnityEngine::Transform* root, ::ArrayW<::UnityEngine::Transform*> feet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(feet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, root, feet);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.Update
void RootMotion::FinalIK::Grounding::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.GetLegsPlaneNormal
::UnityEngine::Vector3 RootMotion::FinalIK::Grounding::GetLegsPlaneNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::GetLegsPlaneNormal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLegsPlaneNormal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.Reset
void RootMotion::FinalIK::Grounding::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.LogWarning
void RootMotion::FinalIK::Grounding::LogWarning(::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::LogWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.GetVerticalOffset
float RootMotion::FinalIK::Grounding::GetVerticalOffset(::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::GetVerticalOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVerticalOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, p1, p2);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.Flatten
::UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Flatten(::UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Flatten");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flatten", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, v);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.GetFootCenterOffset
::UnityEngine::Vector3 RootMotion::FinalIK::Grounding::GetFootCenterOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::GetFootCenterOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFootCenterOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Quality
#include "RootMotion/FinalIK/Grounding.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Quality Fastest
::RootMotion::FinalIK::Grounding::Quality RootMotion::FinalIK::Grounding::Quality::_get_Fastest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Quality::_get_Fastest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::FinalIK::Grounding::Quality>("RootMotion.FinalIK", "Grounding/Quality", "Fastest"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Quality Fastest
void RootMotion::FinalIK::Grounding::Quality::_set_Fastest(::RootMotion::FinalIK::Grounding::Quality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Quality::_set_Fastest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Grounding/Quality", "Fastest", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Quality Simple
::RootMotion::FinalIK::Grounding::Quality RootMotion::FinalIK::Grounding::Quality::_get_Simple() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Quality::_get_Simple");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::FinalIK::Grounding::Quality>("RootMotion.FinalIK", "Grounding/Quality", "Simple"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Quality Simple
void RootMotion::FinalIK::Grounding::Quality::_set_Simple(::RootMotion::FinalIK::Grounding::Quality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Quality::_set_Simple");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Grounding/Quality", "Simple", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Quality Best
::RootMotion::FinalIK::Grounding::Quality RootMotion::FinalIK::Grounding::Quality::_get_Best() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Quality::_get_Best");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::FinalIK::Grounding::Quality>("RootMotion.FinalIK", "Grounding/Quality", "Best"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Quality Best
void RootMotion::FinalIK::Grounding::Quality::_set_Best(::RootMotion::FinalIK::Grounding::Quality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Quality::_set_Best");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Grounding/Quality", "Best", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::Grounding::Quality::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Quality::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isGrounded>k__BackingField
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::Grounding::Leg::dyn_$isGrounded$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_$isGrounded$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isGrounded>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <IKPosition>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Grounding::Leg::dyn_$IKPosition$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_$IKPosition$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IKPosition>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion rotationOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::Grounding::Leg::dyn_rotationOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_rotationOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <initiated>k__BackingField
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::Grounding::Leg::dyn_$initiated$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_$initiated$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<initiated>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <heightFromGround>k__BackingField
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::Leg::dyn_$heightFromGround$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_$heightFromGround$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<heightFromGround>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <velocity>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Grounding::Leg::dyn_$velocity$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_$velocity$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<velocity>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform <transform>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::Grounding::Leg::dyn_$transform$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_$transform$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<transform>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <IKOffset>k__BackingField
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::Leg::dyn_$IKOffset$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_$IKOffset$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IKOffset>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean invertFootCenter
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::Grounding::Leg::dyn_invertFootCenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_invertFootCenter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "invertFootCenter"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RaycastHit <heelHit>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& RootMotion::FinalIK::Grounding::Leg::dyn_$heelHit$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_$heelHit$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<heelHit>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::RaycastHit*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RaycastHit <capsuleHit>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& RootMotion::FinalIK::Grounding::Leg::dyn_$capsuleHit$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_$capsuleHit$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<capsuleHit>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::RaycastHit*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.Grounding grounding
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::Grounding*& RootMotion::FinalIK::Grounding::Leg::dyn_grounding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_grounding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grounding"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::Grounding**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastTime
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::Leg::dyn_lastTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_lastTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single deltaTime
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::Leg::dyn_deltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_deltaTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deltaTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Grounding::Leg::dyn_lastPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_lastPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion toHitNormal
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::Grounding::Leg::dyn_toHitNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_toHitNormal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "toHitNormal"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion r
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::Grounding::Leg::dyn_r() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_r");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "r"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 up
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Grounding::Leg::dyn_up() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_up");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "up"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean doOverrideFootPosition
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::Grounding::Leg::dyn_doOverrideFootPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_doOverrideFootPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doOverrideFootPosition"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 overrideFootPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Grounding::Leg::dyn_overrideFootPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_overrideFootPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overrideFootPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 transformPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Grounding::Leg::dyn_transformPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::dyn_transformPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transformPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_isGrounded
bool RootMotion::FinalIK::Grounding::Leg::get_isGrounded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::get_isGrounded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isGrounded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_isGrounded
void RootMotion::FinalIK::Grounding::Leg::set_isGrounded(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::set_isGrounded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isGrounded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_IKPosition
::UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Leg::get_IKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::get_IKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_IKPosition
void RootMotion::FinalIK::Grounding::Leg::set_IKPosition(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::set_IKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_initiated
bool RootMotion::FinalIK::Grounding::Leg::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_initiated
void RootMotion::FinalIK::Grounding::Leg::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_heightFromGround
float RootMotion::FinalIK::Grounding::Leg::get_heightFromGround() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::get_heightFromGround");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_heightFromGround", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_heightFromGround
void RootMotion::FinalIK::Grounding::Leg::set_heightFromGround(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::set_heightFromGround");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_heightFromGround", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_velocity
::UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Leg::get_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::get_velocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_velocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_velocity
void RootMotion::FinalIK::Grounding::Leg::set_velocity(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::set_velocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_velocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_transform
::UnityEngine::Transform* RootMotion::FinalIK::Grounding::Leg::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::get_transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_transform
void RootMotion::FinalIK::Grounding::Leg::set_transform(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::set_transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_IKOffset
float RootMotion::FinalIK::Grounding::Leg::get_IKOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::get_IKOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IKOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_IKOffset
void RootMotion::FinalIK::Grounding::Leg::set_IKOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::set_IKOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IKOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_heelHit
::UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::get_heelHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::get_heelHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_heelHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::RaycastHit, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_heelHit
void RootMotion::FinalIK::Grounding::Leg::set_heelHit(::UnityEngine::RaycastHit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::set_heelHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_heelHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_capsuleHit
::UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::get_capsuleHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::get_capsuleHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_capsuleHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::RaycastHit, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_capsuleHit
void RootMotion::FinalIK::Grounding::Leg::set_capsuleHit(::UnityEngine::RaycastHit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::set_capsuleHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_capsuleHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_GetHitPoint
::UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::get_GetHitPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::get_GetHitPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_GetHitPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::RaycastHit, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_stepHeightFromGround
float RootMotion::FinalIK::Grounding::Leg::get_stepHeightFromGround() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::get_stepHeightFromGround");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_stepHeightFromGround", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_rootYOffset
float RootMotion::FinalIK::Grounding::Leg::get_rootYOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::get_rootYOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rootYOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.SetFootPosition
void RootMotion::FinalIK::Grounding::Leg::SetFootPosition(::UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::SetFootPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFootPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.Initiate
void RootMotion::FinalIK::Grounding::Leg::Initiate(::RootMotion::FinalIK::Grounding* grounding, ::UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(grounding), ::il2cpp_utils::ExtractType(transform)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, grounding, transform);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.OnEnable
void RootMotion::FinalIK::Grounding::Leg::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.Reset
void RootMotion::FinalIK::Grounding::Leg::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.Process
void RootMotion::FinalIK::Grounding::Leg::Process() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::Process");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.GetCapsuleHit
::UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::GetCapsuleHit(::UnityEngine::Vector3 offsetFromHeel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::GetCapsuleHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCapsuleHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offsetFromHeel)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::RaycastHit, false>(this, ___internal__method, offsetFromHeel);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.GetRaycastHit
::UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::GetRaycastHit(::UnityEngine::Vector3 offsetFromHeel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::GetRaycastHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRaycastHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offsetFromHeel)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::RaycastHit, false>(this, ___internal__method, offsetFromHeel);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.RotateNormal
::UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Leg::RotateNormal(::UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::RotateNormal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateNormal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normal)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, normal);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.SetFootToPoint
void RootMotion::FinalIK::Grounding::Leg::SetFootToPoint(::UnityEngine::Vector3 normal, ::UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::SetFootToPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFootToPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normal), ::il2cpp_utils::ExtractType(point)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, normal, point);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.SetFootToPlane
void RootMotion::FinalIK::Grounding::Leg::SetFootToPlane(::UnityEngine::Vector3 planeNormal, ::UnityEngine::Vector3 planePoint, ::UnityEngine::Vector3 heelHitPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::SetFootToPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFootToPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(planeNormal), ::il2cpp_utils::ExtractType(planePoint), ::il2cpp_utils::ExtractType(heelHitPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, planeNormal, planePoint, heelHitPoint);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.GetHeightFromGround
float RootMotion::FinalIK::Grounding::Leg::GetHeightFromGround(::UnityEngine::Vector3 hitPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::GetHeightFromGround");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHeightFromGround", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hitPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, hitPoint);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.RotateFoot
void RootMotion::FinalIK::Grounding::Leg::RotateFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::RotateFoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateFoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.GetRotationOffsetTarget
::UnityEngine::Quaternion RootMotion::FinalIK::Grounding::Leg::GetRotationOffsetTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Leg::GetRotationOffsetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRotationOffsetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis
#include "RootMotion/FinalIK/Grounding_Pelvis.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <IKOffset>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Grounding::Pelvis::dyn_$IKOffset$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Pelvis::dyn_$IKOffset$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IKOffset>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <heightOffset>k__BackingField
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::Pelvis::dyn_$heightOffset$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Pelvis::dyn_$heightOffset$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<heightOffset>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.Grounding grounding
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::Grounding*& RootMotion::FinalIK::Grounding::Pelvis::dyn_grounding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Pelvis::dyn_grounding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grounding"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::Grounding**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastRootPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::Grounding::Pelvis::dyn_lastRootPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Pelvis::dyn_lastRootPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastRootPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single damperF
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::Pelvis::dyn_damperF() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Pelvis::dyn_damperF");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "damperF"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean initiated
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::Grounding::Pelvis::dyn_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Pelvis::dyn_initiated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initiated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastTime
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::Grounding::Pelvis::dyn_lastTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Pelvis::dyn_lastTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis.get_IKOffset
::UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Pelvis::get_IKOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Pelvis::get_IKOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IKOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis.set_IKOffset
void RootMotion::FinalIK::Grounding::Pelvis::set_IKOffset(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Pelvis::set_IKOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IKOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis.get_heightOffset
float RootMotion::FinalIK::Grounding::Pelvis::get_heightOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Pelvis::get_heightOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_heightOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis.set_heightOffset
void RootMotion::FinalIK::Grounding::Pelvis::set_heightOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Pelvis::set_heightOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_heightOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis.Initiate
void RootMotion::FinalIK::Grounding::Pelvis::Initiate(::RootMotion::FinalIK::Grounding* grounding) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Pelvis::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(grounding)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, grounding);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis.Reset
void RootMotion::FinalIK::Grounding::Pelvis::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Pelvis::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis.OnEnable
void RootMotion::FinalIK::Grounding::Pelvis::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Pelvis::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis.Process
void RootMotion::FinalIK::Grounding::Pelvis::Process(float lowestOffset, float highestOffset, bool isGrounded) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Pelvis::Process");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowestOffset), ::il2cpp_utils::ExtractType(highestOffset), ::il2cpp_utils::ExtractType(isGrounded)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lowestOffset, highestOffset, isGrounded);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.AimIK
#include "RootMotion/FinalIK/AimIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverAim
#include "RootMotion/FinalIK/IKSolverAim.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverAim solver
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverAim*& RootMotion::FinalIK::AimIK::dyn_solver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::AimIK::dyn_solver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solver"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverAim**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.OpenSetupTutorial
void RootMotion::FinalIK::AimIK::OpenSetupTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::AimIK::OpenSetupTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenSetupTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.SupportGroup
void RootMotion::FinalIK::AimIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::AimIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.ASThread
void RootMotion::FinalIK::AimIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::AimIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.OpenUserManual
void RootMotion::FinalIK::AimIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::AimIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.OpenScriptReference
void RootMotion::FinalIK::AimIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::AimIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.GetIKSolver
::RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::AimIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::AimIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ArmIK
#include "RootMotion/FinalIK/ArmIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverArm
#include "RootMotion/FinalIK/IKSolverArm.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverArm solver
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverArm*& RootMotion::FinalIK::ArmIK::dyn_solver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ArmIK::dyn_solver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solver"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverArm**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.ArmIK.SupportGroup
void RootMotion::FinalIK::ArmIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ArmIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ArmIK.ASThread
void RootMotion::FinalIK::ArmIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ArmIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ArmIK.OpenUserManual
void RootMotion::FinalIK::ArmIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ArmIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ArmIK.OpenScriptReference
void RootMotion::FinalIK::ArmIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ArmIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ArmIK.GetIKSolver
::RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::ArmIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::ArmIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.CCDIK
#include "RootMotion/FinalIK/CCDIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverCCD
#include "RootMotion/FinalIK/IKSolverCCD.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverCCD solver
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverCCD*& RootMotion::FinalIK::CCDIK::dyn_solver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::CCDIK::dyn_solver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solver"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverCCD**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.CCDIK.SupportGroup
void RootMotion::FinalIK::CCDIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::CCDIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.CCDIK.ASThread
void RootMotion::FinalIK::CCDIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::CCDIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.CCDIK.OpenUserManual
void RootMotion::FinalIK::CCDIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::CCDIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.CCDIK.OpenScriptReference
void RootMotion::FinalIK::CCDIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::CCDIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.CCDIK.GetIKSolver
::RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::CCDIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::CCDIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FABRIK
#include "RootMotion/FinalIK/FABRIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverFABRIK
#include "RootMotion/FinalIK/IKSolverFABRIK.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverFABRIK solver
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverFABRIK*& RootMotion::FinalIK::FABRIK::dyn_solver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIK::dyn_solver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solver"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverFABRIK**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.FABRIK.SupportGroup
void RootMotion::FinalIK::FABRIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIK.ASThread
void RootMotion::FinalIK::FABRIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIK.OpenUserManual
void RootMotion::FinalIK::FABRIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIK.OpenScriptReference
void RootMotion::FinalIK::FABRIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIK.GetIKSolver
::RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::FABRIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FABRIKRoot
#include "RootMotion/FinalIK/FABRIKRoot.hpp"
// Including type: RootMotion.FinalIK.IKSolverFABRIKRoot
#include "RootMotion/FinalIK/IKSolverFABRIKRoot.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverFABRIKRoot solver
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverFABRIKRoot*& RootMotion::FinalIK::FABRIKRoot::dyn_solver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIKRoot::dyn_solver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solver"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverFABRIKRoot**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.SupportGroup
void RootMotion::FinalIK::FABRIKRoot::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIKRoot::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.ASThread
void RootMotion::FinalIK::FABRIKRoot::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIKRoot::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.OpenUserManual
void RootMotion::FinalIK::FABRIKRoot::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIKRoot::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.OpenScriptReference
void RootMotion::FinalIK::FABRIKRoot::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIKRoot::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.GetIKSolver
::RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::FABRIKRoot::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIKRoot::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
// Including type: RootMotion.BipedReferences
#include "RootMotion/BipedReferences.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.BipedReferences references
[[deprecated("Use field access instead!")]] ::RootMotion::BipedReferences*& RootMotion::FinalIK::FullBodyBipedIK::dyn_references() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FullBodyBipedIK::dyn_references");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "references"))->offset;
  return *reinterpret_cast<::RootMotion::BipedReferences**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverFullBodyBiped solver
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverFullBodyBiped*& RootMotion::FinalIK::FullBodyBipedIK::dyn_solver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FullBodyBipedIK::dyn_solver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solver"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverFullBodyBiped**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.OpenSetupTutorial
void RootMotion::FinalIK::FullBodyBipedIK::OpenSetupTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FullBodyBipedIK::OpenSetupTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenSetupTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.OpenInspectorTutorial
void RootMotion::FinalIK::FullBodyBipedIK::OpenInspectorTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FullBodyBipedIK::OpenInspectorTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenInspectorTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.SupportGroup
void RootMotion::FinalIK::FullBodyBipedIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FullBodyBipedIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.ASThread
void RootMotion::FinalIK::FullBodyBipedIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FullBodyBipedIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.SetReferences
void RootMotion::FinalIK::FullBodyBipedIK::SetReferences(::RootMotion::BipedReferences* references, ::UnityEngine::Transform* rootNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FullBodyBipedIK::SetReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(rootNode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, references, rootNode);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.ReferencesError
bool RootMotion::FinalIK::FullBodyBipedIK::ReferencesError(ByRef<::StringW> errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FullBodyBipedIK::ReferencesError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReferencesError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(errorMessage));
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.ReferencesWarning
bool RootMotion::FinalIK::FullBodyBipedIK::ReferencesWarning(ByRef<::StringW> warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FullBodyBipedIK::ReferencesWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReferencesWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(warningMessage)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(warningMessage));
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.Reinitiate
void RootMotion::FinalIK::FullBodyBipedIK::Reinitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FullBodyBipedIK::Reinitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reinitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.AutoDetectReferences
void RootMotion::FinalIK::FullBodyBipedIK::AutoDetectReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FullBodyBipedIK::AutoDetectReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AutoDetectReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.OpenUserManual
void RootMotion::FinalIK::FullBodyBipedIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FullBodyBipedIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.OpenScriptReference
void RootMotion::FinalIK::FullBodyBipedIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FullBodyBipedIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.GetIKSolver
::RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::FullBodyBipedIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FullBodyBipedIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IK.GetIKSolver
::RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::IK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.OpenUserManual
void RootMotion::FinalIK::IK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.OpenScriptReference
void RootMotion::FinalIK::IK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.UpdateSolver
void RootMotion::FinalIK::IK::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IK::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.InitiateSolver
void RootMotion::FinalIK::IK::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IK::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.FixTransforms
void RootMotion::FinalIK::IK::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IK::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKExecutionOrder
#include "RootMotion/FinalIK/IKExecutionOrder.hpp"
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IK[] IKComponents
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::IK*>& RootMotion::FinalIK::IKExecutionOrder::dyn_IKComponents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKExecutionOrder::dyn_IKComponents");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IKComponents"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::FinalIK::IK*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Animator animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& RootMotion::FinalIK::IKExecutionOrder::dyn_animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKExecutionOrder::dyn_animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean fixedFrame
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::IKExecutionOrder::dyn_fixedFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKExecutionOrder::dyn_fixedFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fixedFrame"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.get_animatePhysics
bool RootMotion::FinalIK::IKExecutionOrder::get_animatePhysics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKExecutionOrder::get_animatePhysics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animatePhysics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.Start
void RootMotion::FinalIK::IKExecutionOrder::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKExecutionOrder::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.Update
void RootMotion::FinalIK::IKExecutionOrder::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKExecutionOrder::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.FixedUpdate
void RootMotion::FinalIK::IKExecutionOrder::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKExecutionOrder::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.LateUpdate
void RootMotion::FinalIK::IKExecutionOrder::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKExecutionOrder::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.FixTransforms
void RootMotion::FinalIK::IKExecutionOrder::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKExecutionOrder::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.LegIK
#include "RootMotion/FinalIK/LegIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverLeg
#include "RootMotion/FinalIK/IKSolverLeg.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverLeg solver
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverLeg*& RootMotion::FinalIK::LegIK::dyn_solver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LegIK::dyn_solver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solver"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverLeg**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.LegIK.SupportGroup
void RootMotion::FinalIK::LegIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LegIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LegIK.ASThread
void RootMotion::FinalIK::LegIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LegIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LegIK.OpenUserManual
void RootMotion::FinalIK::LegIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LegIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LegIK.OpenScriptReference
void RootMotion::FinalIK::LegIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LegIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LegIK.GetIKSolver
::RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::LegIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LegIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.LimbIK
#include "RootMotion/FinalIK/LimbIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverLimb solver
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverLimb*& RootMotion::FinalIK::LimbIK::dyn_solver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LimbIK::dyn_solver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solver"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverLimb**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.LimbIK.SupportGroup
void RootMotion::FinalIK::LimbIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LimbIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LimbIK.ASThread
void RootMotion::FinalIK::LimbIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LimbIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LimbIK.OpenUserManual
void RootMotion::FinalIK::LimbIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LimbIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LimbIK.OpenScriptReference
void RootMotion::FinalIK::LimbIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LimbIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LimbIK.GetIKSolver
::RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::LimbIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LimbIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.LookAtIK
#include "RootMotion/FinalIK/LookAtIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverLookAt
#include "RootMotion/FinalIK/IKSolverLookAt.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverLookAt solver
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverLookAt*& RootMotion::FinalIK::LookAtIK::dyn_solver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LookAtIK::dyn_solver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solver"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverLookAt**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.LookAtIK.SupportGroup
void RootMotion::FinalIK::LookAtIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LookAtIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtIK.ASThread
void RootMotion::FinalIK::LookAtIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LookAtIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtIK.OpenUserManual
void RootMotion::FinalIK::LookAtIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LookAtIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtIK.OpenScriptReference
void RootMotion::FinalIK::LookAtIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LookAtIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtIK.GetIKSolver
::RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::LookAtIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::LookAtIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.TrigonometricIK
#include "RootMotion/FinalIK/TrigonometricIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverTrigonometric
#include "RootMotion/FinalIK/IKSolverTrigonometric.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverTrigonometric solver
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverTrigonometric*& RootMotion::FinalIK::TrigonometricIK::dyn_solver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::TrigonometricIK::dyn_solver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solver"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverTrigonometric**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.SupportGroup
void RootMotion::FinalIK::TrigonometricIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::TrigonometricIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.ASThread
void RootMotion::FinalIK::TrigonometricIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::TrigonometricIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.OpenUserManual
void RootMotion::FinalIK::TrigonometricIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::TrigonometricIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.OpenScriptReference
void RootMotion::FinalIK::TrigonometricIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::TrigonometricIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.GetIKSolver
::RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::TrigonometricIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::TrigonometricIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIK
#include "RootMotion/FinalIK/VRIK.hpp"
// Including type: RootMotion.FinalIK.VRIK/RootMotion.FinalIK.References
#include "RootMotion/FinalIK/VRIK_References.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR
#include "RootMotion/FinalIK/IKSolverVR.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.VRIK/RootMotion.FinalIK.References references
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::VRIK::References*& RootMotion::FinalIK::VRIK::dyn_references() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::dyn_references");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "references"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::VRIK::References**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolverVR solver
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolverVR*& RootMotion::FinalIK::VRIK::dyn_solver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::dyn_solver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solver"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolverVR**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.OpenSetupTutorial
void RootMotion::FinalIK::VRIK::OpenSetupTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::OpenSetupTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenSetupTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.AutoDetectReferences
void RootMotion::FinalIK::VRIK::AutoDetectReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::AutoDetectReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AutoDetectReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.GuessHandOrientations
void RootMotion::FinalIK::VRIK::GuessHandOrientations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::GuessHandOrientations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GuessHandOrientations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.OpenUserManual
void RootMotion::FinalIK::VRIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.OpenScriptReference
void RootMotion::FinalIK::VRIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.GetIKSolver
::RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::VRIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.InitiateSolver
void RootMotion::FinalIK::VRIK::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.UpdateSolver
void RootMotion::FinalIK::VRIK::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIK/RootMotion.FinalIK.References
#include "RootMotion/FinalIK/VRIK_References.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform root
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_root() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_root");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "root"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform pelvis
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_pelvis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pelvis"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform spine
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_spine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_spine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spine"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform chest
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_chest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_chest");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chest"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform neck
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_neck() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_neck");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "neck"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform head
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_head() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_head");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "head"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftShoulder
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_leftShoulder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_leftShoulder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftShoulder"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftUpperArm
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_leftUpperArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_leftUpperArm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftUpperArm"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftForearm
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_leftForearm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_leftForearm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftForearm"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftHand
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_leftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_leftHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHand"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightShoulder
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_rightShoulder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_rightShoulder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightShoulder"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightUpperArm
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_rightUpperArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_rightUpperArm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightUpperArm"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightForearm
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_rightForearm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_rightForearm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightForearm"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightHand
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_rightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_rightHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHand"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftThigh
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_leftThigh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_leftThigh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftThigh"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftCalf
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_leftCalf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_leftCalf");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftCalf"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftFoot
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_leftFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_leftFoot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftFoot"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftToes
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_leftToes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_leftToes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftToes"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightThigh
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_rightThigh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_rightThigh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightThigh"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightCalf
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_rightCalf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_rightCalf");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightCalf"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightFoot
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_rightFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_rightFoot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightFoot"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightToes
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::VRIK::References::dyn_rightToes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::dyn_rightToes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightToes"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.VRIK/RootMotion.FinalIK.References.get_isFilled
bool RootMotion::FinalIK::VRIK::References::get_isFilled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::get_isFilled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFilled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK/RootMotion.FinalIK.References.get_isEmpty
bool RootMotion::FinalIK::VRIK::References::get_isEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::get_isEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK/RootMotion.FinalIK.References.GetTransforms
::ArrayW<::UnityEngine::Transform*> RootMotion::FinalIK::VRIK::References::GetTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::GetTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Transform*>, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK/RootMotion.FinalIK.References.AutoDetectReferences
bool RootMotion::FinalIK::VRIK::References::AutoDetectReferences(::UnityEngine::Transform* root, ByRef<::RootMotion::FinalIK::VRIK::References*> references) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIK::References::AutoDetectReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIK/References", "AutoDetectReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractIndependentType<::RootMotion::FinalIK::VRIK::References*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, root, byref(references));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FABRIKChain
#include "RootMotion/FinalIK/FABRIKChain.hpp"
// Including type: RootMotion.FinalIK.FABRIK
#include "RootMotion/FinalIK/FABRIK.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.FABRIK ik
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::FABRIK*& RootMotion::FinalIK::FABRIKChain::dyn_ik() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIKChain::dyn_ik");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ik"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::FABRIK**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pull
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FABRIKChain::dyn_pull() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIKChain::dyn_pull");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pull"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pin
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FABRIKChain::dyn_pin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIKChain::dyn_pin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pin"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32[] children
[[deprecated("Use field access instead!")]] ::ArrayW<int>& RootMotion::FinalIK::FABRIKChain::dyn_children() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIKChain::dyn_children");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "children"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKChain.IsValid
bool RootMotion::FinalIK::FABRIKChain::IsValid(ByRef<::StringW> message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIKChain::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(message));
}
// Autogenerated method: RootMotion.FinalIK.FABRIKChain.Initiate
void RootMotion::FinalIK::FABRIKChain::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIKChain::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKChain.Stage1
void RootMotion::FinalIK::FABRIKChain::Stage1(::ArrayW<::RootMotion::FinalIK::FABRIKChain*> chain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIKChain::Stage1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stage1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, chain);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKChain.Stage2
void RootMotion::FinalIK::FABRIKChain::Stage2(::UnityEngine::Vector3 rootPosition, ::ArrayW<::RootMotion::FinalIK::FABRIKChain*> chain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIKChain::Stage2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stage2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootPosition), ::il2cpp_utils::ExtractType(chain)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rootPosition, chain);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKChain.GetCentroid
::UnityEngine::Vector3 RootMotion::FinalIK::FABRIKChain::GetCentroid(::ArrayW<::RootMotion::FinalIK::FABRIKChain*> chain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FABRIKChain::GetCentroid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCentroid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, chain);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FBBIKArmBending
#include "RootMotion/FinalIK/FBBIKArmBending.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.FullBodyBipedIK ik
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::FullBodyBipedIK*& RootMotion::FinalIK::FBBIKArmBending::dyn_ik() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKArmBending::dyn_ik");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ik"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::FullBodyBipedIK**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 bendDirectionOffsetLeft
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::FBBIKArmBending::dyn_bendDirectionOffsetLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKArmBending::dyn_bendDirectionOffsetLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bendDirectionOffsetLeft"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 bendDirectionOffsetRight
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::FBBIKArmBending::dyn_bendDirectionOffsetRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKArmBending::dyn_bendDirectionOffsetRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bendDirectionOffsetRight"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 characterSpaceBendOffsetLeft
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::FBBIKArmBending::dyn_characterSpaceBendOffsetLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKArmBending::dyn_characterSpaceBendOffsetLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "characterSpaceBendOffsetLeft"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 characterSpaceBendOffsetRight
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::FBBIKArmBending::dyn_characterSpaceBendOffsetRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKArmBending::dyn_characterSpaceBendOffsetRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "characterSpaceBendOffsetRight"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion leftHandTargetRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::FBBIKArmBending::dyn_leftHandTargetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKArmBending::dyn_leftHandTargetRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandTargetRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion rightHandTargetRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::FBBIKArmBending::dyn_rightHandTargetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKArmBending::dyn_rightHandTargetRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandTargetRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean initiated
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::FBBIKArmBending::dyn_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKArmBending::dyn_initiated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initiated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKArmBending.LateUpdate
void RootMotion::FinalIK::FBBIKArmBending::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKArmBending::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKArmBending.OnPostFBBIK
void RootMotion::FinalIK::FBBIKArmBending::OnPostFBBIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKArmBending::OnPostFBBIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostFBBIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKArmBending.OnDestroy
void RootMotion::FinalIK::FBBIKArmBending::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKArmBending::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FBBIKHeadEffector
#include "RootMotion/FinalIK/FBBIKHeadEffector.hpp"
// Including type: RootMotion.FinalIK.FBBIKHeadEffector/RootMotion.FinalIK.BendBone
#include "RootMotion/FinalIK/FBBIKHeadEffector_BendBone.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.UpdateDelegate
#include "RootMotion/FinalIK/IKSolver_UpdateDelegate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.FullBodyBipedIK ik
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::FullBodyBipedIK*& RootMotion::FinalIK::FBBIKHeadEffector::dyn_ik() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_ik");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ik"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::FullBodyBipedIK**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single positionWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::dyn_positionWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_positionWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "positionWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bodyWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::dyn_bodyWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_bodyWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bodyWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single thighWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::dyn_thighWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_thighWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thighWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean handsPullBody
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::FBBIKHeadEffector::dyn_handsPullBody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_handsPullBody");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handsPullBody"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rotationWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::dyn_rotationWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_rotationWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bodyClampWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::dyn_bodyClampWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_bodyClampWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bodyClampWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single headClampWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::dyn_headClampWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_headClampWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headClampWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bendWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::dyn_bendWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_bendWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bendWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.FBBIKHeadEffector/RootMotion.FinalIK.BendBone[] bendBones
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::FBBIKHeadEffector::BendBone*>& RootMotion::FinalIK::FBBIKHeadEffector::dyn_bendBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_bendBones");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bendBones"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::FinalIK::FBBIKHeadEffector::BendBone*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single CCDWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::dyn_CCDWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_CCDWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CCDWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single roll
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::dyn_roll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_roll");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "roll"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single damper
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::dyn_damper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_damper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "damper"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] CCDBones
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& RootMotion::FinalIK::FBBIKHeadEffector::dyn_CCDBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_CCDBones");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CCDBones"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single postStretchWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::dyn_postStretchWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_postStretchWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "postStretchWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxStretch
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::dyn_maxStretch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_maxStretch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxStretch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single stretchDamper
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::dyn_stretchDamper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_stretchDamper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stretchDamper"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean fixHead
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::FBBIKHeadEffector::dyn_fixHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_fixHead");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fixHead"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] stretchBones
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& RootMotion::FinalIK::FBBIKHeadEffector::dyn_stretchBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_stretchBones");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stretchBones"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 chestDirection
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::FBBIKHeadEffector::dyn_chestDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_chestDirection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestDirection"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single chestDirectionWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::dyn_chestDirectionWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_chestDirectionWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestDirectionWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] chestBones
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& RootMotion::FinalIK::FBBIKHeadEffector::dyn_chestBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_chestBones");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestBones"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.UpdateDelegate OnPostHeadEffectorFK
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolver::UpdateDelegate*& RootMotion::FinalIK::FBBIKHeadEffector::dyn_OnPostHeadEffectorFK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_OnPostHeadEffectorFK");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnPostHeadEffectorFK"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolver::UpdateDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 offset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::FBBIKHeadEffector::dyn_offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 headToBody
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::FBBIKHeadEffector::dyn_headToBody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_headToBody");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headToBody"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 shoulderCenterToHead
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::FBBIKHeadEffector::dyn_shoulderCenterToHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_shoulderCenterToHead");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shoulderCenterToHead"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 headToLeftThigh
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::FBBIKHeadEffector::dyn_headToLeftThigh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_headToLeftThigh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headToLeftThigh"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 headToRightThigh
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::FBBIKHeadEffector::dyn_headToRightThigh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_headToRightThigh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headToRightThigh"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 leftShoulderPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::FBBIKHeadEffector::dyn_leftShoulderPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_leftShoulderPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftShoulderPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 rightShoulderPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::FBBIKHeadEffector::dyn_rightShoulderPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_rightShoulderPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightShoulderPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single shoulderDist
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::dyn_shoulderDist() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_shoulderDist");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shoulderDist"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single leftShoulderDist
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::dyn_leftShoulderDist() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_leftShoulderDist");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftShoulderDist"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single rightShoulderDist
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::dyn_rightShoulderDist() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_rightShoulderDist");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightShoulderDist"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion chestRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::FBBIKHeadEffector::dyn_chestRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_chestRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion headRotationRelativeToRoot
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::FBBIKHeadEffector::dyn_headRotationRelativeToRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_headRotationRelativeToRoot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headRotationRelativeToRoot"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion[] ccdDefaultLocalRotations
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& RootMotion::FinalIK::FBBIKHeadEffector::dyn_ccdDefaultLocalRotations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_ccdDefaultLocalRotations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ccdDefaultLocalRotations"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 headLocalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::FBBIKHeadEffector::dyn_headLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_headLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headLocalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion headLocalRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::FBBIKHeadEffector::dyn_headLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_headLocalRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headLocalRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] stretchLocalPositions
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& RootMotion::FinalIK::FBBIKHeadEffector::dyn_stretchLocalPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_stretchLocalPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stretchLocalPositions"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion[] stretchLocalRotations
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& RootMotion::FinalIK::FBBIKHeadEffector::dyn_stretchLocalRotations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_stretchLocalRotations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stretchLocalRotations"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] chestLocalPositions
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& RootMotion::FinalIK::FBBIKHeadEffector::dyn_chestLocalPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_chestLocalPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestLocalPositions"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion[] chestLocalRotations
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& RootMotion::FinalIK::FBBIKHeadEffector::dyn_chestLocalRotations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_chestLocalRotations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestLocalRotations"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 bendBonesCount
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::FBBIKHeadEffector::dyn_bendBonesCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_bendBonesCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bendBonesCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 ccdBonesCount
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::FBBIKHeadEffector::dyn_ccdBonesCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_ccdBonesCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ccdBonesCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 stretchBonesCount
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::FBBIKHeadEffector::dyn_stretchBonesCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_stretchBonesCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stretchBonesCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 chestBonesCount
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::FBBIKHeadEffector::dyn_chestBonesCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::dyn_chestBonesCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestBonesCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.Start
void RootMotion::FinalIK::FBBIKHeadEffector::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.OnStoreDefaultLocalState
void RootMotion::FinalIK::FBBIKHeadEffector::OnStoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::OnStoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnStoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.OnFixTransforms
void RootMotion::FinalIK::FBBIKHeadEffector::OnFixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::OnFixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.OnPreRead
void RootMotion::FinalIK::FBBIKHeadEffector::OnPreRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::OnPreRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.SpineBend
void RootMotion::FinalIK::FBBIKHeadEffector::SpineBend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::SpineBend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpineBend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.CCDPass
void RootMotion::FinalIK::FBBIKHeadEffector::CCDPass() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::CCDPass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CCDPass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.Iterate
void RootMotion::FinalIK::FBBIKHeadEffector::Iterate(int iteration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::Iterate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Iterate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(iteration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, iteration);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.OnPostUpdate
void RootMotion::FinalIK::FBBIKHeadEffector::OnPostUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::OnPostUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.ChestDirection
void RootMotion::FinalIK::FBBIKHeadEffector::ChestDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::ChestDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChestDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.PostStretching
void RootMotion::FinalIK::FBBIKHeadEffector::PostStretching() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::PostStretching");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PostStretching", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.LerpSolverPosition
void RootMotion::FinalIK::FBBIKHeadEffector::LerpSolverPosition(::RootMotion::FinalIK::IKEffector* effector, ::UnityEngine::Vector3 position, float weight, ::UnityEngine::Vector3 offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::LerpSolverPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LerpSolverPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(offset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, effector, position, weight, offset);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.Solve
void RootMotion::FinalIK::FBBIKHeadEffector::Solve(ByRef<::UnityEngine::Vector3> pos1, ByRef<::UnityEngine::Vector3> pos2, float nominalDistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos1), ::il2cpp_utils::ExtractType(pos2), ::il2cpp_utils::ExtractType(nominalDistance)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pos1), byref(pos2), nominalDistance);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.OnDestroy
void RootMotion::FinalIK::FBBIKHeadEffector::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FBBIKHeadEffector/RootMotion.FinalIK.BendBone
#include "RootMotion/FinalIK/FBBIKHeadEffector_BendBone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::FBBIKHeadEffector::BendBone::dyn_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::BendBone::dyn_transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single weight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBBIKHeadEffector::BendBone::dyn_weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::BendBone::dyn_weight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "weight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion defaultLocalRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::FBBIKHeadEffector::BendBone::dyn_defaultLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::BendBone::dyn_defaultLocalRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultLocalRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector/RootMotion.FinalIK.BendBone.StoreDefaultLocalState
void RootMotion::FinalIK::FBBIKHeadEffector::BendBone::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::BendBone::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector/RootMotion.FinalIK.BendBone.FixTransforms
void RootMotion::FinalIK::FBBIKHeadEffector::BendBone::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBBIKHeadEffector::BendBone::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FBIKChain
#include "RootMotion/FinalIK/FBIKChain.hpp"
// Including type: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint
#include "RootMotion/FinalIK/FBIKChain_ChildConstraint.hpp"
// Including type: RootMotion.FinalIK.IKConstraintBend
#include "RootMotion/FinalIK/IKConstraintBend.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Node
#include "RootMotion/FinalIK/IKSolver_Node.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single maxLimbLength
float RootMotion::FinalIK::FBIKChain::_get_maxLimbLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::_get_maxLimbLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("RootMotion.FinalIK", "FBIKChain", "maxLimbLength"));
}
// Autogenerated static field setter
// Set static field: static private System.Single maxLimbLength
void RootMotion::FinalIK::FBIKChain::_set_maxLimbLength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::_set_maxLimbLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FBIKChain", "maxLimbLength", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Single pin
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::dyn_pin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_pin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pin"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pull
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::dyn_pull() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_pull");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pull"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single push
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::dyn_push() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_push");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "push"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pushParent
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::dyn_pushParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_pushParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pushParent"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single reach
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::dyn_reach() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_reach");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reach"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing reachSmoothing
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::FBIKChain::Smoothing& RootMotion::FinalIK::FBIKChain::dyn_reachSmoothing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_reachSmoothing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reachSmoothing"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::FBIKChain::Smoothing*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing pushSmoothing
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::FBIKChain::Smoothing& RootMotion::FinalIK::FBIKChain::dyn_pushSmoothing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_pushSmoothing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pushSmoothing"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::FBIKChain::Smoothing*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Node[] nodes
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::IKSolver::Node*>& RootMotion::FinalIK::FBIKChain::dyn_nodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_nodes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nodes"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::FinalIK::IKSolver::Node*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32[] children
[[deprecated("Use field access instead!")]] ::ArrayW<int>& RootMotion::FinalIK::FBIKChain::dyn_children() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_children");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "children"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint[] childConstraints
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::FBIKChain::ChildConstraint*>& RootMotion::FinalIK::FBIKChain::dyn_childConstraints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_childConstraints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "childConstraints"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::FinalIK::FBIKChain::ChildConstraint*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKConstraintBend bendConstraint
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKConstraintBend*& RootMotion::FinalIK::FBIKChain::dyn_bendConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_bendConstraint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bendConstraint"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKConstraintBend**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single rootLength
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::dyn_rootLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_rootLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rootLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean initiated
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::FBIKChain::dyn_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_initiated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initiated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single length
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::dyn_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_length");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "length"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single distance
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::dyn_distance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_distance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point p
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolver::Point*& RootMotion::FinalIK::FBIKChain::dyn_p() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_p");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "p"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolver::Point**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single reachForce
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::dyn_reachForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_reachForce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reachForce"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single pullParentSum
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::dyn_pullParentSum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_pullParentSum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pullParentSum"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] crossFades
[[deprecated("Use field access instead!")]] ::ArrayW<float>& RootMotion::FinalIK::FBIKChain::dyn_crossFades() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_crossFades");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "crossFades"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single sqrMag1
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::dyn_sqrMag1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_sqrMag1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sqrMag1"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single sqrMag2
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::dyn_sqrMag2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_sqrMag2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sqrMag2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single sqrMagDif
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::dyn_sqrMagDif() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::dyn_sqrMagDif");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sqrMagDif"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SetNodes
void RootMotion::FinalIK::FBIKChain::SetNodes(::ArrayW<::UnityEngine::Transform*> boneTransforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::SetNodes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNodes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneTransforms)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, boneTransforms);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.GetNodeIndex
int RootMotion::FinalIK::FBIKChain::GetNodeIndex(::UnityEngine::Transform* boneTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::GetNodeIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodeIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneTransform)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, boneTransform);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.IsValid
bool RootMotion::FinalIK::FBIKChain::IsValid(ByRef<::StringW> message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(message));
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.Initiate
void RootMotion::FinalIK::FBIKChain::Initiate(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.ReadPose
void RootMotion::FinalIK::FBIKChain::ReadPose(::RootMotion::FinalIK::IKSolverFullBody* solver, bool fullBody) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ReadPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(fullBody)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver, fullBody);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.CalculateBoneLengths
void RootMotion::FinalIK::FBIKChain::CalculateBoneLengths(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::CalculateBoneLengths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateBoneLengths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.Reach
void RootMotion::FinalIK::FBIKChain::Reach(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::Reach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.Push
::UnityEngine::Vector3 RootMotion::FinalIK::FBIKChain::Push(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::Push");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Push", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SolveTrigonometric
void RootMotion::FinalIK::FBIKChain::SolveTrigonometric(::RootMotion::FinalIK::IKSolverFullBody* solver, bool calculateBendDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::SolveTrigonometric");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveTrigonometric", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(calculateBendDirection)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver, calculateBendDirection);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.Stage1
void RootMotion::FinalIK::FBIKChain::Stage1(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::Stage1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stage1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.Stage2
void RootMotion::FinalIK::FBIKChain::Stage2(::RootMotion::FinalIK::IKSolverFullBody* solver, ::UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::Stage2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stage2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver, position);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SolveConstraintSystems
void RootMotion::FinalIK::FBIKChain::SolveConstraintSystems(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::SolveConstraintSystems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveConstraintSystems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SolveFABRIKJoint
::UnityEngine::Vector3 RootMotion::FinalIK::FBIKChain::SolveFABRIKJoint(::UnityEngine::Vector3 pos1, ::UnityEngine::Vector3 pos2, float length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::SolveFABRIKJoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveFABRIKJoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos1), ::il2cpp_utils::ExtractType(pos2), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, pos1, pos2, length);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.GetDirToBendPoint
::UnityEngine::Vector3 RootMotion::FinalIK::FBIKChain::GetDirToBendPoint(::UnityEngine::Vector3 direction, ::UnityEngine::Vector3 bendDirection, float directionMagnitude) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::GetDirToBendPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDirToBendPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(bendDirection), ::il2cpp_utils::ExtractType(directionMagnitude)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, direction, bendDirection, directionMagnitude);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SolveChildConstraints
void RootMotion::FinalIK::FBIKChain::SolveChildConstraints(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::SolveChildConstraints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveChildConstraints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SolveLinearConstraint
void RootMotion::FinalIK::FBIKChain::SolveLinearConstraint(::RootMotion::FinalIK::IKSolver::Node* node1, ::RootMotion::FinalIK::IKSolver::Node* node2, float crossFade, float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::SolveLinearConstraint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveLinearConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node1), ::il2cpp_utils::ExtractType(node2), ::il2cpp_utils::ExtractType(crossFade), ::il2cpp_utils::ExtractType(distance)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node1, node2, crossFade, distance);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.ForwardReach
void RootMotion::FinalIK::FBIKChain::ForwardReach(::UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ForwardReach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForwardReach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.BackwardReach
void RootMotion::FinalIK::FBIKChain::BackwardReach(::UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::BackwardReach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackwardReach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint
#include "RootMotion/FinalIK/FBIKChain_ChildConstraint.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single pushElasticity
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_pushElasticity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_pushElasticity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pushElasticity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pullElasticity
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_pullElasticity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_pullElasticity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pullElasticity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform bone1
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_bone1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_bone1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone1"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform bone2
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_bone2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_bone2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone2"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <nominalDistance>k__BackingField
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_$nominalDistance$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_$nominalDistance$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<nominalDistance>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isRigid>k__BackingField
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_$isRigid$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_$isRigid$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isRigid>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single crossFade
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_crossFade() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_crossFade");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "crossFade"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single inverseCrossFade
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_inverseCrossFade() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_inverseCrossFade");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inverseCrossFade"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 chain1Index
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_chain1Index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_chain1Index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chain1Index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 chain2Index
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_chain2Index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ChildConstraint::dyn_chain2Index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chain2Index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint.get_nominalDistance
float RootMotion::FinalIK::FBIKChain::ChildConstraint::get_nominalDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ChildConstraint::get_nominalDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_nominalDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint.set_nominalDistance
void RootMotion::FinalIK::FBIKChain::ChildConstraint::set_nominalDistance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ChildConstraint::set_nominalDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_nominalDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint.get_isRigid
bool RootMotion::FinalIK::FBIKChain::ChildConstraint::get_isRigid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ChildConstraint::get_isRigid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isRigid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint.set_isRigid
void RootMotion::FinalIK::FBIKChain::ChildConstraint::set_isRigid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ChildConstraint::set_isRigid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isRigid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint.Initiate
void RootMotion::FinalIK::FBIKChain::ChildConstraint::Initiate(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ChildConstraint::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint.OnPreSolve
void RootMotion::FinalIK::FBIKChain::ChildConstraint::OnPreSolve(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ChildConstraint::OnPreSolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint.Solve
void RootMotion::FinalIK::FBIKChain::ChildConstraint::Solve(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::ChildConstraint::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing
#include "RootMotion/FinalIK/FBIKChain.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing None
::RootMotion::FinalIK::FBIKChain::Smoothing RootMotion::FinalIK::FBIKChain::Smoothing::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::Smoothing::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::FinalIK::FBIKChain::Smoothing>("RootMotion.FinalIK", "FBIKChain/Smoothing", "None"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing None
void RootMotion::FinalIK::FBIKChain::Smoothing::_set_None(::RootMotion::FinalIK::FBIKChain::Smoothing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::Smoothing::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FBIKChain/Smoothing", "None", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing Exponential
::RootMotion::FinalIK::FBIKChain::Smoothing RootMotion::FinalIK::FBIKChain::Smoothing::_get_Exponential() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::Smoothing::_get_Exponential");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::FinalIK::FBIKChain::Smoothing>("RootMotion.FinalIK", "FBIKChain/Smoothing", "Exponential"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing Exponential
void RootMotion::FinalIK::FBIKChain::Smoothing::_set_Exponential(::RootMotion::FinalIK::FBIKChain::Smoothing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::Smoothing::_set_Exponential");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FBIKChain/Smoothing", "Exponential", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing Cubic
::RootMotion::FinalIK::FBIKChain::Smoothing RootMotion::FinalIK::FBIKChain::Smoothing::_get_Cubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::Smoothing::_get_Cubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::FinalIK::FBIKChain::Smoothing>("RootMotion.FinalIK", "FBIKChain/Smoothing", "Cubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing Cubic
void RootMotion::FinalIK::FBIKChain::Smoothing::_set_Cubic(::RootMotion::FinalIK::FBIKChain::Smoothing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::Smoothing::_set_Cubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FBIKChain/Smoothing", "Cubic", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::FBIKChain::Smoothing::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::Smoothing::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKConstraintBend
#include "RootMotion/FinalIK/IKConstraintBend.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.Warning/RootMotion.Logger
#include "RootMotion/Warning_Logger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform bone1
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKConstraintBend::dyn_bone1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_bone1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone1"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform bone2
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKConstraintBend::dyn_bone2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_bone2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone2"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform bone3
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKConstraintBend::dyn_bone3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_bone3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone3"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform bendGoal
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKConstraintBend::dyn_bendGoal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_bendGoal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bendGoal"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 direction
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::IKConstraintBend::dyn_direction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_direction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "direction"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion rotationOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::IKConstraintBend::dyn_rotationOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_rotationOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single weight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::IKConstraintBend::dyn_weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_weight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "weight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 defaultLocalDirection
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::IKConstraintBend::dyn_defaultLocalDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_defaultLocalDirection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultLocalDirection"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 defaultChildDirection
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::IKConstraintBend::dyn_defaultChildDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_defaultChildDirection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultChildDirection"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single clampF
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::IKConstraintBend::dyn_clampF() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_clampF");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clampF"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 chainIndex1
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKConstraintBend::dyn_chainIndex1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_chainIndex1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chainIndex1"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 nodeIndex1
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKConstraintBend::dyn_nodeIndex1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_nodeIndex1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nodeIndex1"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 chainIndex2
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKConstraintBend::dyn_chainIndex2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_chainIndex2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chainIndex2"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 nodeIndex2
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKConstraintBend::dyn_nodeIndex2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_nodeIndex2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nodeIndex2"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 chainIndex3
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKConstraintBend::dyn_chainIndex3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_chainIndex3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chainIndex3"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 nodeIndex3
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKConstraintBend::dyn_nodeIndex3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_nodeIndex3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nodeIndex3"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <initiated>k__BackingField
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::IKConstraintBend::dyn_$initiated$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_$initiated$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<initiated>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean limbOrientationsSet
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::IKConstraintBend::dyn_limbOrientationsSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::dyn_limbOrientationsSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "limbOrientationsSet"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.get_initiated
bool RootMotion::FinalIK::IKConstraintBend::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.set_initiated
void RootMotion::FinalIK::IKConstraintBend::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.IsValid
bool RootMotion::FinalIK::IKConstraintBend::IsValid(::RootMotion::FinalIK::IKSolverFullBody* solver, ::RootMotion::Warning::Logger* logger) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(logger)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, solver, logger);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.SetBones
void RootMotion::FinalIK::IKConstraintBend::SetBones(::UnityEngine::Transform* bone1, ::UnityEngine::Transform* bone2, ::UnityEngine::Transform* bone3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::SetBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bone1, bone2, bone3);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.Initiate
void RootMotion::FinalIK::IKConstraintBend::Initiate(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.SetLimbOrientation
void RootMotion::FinalIK::IKConstraintBend::SetLimbOrientation(::UnityEngine::Vector3 upper, ::UnityEngine::Vector3 lower, ::UnityEngine::Vector3 last) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::SetLimbOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLimbOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(upper), ::il2cpp_utils::ExtractType(lower), ::il2cpp_utils::ExtractType(last)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, upper, lower, last);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.LimitBend
void RootMotion::FinalIK::IKConstraintBend::LimitBend(float solverWeight, float positionWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::LimitBend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LimitBend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solverWeight), ::il2cpp_utils::ExtractType(positionWeight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solverWeight, positionWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.GetDir
::UnityEngine::Vector3 RootMotion::FinalIK::IKConstraintBend::GetDir(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::GetDir");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDir", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.OrthoToLimb
::UnityEngine::Vector3 RootMotion::FinalIK::IKConstraintBend::OrthoToLimb(::RootMotion::FinalIK::IKSolverFullBody* solver, ::UnityEngine::Vector3 tangent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::OrthoToLimb");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OrthoToLimb", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(tangent)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, solver, tangent);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.OrthoToBone1
::UnityEngine::Vector3 RootMotion::FinalIK::IKConstraintBend::OrthoToBone1(::RootMotion::FinalIK::IKSolverFullBody* solver, ::UnityEngine::Vector3 tangent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKConstraintBend::OrthoToBone1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OrthoToBone1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(tangent)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, solver, tangent);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Node
#include "RootMotion/FinalIK/IKSolver_Node.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform bone
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKEffector::dyn_bone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_bone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform target
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKEffector::dyn_target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "target"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single positionWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::IKEffector::dyn_positionWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_positionWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "positionWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rotationWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::IKEffector::dyn_rotationWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_rotationWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 position
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::IKEffector::dyn_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_position");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "position"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion rotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::IKEffector::dyn_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_rotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 positionOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::IKEffector::dyn_positionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_positionOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "positionOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isEndEffector>k__BackingField
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::IKEffector::dyn_$isEndEffector$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_$isEndEffector$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isEndEffector>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean effectChildNodes
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::IKEffector::dyn_effectChildNodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_effectChildNodes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "effectChildNodes"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maintainRelativePositionWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::IKEffector::dyn_maintainRelativePositionWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_maintainRelativePositionWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maintainRelativePositionWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] childBones
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& RootMotion::FinalIK::IKEffector::dyn_childBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_childBones");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "childBones"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform planeBone1
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKEffector::dyn_planeBone1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_planeBone1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "planeBone1"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform planeBone2
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKEffector::dyn_planeBone2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_planeBone2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "planeBone2"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform planeBone3
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKEffector::dyn_planeBone3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_planeBone3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "planeBone3"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion planeRotationOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::IKEffector::dyn_planeRotationOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_planeRotationOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "planeRotationOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single posW
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::IKEffector::dyn_posW() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_posW");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "posW"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single rotW
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::IKEffector::dyn_rotW() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_rotW");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotW"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] localPositions
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& RootMotion::FinalIK::IKEffector::dyn_localPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_localPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localPositions"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean usePlaneNodes
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::IKEffector::dyn_usePlaneNodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_usePlaneNodes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "usePlaneNodes"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion animatedPlaneRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::IKEffector::dyn_animatedPlaneRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_animatedPlaneRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animatedPlaneRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 animatedPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::IKEffector::dyn_animatedPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_animatedPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animatedPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean firstUpdate
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::IKEffector::dyn_firstUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_firstUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "firstUpdate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 chainIndex
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKEffector::dyn_chainIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_chainIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chainIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 nodeIndex
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKEffector::dyn_nodeIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_nodeIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nodeIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 plane1ChainIndex
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKEffector::dyn_plane1ChainIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_plane1ChainIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "plane1ChainIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 plane1NodeIndex
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKEffector::dyn_plane1NodeIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_plane1NodeIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "plane1NodeIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 plane2ChainIndex
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKEffector::dyn_plane2ChainIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_plane2ChainIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "plane2ChainIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 plane2NodeIndex
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKEffector::dyn_plane2NodeIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_plane2NodeIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "plane2NodeIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 plane3ChainIndex
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKEffector::dyn_plane3ChainIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_plane3ChainIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "plane3ChainIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 plane3NodeIndex
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKEffector::dyn_plane3NodeIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_plane3NodeIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "plane3NodeIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32[] childChainIndexes
[[deprecated("Use field access instead!")]] ::ArrayW<int>& RootMotion::FinalIK::IKEffector::dyn_childChainIndexes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_childChainIndexes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "childChainIndexes"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32[] childNodeIndexes
[[deprecated("Use field access instead!")]] ::ArrayW<int>& RootMotion::FinalIK::IKEffector::dyn_childNodeIndexes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::dyn_childNodeIndexes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "childNodeIndexes"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.get_isEndEffector
bool RootMotion::FinalIK::IKEffector::get_isEndEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::get_isEndEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEndEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.set_isEndEffector
void RootMotion::FinalIK::IKEffector::set_isEndEffector(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::set_isEndEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isEndEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.GetNode
::RootMotion::FinalIK::IKSolver::Node* RootMotion::FinalIK::IKEffector::GetNode(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::GetNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKSolver::Node*, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.PinToBone
void RootMotion::FinalIK::IKEffector::PinToBone(float positionWeight, float rotationWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::PinToBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PinToBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positionWeight), ::il2cpp_utils::ExtractType(rotationWeight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, positionWeight, rotationWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.IsValid
bool RootMotion::FinalIK::IKEffector::IsValid(::RootMotion::FinalIK::IKSolver* solver, ByRef<::StringW> message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, solver, byref(message));
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.Initiate
void RootMotion::FinalIK::IKEffector::Initiate(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.ResetOffset
void RootMotion::FinalIK::IKEffector::ResetOffset(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::ResetOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.SetToTarget
void RootMotion::FinalIK::IKEffector::SetToTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::SetToTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.OnPreSolve
void RootMotion::FinalIK::IKEffector::OnPreSolve(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::OnPreSolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.OnPostWrite
void RootMotion::FinalIK::IKEffector::OnPostWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::OnPostWrite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.GetPlaneRotation
::UnityEngine::Quaternion RootMotion::FinalIK::IKEffector::GetPlaneRotation(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::GetPlaneRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlaneRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.Update
void RootMotion::FinalIK::IKEffector::Update(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.GetPosition
::UnityEngine::Vector3 RootMotion::FinalIK::IKEffector::GetPosition(::RootMotion::FinalIK::IKSolverFullBody* solver, ByRef<::UnityEngine::Quaternion> planeRotationOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKEffector::GetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, solver, byref(planeRotationOffset));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKMapping
#include "RootMotion/FinalIK/IKMapping.hpp"
// Including type: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: RootMotion.Warning/RootMotion.Logger
#include "RootMotion/Warning_Logger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKMapping.IsValid
bool RootMotion::FinalIK::IKMapping::IsValid(::RootMotion::FinalIK::IKSolver* solver, ByRef<::StringW> message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, solver, byref(message));
}
// Autogenerated method: RootMotion.FinalIK.IKMapping.Initiate
void RootMotion::FinalIK::IKMapping::Initiate(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::Initiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping.BoneIsValid
bool RootMotion::FinalIK::IKMapping::BoneIsValid(::UnityEngine::Transform* bone, ::RootMotion::FinalIK::IKSolver* solver, ByRef<::StringW> message, ::RootMotion::Warning::Logger* logger) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BoneIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone), ::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(logger)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bone, solver, byref(message), logger);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping.SolveFABRIKJoint
::UnityEngine::Vector3 RootMotion::FinalIK::IKMapping::SolveFABRIKJoint(::UnityEngine::Vector3 pos1, ::UnityEngine::Vector3 pos2, float length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::SolveFABRIKJoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveFABRIKJoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos1), ::il2cpp_utils::ExtractType(pos2), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, pos1, pos2, length);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Node
#include "RootMotion/FinalIK/IKSolver_Node.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKMapping::BoneMap::dyn_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 chainIndex
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKMapping::BoneMap::dyn_chainIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_chainIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chainIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 nodeIndex
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKMapping::BoneMap::dyn_nodeIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_nodeIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nodeIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 defaultLocalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::IKMapping::BoneMap::dyn_defaultLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_defaultLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultLocalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion defaultLocalRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::IKMapping::BoneMap::dyn_defaultLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_defaultLocalRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultLocalRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 localSwingAxis
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::IKMapping::BoneMap::dyn_localSwingAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_localSwingAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localSwingAxis"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 localTwistAxis
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::IKMapping::BoneMap::dyn_localTwistAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_localTwistAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localTwistAxis"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 planePosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::IKMapping::BoneMap::dyn_planePosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_planePosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "planePosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 ikPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::IKMapping::BoneMap::dyn_ikPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_ikPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ikPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion defaultLocalTargetRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::IKMapping::BoneMap::dyn_defaultLocalTargetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_defaultLocalTargetRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultLocalTargetRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion maintainRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::IKMapping::BoneMap::dyn_maintainRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_maintainRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maintainRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single length
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::IKMapping::BoneMap::dyn_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_length");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "length"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion animatedRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::IKMapping::BoneMap::dyn_animatedRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_animatedRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animatedRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform planeBone1
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKMapping::BoneMap::dyn_planeBone1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_planeBone1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "planeBone1"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform planeBone2
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKMapping::BoneMap::dyn_planeBone2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_planeBone2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "planeBone2"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform planeBone3
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKMapping::BoneMap::dyn_planeBone3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_planeBone3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "planeBone3"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 plane1ChainIndex
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKMapping::BoneMap::dyn_plane1ChainIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_plane1ChainIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "plane1ChainIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 plane1NodeIndex
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKMapping::BoneMap::dyn_plane1NodeIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_plane1NodeIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "plane1NodeIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 plane2ChainIndex
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKMapping::BoneMap::dyn_plane2ChainIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_plane2ChainIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "plane2ChainIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 plane2NodeIndex
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKMapping::BoneMap::dyn_plane2NodeIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_plane2NodeIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "plane2NodeIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 plane3ChainIndex
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKMapping::BoneMap::dyn_plane3ChainIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_plane3ChainIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "plane3ChainIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 plane3NodeIndex
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKMapping::BoneMap::dyn_plane3NodeIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::dyn_plane3NodeIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "plane3NodeIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.get_swingDirection
::UnityEngine::Vector3 RootMotion::FinalIK::IKMapping::BoneMap::get_swingDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::get_swingDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_swingDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.get_isNodeBone
bool RootMotion::FinalIK::IKMapping::BoneMap::get_isNodeBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::get_isNodeBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isNodeBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.get_lastAnimatedTargetRotation
::UnityEngine::Quaternion RootMotion::FinalIK::IKMapping::BoneMap::get_lastAnimatedTargetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::get_lastAnimatedTargetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lastAnimatedTargetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.Initiate
void RootMotion::FinalIK::IKMapping::BoneMap::Initiate(::UnityEngine::Transform* transform, ::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, transform, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.StoreDefaultLocalState
void RootMotion::FinalIK::IKMapping::BoneMap::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.FixTransform
void RootMotion::FinalIK::IKMapping::BoneMap::FixTransform(bool position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::FixTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.SetLength
void RootMotion::FinalIK::IKMapping::BoneMap::SetLength(::RootMotion::FinalIK::IKMapping::BoneMap* nextBone) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::SetLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nextBone)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nextBone);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.SetLocalSwingAxis
void RootMotion::FinalIK::IKMapping::BoneMap::SetLocalSwingAxis(::RootMotion::FinalIK::IKMapping::BoneMap* swingTarget) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::SetLocalSwingAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalSwingAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(swingTarget)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, swingTarget);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.SetLocalSwingAxis
void RootMotion::FinalIK::IKMapping::BoneMap::SetLocalSwingAxis(::RootMotion::FinalIK::IKMapping::BoneMap* bone1, ::RootMotion::FinalIK::IKMapping::BoneMap* bone2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::SetLocalSwingAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalSwingAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bone1, bone2);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.SetLocalTwistAxis
void RootMotion::FinalIK::IKMapping::BoneMap::SetLocalTwistAxis(::UnityEngine::Vector3 twistDirection, ::UnityEngine::Vector3 normalDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::SetLocalTwistAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalTwistAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(twistDirection), ::il2cpp_utils::ExtractType(normalDirection)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, twistDirection, normalDirection);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.SetPlane
void RootMotion::FinalIK::IKMapping::BoneMap::SetPlane(::RootMotion::FinalIK::IKSolverFullBody* solver, ::UnityEngine::Transform* planeBone1, ::UnityEngine::Transform* planeBone2, ::UnityEngine::Transform* planeBone3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::SetPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(planeBone1), ::il2cpp_utils::ExtractType(planeBone2), ::il2cpp_utils::ExtractType(planeBone3)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver, planeBone1, planeBone2, planeBone3);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.UpdatePlane
void RootMotion::FinalIK::IKMapping::BoneMap::UpdatePlane(bool rotation, bool position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::UpdatePlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rotation, position);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.SetIKPosition
void RootMotion::FinalIK::IKMapping::BoneMap::SetIKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::SetIKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.MaintainRotation
void RootMotion::FinalIK::IKMapping::BoneMap::MaintainRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::MaintainRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MaintainRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.SetToIKPosition
void RootMotion::FinalIK::IKMapping::BoneMap::SetToIKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::SetToIKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.FixToNode
void RootMotion::FinalIK::IKMapping::BoneMap::FixToNode(::RootMotion::FinalIK::IKSolverFullBody* solver, float weight, ::RootMotion::FinalIK::IKSolver::Node* fixNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::FixToNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixToNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(fixNode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver, weight, fixNode);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.GetPlanePosition
::UnityEngine::Vector3 RootMotion::FinalIK::IKMapping::BoneMap::GetPlanePosition(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::GetPlanePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlanePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.PositionToPlane
void RootMotion::FinalIK::IKMapping::BoneMap::PositionToPlane(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::PositionToPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PositionToPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.RotateToPlane
void RootMotion::FinalIK::IKMapping::BoneMap::RotateToPlane(::RootMotion::FinalIK::IKSolverFullBody* solver, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::RotateToPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateToPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.Swing
void RootMotion::FinalIK::IKMapping::BoneMap::Swing(::UnityEngine::Vector3 swingTarget, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::Swing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Swing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(swingTarget), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, swingTarget, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.Swing
void RootMotion::FinalIK::IKMapping::BoneMap::Swing(::UnityEngine::Vector3 pos1, ::UnityEngine::Vector3 pos2, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::Swing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Swing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos1), ::il2cpp_utils::ExtractType(pos2), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos1, pos2, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.Twist
void RootMotion::FinalIK::IKMapping::BoneMap::Twist(::UnityEngine::Vector3 twistDirection, ::UnityEngine::Vector3 normalDirection, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::Twist");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Twist", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(twistDirection), ::il2cpp_utils::ExtractType(normalDirection), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, twistDirection, normalDirection, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.RotateToMaintain
void RootMotion::FinalIK::IKMapping::BoneMap::RotateToMaintain(float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::RotateToMaintain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateToMaintain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.RotateToEffector
void RootMotion::FinalIK::IKMapping::BoneMap::RotateToEffector(::RootMotion::FinalIK::IKSolverFullBody* solver, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::RotateToEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateToEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.GetTargetRotation
::UnityEngine::Quaternion RootMotion::FinalIK::IKMapping::BoneMap::GetTargetRotation(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMapping::BoneMap::GetTargetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTargetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method, solver);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKMappingBone
#include "RootMotion/FinalIK/IKMappingBone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform bone
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKMappingBone::dyn_bone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingBone::dyn_bone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maintainRotationWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::IKMappingBone::dyn_maintainRotationWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingBone::dyn_maintainRotationWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maintainRotationWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap boneMap
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKMapping::BoneMap*& RootMotion::FinalIK::IKMappingBone::dyn_boneMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingBone::dyn_boneMap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "boneMap"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKMapping::BoneMap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.StoreDefaultLocalState
void RootMotion::FinalIK::IKMappingBone::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingBone::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.FixTransforms
void RootMotion::FinalIK::IKMappingBone::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingBone::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.ReadPose
void RootMotion::FinalIK::IKMappingBone::ReadPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingBone::ReadPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.WritePose
void RootMotion::FinalIK::IKMappingBone::WritePose(float solverWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingBone::WritePose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WritePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solverWeight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solverWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.IsValid
bool RootMotion::FinalIK::IKMappingBone::IsValid(::RootMotion::FinalIK::IKSolver* solver, ByRef<::StringW> message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingBone::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, solver, byref(message));
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.Initiate
void RootMotion::FinalIK::IKMappingBone::Initiate(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingBone::Initiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKMappingLimb
#include "RootMotion/FinalIK/IKMappingLimb.hpp"
// Including type: RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType
#include "RootMotion/FinalIK/IKMappingLimb_BoneMapType.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform parentBone
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKMappingLimb::dyn_parentBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::dyn_parentBone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "parentBone"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform bone1
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKMappingLimb::dyn_bone1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::dyn_bone1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone1"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform bone2
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKMappingLimb::dyn_bone2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::dyn_bone2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone2"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform bone3
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKMappingLimb::dyn_bone3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::dyn_bone3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bone3"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maintainRotationWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::IKMappingLimb::dyn_maintainRotationWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::dyn_maintainRotationWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maintainRotationWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single weight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::IKMappingLimb::dyn_weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::dyn_weight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "weight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean updatePlaneRotations
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::IKMappingLimb::dyn_updatePlaneRotations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::dyn_updatePlaneRotations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "updatePlaneRotations"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap boneMapParent
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKMapping::BoneMap*& RootMotion::FinalIK::IKMappingLimb::dyn_boneMapParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::dyn_boneMapParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "boneMapParent"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKMapping::BoneMap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap boneMap1
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKMapping::BoneMap*& RootMotion::FinalIK::IKMappingLimb::dyn_boneMap1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::dyn_boneMap1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "boneMap1"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKMapping::BoneMap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap boneMap2
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKMapping::BoneMap*& RootMotion::FinalIK::IKMappingLimb::dyn_boneMap2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::dyn_boneMap2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "boneMap2"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKMapping::BoneMap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap boneMap3
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKMapping::BoneMap*& RootMotion::FinalIK::IKMappingLimb::dyn_boneMap3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::dyn_boneMap3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "boneMap3"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKMapping::BoneMap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.GetBoneMap
::RootMotion::FinalIK::IKMapping::BoneMap* RootMotion::FinalIK::IKMappingLimb::GetBoneMap(::RootMotion::FinalIK::IKMappingLimb::BoneMapType boneMap) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::GetBoneMap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBoneMap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneMap)})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKMapping::BoneMap*, false>(this, ___internal__method, boneMap);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.SetLimbOrientation
void RootMotion::FinalIK::IKMappingLimb::SetLimbOrientation(::UnityEngine::Vector3 upper, ::UnityEngine::Vector3 lower) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::SetLimbOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLimbOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(upper), ::il2cpp_utils::ExtractType(lower)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, upper, lower);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.SetBones
void RootMotion::FinalIK::IKMappingLimb::SetBones(::UnityEngine::Transform* bone1, ::UnityEngine::Transform* bone2, ::UnityEngine::Transform* bone3, ::UnityEngine::Transform* parentBone) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::SetBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3), ::il2cpp_utils::ExtractType(parentBone)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bone1, bone2, bone3, parentBone);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.StoreDefaultLocalState
void RootMotion::FinalIK::IKMappingLimb::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.FixTransforms
void RootMotion::FinalIK::IKMappingLimb::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.ReadPose
void RootMotion::FinalIK::IKMappingLimb::ReadPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::ReadPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.WritePose
void RootMotion::FinalIK::IKMappingLimb::WritePose(::RootMotion::FinalIK::IKSolverFullBody* solver, bool fullBody) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::WritePose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WritePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(fullBody)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver, fullBody);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.IsValid
bool RootMotion::FinalIK::IKMappingLimb::IsValid(::RootMotion::FinalIK::IKSolver* solver, ByRef<::StringW> message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, solver, byref(message));
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.Initiate
void RootMotion::FinalIK::IKMappingLimb::Initiate(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::Initiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType
#include "RootMotion/FinalIK/IKMappingLimb_BoneMapType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType Parent
::RootMotion::FinalIK::IKMappingLimb::BoneMapType RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Parent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::FinalIK::IKMappingLimb::BoneMapType>("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Parent"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType Parent
void RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Parent(::RootMotion::FinalIK::IKMappingLimb::BoneMapType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Parent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Parent", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType Bone1
::RootMotion::FinalIK::IKMappingLimb::BoneMapType RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::FinalIK::IKMappingLimb::BoneMapType>("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone1"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType Bone1
void RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone1(::RootMotion::FinalIK::IKMappingLimb::BoneMapType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone1", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType Bone2
::RootMotion::FinalIK::IKMappingLimb::BoneMapType RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::FinalIK::IKMappingLimb::BoneMapType>("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone2"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType Bone2
void RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone2(::RootMotion::FinalIK::IKMappingLimb::BoneMapType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone2", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType Bone3
::RootMotion::FinalIK::IKMappingLimb::BoneMapType RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::RootMotion::FinalIK::IKMappingLimb::BoneMapType>("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone3"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType Bone3
void RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone3(::RootMotion::FinalIK::IKMappingLimb::BoneMapType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone3", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKMappingLimb::BoneMapType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingLimb::BoneMapType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKMappingSpine
#include "RootMotion/FinalIK/IKMappingSpine.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] spineBones
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& RootMotion::FinalIK::IKMappingSpine::dyn_spineBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::dyn_spineBones");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spineBones"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftUpperArmBone
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKMappingSpine::dyn_leftUpperArmBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::dyn_leftUpperArmBone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftUpperArmBone"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightUpperArmBone
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKMappingSpine::dyn_rightUpperArmBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::dyn_rightUpperArmBone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightUpperArmBone"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftThighBone
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKMappingSpine::dyn_leftThighBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::dyn_leftThighBone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftThighBone"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightThighBone
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKMappingSpine::dyn_rightThighBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::dyn_rightThighBone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightThighBone"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 iterations
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKMappingSpine::dyn_iterations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::dyn_iterations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "iterations"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single twistWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::IKMappingSpine::dyn_twistWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::dyn_twistWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "twistWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 rootNodeIndex
[[deprecated("Use field access instead!")]] int& RootMotion::FinalIK::IKMappingSpine::dyn_rootNodeIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::dyn_rootNodeIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rootNodeIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap[] spine
[[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::IKMapping::BoneMap*>& RootMotion::FinalIK::IKMappingSpine::dyn_spine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::dyn_spine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spine"))->offset;
  return *reinterpret_cast<::ArrayW<::RootMotion::FinalIK::IKMapping::BoneMap*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap leftUpperArm
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKMapping::BoneMap*& RootMotion::FinalIK::IKMappingSpine::dyn_leftUpperArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::dyn_leftUpperArm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftUpperArm"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKMapping::BoneMap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap rightUpperArm
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKMapping::BoneMap*& RootMotion::FinalIK::IKMappingSpine::dyn_rightUpperArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::dyn_rightUpperArm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightUpperArm"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKMapping::BoneMap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap leftThigh
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKMapping::BoneMap*& RootMotion::FinalIK::IKMappingSpine::dyn_leftThigh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::dyn_leftThigh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftThigh"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKMapping::BoneMap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap rightThigh
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKMapping::BoneMap*& RootMotion::FinalIK::IKMappingSpine::dyn_rightThigh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::dyn_rightThigh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightThigh"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKMapping::BoneMap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean useFABRIK
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::IKMappingSpine::dyn_useFABRIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::dyn_useFABRIK");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useFABRIK"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.SetBones
void RootMotion::FinalIK::IKMappingSpine::SetBones(::ArrayW<::UnityEngine::Transform*> spineBones, ::UnityEngine::Transform* leftUpperArmBone, ::UnityEngine::Transform* rightUpperArmBone, ::UnityEngine::Transform* leftThighBone, ::UnityEngine::Transform* rightThighBone) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::SetBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spineBones), ::il2cpp_utils::ExtractType(leftUpperArmBone), ::il2cpp_utils::ExtractType(rightUpperArmBone), ::il2cpp_utils::ExtractType(leftThighBone), ::il2cpp_utils::ExtractType(rightThighBone)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, spineBones, leftUpperArmBone, rightUpperArmBone, leftThighBone, rightThighBone);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.StoreDefaultLocalState
void RootMotion::FinalIK::IKMappingSpine::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.FixTransforms
void RootMotion::FinalIK::IKMappingSpine::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.UseFABRIK
bool RootMotion::FinalIK::IKMappingSpine::UseFABRIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::UseFABRIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UseFABRIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.ReadPose
void RootMotion::FinalIK::IKMappingSpine::ReadPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::ReadPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.WritePose
void RootMotion::FinalIK::IKMappingSpine::WritePose(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::WritePose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WritePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.ForwardReach
void RootMotion::FinalIK::IKMappingSpine::ForwardReach(::UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::ForwardReach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForwardReach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.BackwardReach
void RootMotion::FinalIK::IKMappingSpine::BackwardReach(::UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::BackwardReach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackwardReach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.MapToSolverPositions
void RootMotion::FinalIK::IKMappingSpine::MapToSolverPositions(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::MapToSolverPositions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MapToSolverPositions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.IsValid
bool RootMotion::FinalIK::IKMappingSpine::IsValid(::RootMotion::FinalIK::IKSolver* solver, ByRef<::StringW> message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, solver, byref(message));
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.Initiate
void RootMotion::FinalIK::IKMappingSpine::Initiate(::RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKMappingSpine::Initiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone
#include "RootMotion/FinalIK/IKSolver_Bone.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Node
#include "RootMotion/FinalIK/IKSolver_Node.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.UpdateDelegate
#include "RootMotion/FinalIK/IKSolver_UpdateDelegate.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.IterationDelegate
#include "RootMotion/FinalIK/IKSolver_IterationDelegate.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 IKPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::IKSolver::dyn_IKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::dyn_IKPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IKPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single IKPositionWeight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::IKSolver::dyn_IKPositionWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::dyn_IKPositionWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IKPositionWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <initiated>k__BackingField
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::IKSolver::dyn_$initiated$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::dyn_$initiated$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<initiated>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.UpdateDelegate OnPreInitiate
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolver::UpdateDelegate*& RootMotion::FinalIK::IKSolver::dyn_OnPreInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::dyn_OnPreInitiate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnPreInitiate"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolver::UpdateDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.UpdateDelegate OnPostInitiate
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolver::UpdateDelegate*& RootMotion::FinalIK::IKSolver::dyn_OnPostInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::dyn_OnPostInitiate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnPostInitiate"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolver::UpdateDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.UpdateDelegate OnPreUpdate
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolver::UpdateDelegate*& RootMotion::FinalIK::IKSolver::dyn_OnPreUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::dyn_OnPreUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnPreUpdate"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolver::UpdateDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.UpdateDelegate OnPostUpdate
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolver::UpdateDelegate*& RootMotion::FinalIK::IKSolver::dyn_OnPostUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::dyn_OnPostUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnPostUpdate"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::IKSolver::UpdateDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean firstInitiation
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::IKSolver::dyn_firstInitiation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::dyn_firstInitiation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "firstInitiation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Transform root
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKSolver::dyn_root() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::dyn_root");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "root"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.get_initiated
bool RootMotion::FinalIK::IKSolver::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.set_initiated
void RootMotion::FinalIK::IKSolver::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.IsValid
bool RootMotion::FinalIK::IKSolver::IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.IsValid
bool RootMotion::FinalIK::IKSolver::IsValid(ByRef<::StringW> message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(message));
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.Initiate
void RootMotion::FinalIK::IKSolver::Initiate(::UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, root);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.Update
void RootMotion::FinalIK::IKSolver::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.GetIKPosition
::UnityEngine::Vector3 RootMotion::FinalIK::IKSolver::GetIKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::GetIKPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.SetIKPosition
void RootMotion::FinalIK::IKSolver::SetIKPosition(::UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::SetIKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.GetIKPositionWeight
float RootMotion::FinalIK::IKSolver::GetIKPositionWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::GetIKPositionWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKPositionWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.SetIKPositionWeight
void RootMotion::FinalIK::IKSolver::SetIKPositionWeight(float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::SetIKPositionWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKPositionWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.GetRoot
::UnityEngine::Transform* RootMotion::FinalIK::IKSolver::GetRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::GetRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.GetPoints
::ArrayW<::RootMotion::FinalIK::IKSolver::Point*> RootMotion::FinalIK::IKSolver::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::RootMotion::FinalIK::IKSolver::Point*>, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.GetPoint
::RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolver::GetPoint(::UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.FixTransforms
void RootMotion::FinalIK::IKSolver::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolver::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.OnInitiate
void RootMotion::FinalIK::IKSolver::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.OnUpdate
void RootMotion::FinalIK::IKSolver::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.LogWarning
void RootMotion::FinalIK::IKSolver::LogWarning(::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::LogWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.ContainsDuplicateBone
::UnityEngine::Transform* RootMotion::FinalIK::IKSolver::ContainsDuplicateBone(::ArrayW<::RootMotion::FinalIK::IKSolver::Bone*> bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::ContainsDuplicateBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolver", "ContainsDuplicateBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bones);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.HierarchyIsValid
bool RootMotion::FinalIK::IKSolver::HierarchyIsValid(::ArrayW<::RootMotion::FinalIK::IKSolver::Bone*> bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::HierarchyIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolver", "HierarchyIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bones);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.PreSolveBones
float RootMotion::FinalIK::IKSolver::PreSolveBones(ByRef<::ArrayW<::RootMotion::FinalIK::IKSolver::Bone*>> bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::PreSolveBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolver", "PreSolveBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(bones));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::FinalIK::IKSolver::Point::dyn_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Point::dyn_transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single weight
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::IKSolver::Point::dyn_weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Point::dyn_weight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "weight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 solverPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::IKSolver::Point::dyn_solverPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Point::dyn_solverPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solverPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion solverRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::IKSolver::Point::dyn_solverRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Point::dyn_solverRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "solverRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 defaultLocalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::IKSolver::Point::dyn_defaultLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Point::dyn_defaultLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultLocalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion defaultLocalRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::FinalIK::IKSolver::Point::dyn_defaultLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Point::dyn_defaultLocalRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultLocalRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolver::Point::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Point::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point.FixTransform
void RootMotion::FinalIK::IKSolver::Point::FixTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Point::FixTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point.UpdateSolverPosition
void RootMotion::FinalIK::IKSolver::Point::UpdateSolverPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Point::UpdateSolverPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolverPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point.UpdateSolverLocalPosition
void RootMotion::FinalIK::IKSolver::Point::UpdateSolverLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Point::UpdateSolverLocalPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolverLocalPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point.UpdateSolverState
void RootMotion::FinalIK::IKSolver::Point::UpdateSolverState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Point::UpdateSolverState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolverState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point.UpdateSolverLocalState
void RootMotion::FinalIK::IKSolver::Point::UpdateSolverLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Point::UpdateSolverLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolverLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone
#include "RootMotion/FinalIK/IKSolver_Bone.hpp"
// Including type: RootMotion.FinalIK.RotationLimit
#include "RootMotion/FinalIK/RotationLimit.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single length
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::IKSolver::Bone::dyn_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Bone::dyn_length");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "length"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single sqrMag
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::IKSolver::Bone::dyn_sqrMag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Bone::dyn_sqrMag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sqrMag"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 axis
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::IKSolver::Bone::dyn_axis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Bone::dyn_axis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "axis"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.RotationLimit _rotationLimit
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::RotationLimit*& RootMotion::FinalIK::IKSolver::Bone::dyn__rotationLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Bone::dyn__rotationLimit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationLimit"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::RotationLimit**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isLimited
[[deprecated("Use field access instead!")]] bool& RootMotion::FinalIK::IKSolver::Bone::dyn_isLimited() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Bone::dyn_isLimited");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isLimited"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone.get_rotationLimit
::RootMotion::FinalIK::RotationLimit* RootMotion::FinalIK::IKSolver::Bone::get_rotationLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Bone::get_rotationLimit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotationLimit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::RootMotion::FinalIK::RotationLimit*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone.set_rotationLimit
void RootMotion::FinalIK::IKSolver::Bone::set_rotationLimit(::RootMotion::FinalIK::RotationLimit* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Bone::set_rotationLimit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rotationLimit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone.Swing
void RootMotion::FinalIK::IKSolver::Bone::Swing(::UnityEngine::Vector3 swingTarget, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Bone::Swing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Swing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(swingTarget), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, swingTarget, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone.SolverSwing
void RootMotion::FinalIK::IKSolver::Bone::SolverSwing(::ArrayW<::RootMotion::FinalIK::IKSolver::Bone*> bones, int index, ::UnityEngine::Vector3 swingTarget, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Bone::SolverSwing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolver/Bone", "SolverSwing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(swingTarget), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bones, index, swingTarget, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone.Swing2D
void RootMotion::FinalIK::IKSolver::Bone::Swing2D(::UnityEngine::Vector3 swingTarget, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Bone::Swing2D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Swing2D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(swingTarget), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, swingTarget, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone.SetToSolverPosition
void RootMotion::FinalIK::IKSolver::Bone::SetToSolverPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolver::Bone::SetToSolverPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToSolverPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
